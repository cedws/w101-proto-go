// Code generated by w101-client-go. DO NOT EDIT.
package skullriders

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type skullridersService interface {
	SkullRidersConnect(SkullRidersConnect)
	SkullRidersMoved(SkullRidersMoved)
	SkullRidersRewards(SkullRidersRewards)
}

type SkullridersService struct {
	skullridersService
}

type SkullridersClient struct {
	c *proto.Client
}

func (l *SkullridersService) SkullRidersConnect(_ SkullRidersConnect) {}
func (l *SkullridersService) SkullRidersMoved(_ SkullRidersMoved)     {}
func (l *SkullridersService) SkullRidersRewards(_ SkullRidersRewards) {}

func RegisterSkullridersService(r *proto.MessageRouter, s skullridersService) {
	proto.RegisterMessageHandler(r, 40, 1, s.SkullRidersConnect)
	proto.RegisterMessageHandler(r, 40, 2, s.SkullRidersMoved)
	proto.RegisterMessageHandler(r, 40, 3, s.SkullRidersRewards)
}

func NewSkullridersClient(c *proto.Client) SkullridersClient {
	return SkullridersClient{c}
}

func (c SkullridersClient) SkullRidersConnect(m *SkullRidersConnect) error {
	return c.c.WriteMessage(40, 1, m)
}

func (c SkullridersClient) SkullRidersMoved(m *SkullRidersMoved) error {
	return c.c.WriteMessage(40, 2, m)
}

func (c SkullridersClient) SkullRidersRewards(m *SkullRidersRewards) error {
	return c.c.WriteMessage(40, 3, m)
}

type SkullRidersConnect struct {
}

func (s *SkullRidersConnect) Marshal() []byte {
	return []byte{}
}

func (s *SkullRidersConnect) Unmarshal(data []byte) error {
	return nil
}

type SkullRidersMoved struct {
}

func (s *SkullRidersMoved) Marshal() []byte {
	return []byte{}
}

func (s *SkullRidersMoved) Unmarshal(data []byte) error {
	return nil
}

type SkullRidersRewards struct {
	GameName string
	Score    int32
}

func (s *SkullRidersRewards) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.GameName)))
	binary.Write(b, binary.LittleEndian, s.Score)
	writeString_40(b, s.GameName)
	return b.Bytes()
}

func (s *SkullRidersRewards) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Score); err != nil {
		return err
	}
	if s.GameName, err = readString_40(b); err != nil {
		return err
	}
	return nil
}

func writeString_40(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_40(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
