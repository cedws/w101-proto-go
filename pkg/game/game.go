// Code generated by w101-client-go. DO NOT EDIT.
package game

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/codegen"
	"github.com/cedws/w101-client-go/proto"
)

type service interface {
	ADCLICKTHROUGH(ADCLICKTHROUGH)
	AddEffect(AddEffect)
	AddItemRequest(AddItemRequest)
	AddObject(AddObject)
	AddParticle(AddParticle)
	AddZoneTimer(AddZoneTimer)
	Attach(Attach)
	AttachFailed(AttachFailed)
	AuctionHouseUpdate(AuctionHouseUpdate)
	Badges(Badges)
	BanRsp(BanRsp)
	BestFriend(BestFriend)
	Blackball(Blackball)
	BuddyDrop(BuddyDrop)
	BuddyEntry(BuddyEntry)
	BuddyListComplete(BuddyListComplete)
	BuddyRequestAccept(BuddyRequestAccept)
	BuddyRequestAcceptFwd(BuddyRequestAcceptFwd)
	BuddyRequestAdd(BuddyRequestAdd)
	BuddyRequestAddFwd(BuddyRequestAddFwd)
	BuddyRequestDeny(BuddyRequestDeny)
	BuddyRequestDenyFwd(BuddyRequestDenyFwd)
	BuddyRequestDrop(BuddyRequestDrop)
	BuddyRequestError(BuddyRequestError)
	BuddyRequestList(BuddyRequestList)
	BuddyStats(BuddyStats)
	BuddyStatusUpdate(BuddyStatusUpdate)
	BugReport(BugReport)
	BugSubmitResponse(BugSubmitResponse)
	ChannelChat(ChannelChat)
	ChannelSubscription(ChannelSubscription)
	ChatDiagnostics(ChatDiagnostics)
	ChatError(ChatError)
	CheckSubscription(CheckSubscription)
	CheckMail(CheckMail)
	ClientMove(ClientMove)
	ClientMoveState(ClientMoveState)
	ClientNotifyText(ClientNotifyText)
	ClientTutorialEvent(ClientTutorialEvent)
	ClientDisconnect(ClientDisconnect)
	ClientError(ClientError)
	CLIENTPROCESSTERMINATED(CLIENTPROCESSTERMINATED)
	CombineInventoryItems(CombineInventoryItems)
	Command(Command)
	CommandResult(CommandResult)
	CompanionEffects(CompanionEffects)
	CoreEmote(CoreEmote)
	CreateChannelResponse(CreateChannelResponse)
	CREATESESSION(CREATESESSION)
	CSRBankItems(CSRBankItems)
	CSRBankItemsDone(CSRBankItemsDone)
	CSREditCharacter(CSREditCharacter)
	CSREditCharacterFailed(CSREditCharacterFailed)
	CSRFinishedHouse(CSRFinishedHouse)
	CSRSearchList(CSRSearchList)
	CSRMailData(CSRMailData)
	CSRReceiveGifts(CSRReceiveGifts)
	DEBUGDELETEALLOBJECTS(DEBUGDELETEALLOBJECTS)
	DeleteObject(DeleteObject)
	DeleteGift(DeleteGift)
	DirectedChat(DirectedChat)
	DirectedChatByNameResponse(DirectedChatByNameResponse)
	DirectedChatFail(DirectedChatFail)
	DirectedQuickChat(DirectedQuickChat)
	DirectedQuickChatExt(DirectedQuickChatExt)
	DisconnectAfk(DisconnectAfk)
	DownloadBrowser(DownloadBrowser)
	DownloadPackage(DownloadPackage)
	DownloadPackageElement(DownloadPackageElement)
	DynaModBehaviorUpdateMods(DynaModBehaviorUpdateMods)
	DynaModDump(DynaModDump)
	EnterState(EnterState)
	EquipItem(EquipItem)
	EquipmentBehaviorEquipItem(EquipmentBehaviorEquipItem)
	EquipmentBehaviorPublicEquipItem(EquipmentBehaviorPublicEquipItem)
	EquipmentBehaviorPublicUnequipItem(EquipmentBehaviorPublicUnequipItem)
	EquipmentBehaviorUnequipItem(EquipmentBehaviorUnequipItem)
	FeedInventoryItem(FeedInventoryItem)
	FINDSESSIONS(FINDSESSIONS)
	FINDSESSIONPLAYERS(FINDSESSIONPLAYERS)
	GenericGame(GenericGame)
	GetLadder(GetLadder)
	GETRANKINGS(GETRANKINGS)
	GiftRedeemed(GiftRedeemed)
	GotoPlayer(GotoPlayer)
	GotoPlayerResponse(GotoPlayerResponse)
	HarassmentReport(HarassmentReport)
	IgnoreAdd(IgnoreAdd)
	IgnoreDrop(IgnoreDrop)
	IgnoreList(IgnoreList)
	InteractObject(InteractObject)
	InteractOption(InteractOption)
	INVENTORYBEHAVIORADDITEM(INVENTORYBEHAVIORADDITEM)
	INVENTORYBEHAVIORREMOVEITEM(INVENTORYBEHAVIORREMOVEITEM)
	INVENTORYBEHAVIORTRADEITEM(INVENTORYBEHAVIORTRADEITEM)
	InviteFriend(InviteFriend)
	InviteResponse(InviteResponse)
	JoinChannelResponse(JoinChannelResponse)
	JOINSESSION(JOINSESSION)
	Jump(Jump)
	KILLCLIENTPROCESS(KILLCLIENTPROCESS)
	LADDER(LADDER)
	LeaveChannelResponse(LeaveChannelResponse)
	LeaveHousingLot(LeaveHousingLot)
	LeaveServiceRange(LeaveServiceRange)
	LeaveState(LeaveState)
	LOADSAVEOBJECTS(LOADSAVEOBJECTS)
	LoginComplete(LoginComplete)
	MailData(MailData)
	MarkLocation(MarkLocation)
	MarkLocationResponse(MarkLocationResponse)
	MatchAward(MatchAward)
	MatchInvite(MatchInvite)
	MatchMakerUpdate(MatchMakerUpdate)
	MatchReady(MatchReady)
	MatchResult(MatchResult)
	MESSAGEPROCESS(MESSAGEPROCESS)
	MoveCorrection(MoveCorrection)
	MoveState(MoveState)
	Mute(Mute)
	MuteRsp(MuteRsp)
	NewObject(NewObject)
	NewSysStats(NewSysStats)
	NewTickCnt(NewTickCnt)
	NewTourneyRewards(NewTourneyRewards)
	NewMail(NewMail)
	NotifyChannelInstance(NotifyChannelInstance)
	NotifyGift(NotifyGift)
	NotMuted(NotMuted)
	NotAfk(NotAfk)
	NPCSpeech(NPCSpeech)
	ObjectInfoQuery(ObjectInfoQuery)
	PartyDisband(PartyDisband)
	PartyJoinFailed(PartyJoinFailed)
	PartyJoinNotification(PartyJoinNotification)
	PartyLeave(PartyLeave)
	PartyLeaveNotification(PartyLeaveNotification)
	PartyLevelUp(PartyLevelUp)
	PartyLevelUpUpdate(PartyLevelUpUpdate)
	PartyMultiPlayerMountEquip(PartyMultiPlayerMountEquip)
	PartyMultiPlayerMountEquipUpdate(PartyMultiPlayerMountEquipUpdate)
	PartyMultiPlayerMountJoin(PartyMultiPlayerMountJoin)
	PartyMultiPlayerMountJoinUpdate(PartyMultiPlayerMountJoinUpdate)
	PartyRequestAccept(PartyRequestAccept)
	PartyRequestDecline(PartyRequestDecline)
	PartyRequestInvite(PartyRequestInvite)
	PartyRequestJoin(PartyRequestJoin)
	PartyRequestMemberZones(PartyRequestMemberZones)
	PartyRequestResponse(PartyRequestResponse)
	PartyRequestTimeout(PartyRequestTimeout)
	PartySubmitMemberZones(PartySubmitMemberZones)
	PartyUpdate(PartyUpdate)
	PartyZoneRequest(PartyZoneRequest)
	PartyZoneRequestResponse(PartyZoneRequestResponse)
	PickUpObject(PickUpObject)
	PlaceObject(PlaceObject)
	PlayCinematic(PlayCinematic)
	PlayerBlackballedAlert(PlayerBlackballedAlert)
	PlayerReadyAck(PlayerReadyAck)
	PlaySound(PlaySound)
	PostZoneEventFromClient(PostZoneEventFromClient)
	PreviewIsland(PreviewIsland)
	PvPUpdateInfo(PvPUpdateInfo)
	QueryLogout(QueryLogout)
	RadialChat(RadialChat)
	RadialQuickChat(RadialQuickChat)
	RadialQuickChatExt(RadialQuickChatExt)
	RadialZoneClusterQuickChat(RadialZoneClusterQuickChat)
	RANKING(RANKING)
	RealmInfoQuery(RealmInfoQuery)
	RecallLocation(RecallLocation)
	ReceiveGifts(ReceiveGifts)
	ReceivePromotions(ReceivePromotions)
	RedeemGift(RedeemGift)
	RedeemMailGift(RedeemMailGift)
	RedeemMailGiftResponse(RedeemMailGiftResponse)
	ReleaseDelay(ReleaseDelay)
	ReloadTemplateDir(ReloadTemplateDir)
	RemovedShopper(RemovedShopper)
	RemoveEffect(RemoveEffect)
	RemoveItemRequest(RemoveItemRequest)
	RemoveObject(RemoveObject)
	RemoveParticle(RemoveParticle)
	RemoveZoneTimer(RemoveZoneTimer)
	ReportAdTakeover(ReportAdTakeover)
	ReqAskServer(ReqAskServer)
	ReqChatDiagnostics(ReqChatDiagnostics)
	RequestAdvanceChannelInstance(RequestAdvanceChannelInstance)
	RequestChatCode(RequestChatCode)
	RequestCreateChannel(RequestCreateChannel)
	RequestDirectedChat(RequestDirectedChat)
	RequestDirectedChatByName(RequestDirectedChatByName)
	RequestDirectedQuickChat(RequestDirectedQuickChat)
	RequestDirectedQuickChatExt(RequestDirectedQuickChatExt)
	RequestJoinChannel(RequestJoinChannel)
	RequestJoinChannelByName(RequestJoinChannelByName)
	RequestLeaveChannel(RequestLeaveChannel)
	RequestLeaveChannelByName(RequestLeaveChannelByName)
	RequestMaxFriends(RequestMaxFriends)
	RequestRadialChat(RequestRadialChat)
	RequestRadialFriendChat(RequestRadialFriendChat)
	RequestRadialFriendQuickChat(RequestRadialFriendQuickChat)
	RequestRadialOwnerChat(RequestRadialOwnerChat)
	RequestRadialQuickChat(RequestRadialQuickChat)
	RequestRadialQuickChatExt(RequestRadialQuickChatExt)
	RequestSession(RequestSession)
	RequestZoneClusterQuickChat(RequestZoneClusterQuickChat)
	RequestGifts(RequestGifts)
	RequestPromotions(RequestPromotions)
	RestoreCharRsp(RestoreCharRsp)
	RetrieveMail(RetrieveMail)
	RetryTeleport(RetryTeleport)
	Script(Script)
	SelectBadge(SelectBadge)
	SendChatCode(SendChatCode)
	SendInteractOptions(SendInteractOptions)
	SendText(SendText)
	ServerMove(ServerMove)
	ServerShutdown(ServerShutdown)
	ServerTeleport(ServerTeleport)
	ServerTransfer(ServerTransfer)
	ServerTutorialCommand(ServerTutorialCommand)
	ServerError(ServerError)
	SERVERPROCESSRUNNING(SERVERPROCESSRUNNING)
	SESSION(SESSION)
	SESSIONERROR(SESSIONERROR)
	SESSIONPLAYER(SESSIONPLAYER)
	SETHOUSECUSTOMIZATION(SETHOUSECUSTOMIZATION)
	SplitQuantity(SplitQuantity)
	StartStagedCinematic(StartStagedCinematic)
	STARTCLIENTPROCESS(STARTCLIENTPROCESS)
	STARTSERVERPROCESS(STARTSERVERPROCESS)
	SuboptimalBracketResponse(SuboptimalBracketResponse)
	TeleportToGameZone(TeleportToGameZone)
	TournamentUpdate(TournamentUpdate)
	TransferCharRsp(TransferCharRsp)
	TransferInstance(TransferInstance)
	TransferRealms(TransferRealms)
	TrashInventoryItem(TrashInventoryItem)
	Tutorials(Tutorials)
	UpdateObject(UpdateObject)
	UpdateQuantity(UpdateQuantity)
	UpdateZoneCounter(UpdateZoneCounter)
	UpdateZoneTimer(UpdateZoneTimer)
	UseChatCode(UseChatCode)
	CSRViewAccount(CSRViewAccount)
	WizBang(WizBang)
	ZombiePlayer(ZombiePlayer)
	ZONEEVENTTIMEREXPIRED(ZONEEVENTTIMEREXPIRED)
	ZoneTransfer(ZoneTransfer)
	ZoneTransferAck(ZoneTransferAck)
	ZoneTransferNack(ZoneTransferNack)
	ZoneTransferRequest(ZoneTransferRequest)
}

func (Service) ADCLICKTHROUGH(ADCLICKTHROUGH)                                         {}
func (Service) AddEffect(AddEffect)                                                   {}
func (Service) AddItemRequest(AddItemRequest)                                         {}
func (Service) AddObject(AddObject)                                                   {}
func (Service) AddParticle(AddParticle)                                               {}
func (Service) AddZoneTimer(AddZoneTimer)                                             {}
func (Service) Attach(Attach)                                                         {}
func (Service) AttachFailed(AttachFailed)                                             {}
func (Service) AuctionHouseUpdate(AuctionHouseUpdate)                                 {}
func (Service) Badges(Badges)                                                         {}
func (Service) BanRsp(BanRsp)                                                         {}
func (Service) BestFriend(BestFriend)                                                 {}
func (Service) Blackball(Blackball)                                                   {}
func (Service) BuddyDrop(BuddyDrop)                                                   {}
func (Service) BuddyEntry(BuddyEntry)                                                 {}
func (Service) BuddyListComplete(BuddyListComplete)                                   {}
func (Service) BuddyRequestAccept(BuddyRequestAccept)                                 {}
func (Service) BuddyRequestAcceptFwd(BuddyRequestAcceptFwd)                           {}
func (Service) BuddyRequestAdd(BuddyRequestAdd)                                       {}
func (Service) BuddyRequestAddFwd(BuddyRequestAddFwd)                                 {}
func (Service) BuddyRequestDeny(BuddyRequestDeny)                                     {}
func (Service) BuddyRequestDenyFwd(BuddyRequestDenyFwd)                               {}
func (Service) BuddyRequestDrop(BuddyRequestDrop)                                     {}
func (Service) BuddyRequestError(BuddyRequestError)                                   {}
func (Service) BuddyRequestList(BuddyRequestList)                                     {}
func (Service) BuddyStats(BuddyStats)                                                 {}
func (Service) BuddyStatusUpdate(BuddyStatusUpdate)                                   {}
func (Service) BugReport(BugReport)                                                   {}
func (Service) BugSubmitResponse(BugSubmitResponse)                                   {}
func (Service) ChannelChat(ChannelChat)                                               {}
func (Service) ChannelSubscription(ChannelSubscription)                               {}
func (Service) ChatDiagnostics(ChatDiagnostics)                                       {}
func (Service) ChatError(ChatError)                                                   {}
func (Service) CheckSubscription(CheckSubscription)                                   {}
func (Service) CheckMail(CheckMail)                                                   {}
func (Service) ClientMove(ClientMove)                                                 {}
func (Service) ClientMoveState(ClientMoveState)                                       {}
func (Service) ClientNotifyText(ClientNotifyText)                                     {}
func (Service) ClientTutorialEvent(ClientTutorialEvent)                               {}
func (Service) ClientDisconnect(ClientDisconnect)                                     {}
func (Service) ClientError(ClientError)                                               {}
func (Service) CLIENTPROCESSTERMINATED(CLIENTPROCESSTERMINATED)                       {}
func (Service) CombineInventoryItems(CombineInventoryItems)                           {}
func (Service) Command(Command)                                                       {}
func (Service) CommandResult(CommandResult)                                           {}
func (Service) CompanionEffects(CompanionEffects)                                     {}
func (Service) CoreEmote(CoreEmote)                                                   {}
func (Service) CreateChannelResponse(CreateChannelResponse)                           {}
func (Service) CREATESESSION(CREATESESSION)                                           {}
func (Service) CSRBankItems(CSRBankItems)                                             {}
func (Service) CSRBankItemsDone(CSRBankItemsDone)                                     {}
func (Service) CSREditCharacter(CSREditCharacter)                                     {}
func (Service) CSREditCharacterFailed(CSREditCharacterFailed)                         {}
func (Service) CSRFinishedHouse(CSRFinishedHouse)                                     {}
func (Service) CSRSearchList(CSRSearchList)                                           {}
func (Service) CSRMailData(CSRMailData)                                               {}
func (Service) CSRReceiveGifts(CSRReceiveGifts)                                       {}
func (Service) DEBUGDELETEALLOBJECTS(DEBUGDELETEALLOBJECTS)                           {}
func (Service) DeleteObject(DeleteObject)                                             {}
func (Service) DeleteGift(DeleteGift)                                                 {}
func (Service) DirectedChat(DirectedChat)                                             {}
func (Service) DirectedChatByNameResponse(DirectedChatByNameResponse)                 {}
func (Service) DirectedChatFail(DirectedChatFail)                                     {}
func (Service) DirectedQuickChat(DirectedQuickChat)                                   {}
func (Service) DirectedQuickChatExt(DirectedQuickChatExt)                             {}
func (Service) DisconnectAfk(DisconnectAfk)                                           {}
func (Service) DownloadBrowser(DownloadBrowser)                                       {}
func (Service) DownloadPackage(DownloadPackage)                                       {}
func (Service) DownloadPackageElement(DownloadPackageElement)                         {}
func (Service) DynaModBehaviorUpdateMods(DynaModBehaviorUpdateMods)                   {}
func (Service) DynaModDump(DynaModDump)                                               {}
func (Service) EnterState(EnterState)                                                 {}
func (Service) EquipItem(EquipItem)                                                   {}
func (Service) EquipmentBehaviorEquipItem(EquipmentBehaviorEquipItem)                 {}
func (Service) EquipmentBehaviorPublicEquipItem(EquipmentBehaviorPublicEquipItem)     {}
func (Service) EquipmentBehaviorPublicUnequipItem(EquipmentBehaviorPublicUnequipItem) {}
func (Service) EquipmentBehaviorUnequipItem(EquipmentBehaviorUnequipItem)             {}
func (Service) FeedInventoryItem(FeedInventoryItem)                                   {}
func (Service) FINDSESSIONS(FINDSESSIONS)                                             {}
func (Service) FINDSESSIONPLAYERS(FINDSESSIONPLAYERS)                                 {}
func (Service) GenericGame(GenericGame)                                               {}
func (Service) GetLadder(GetLadder)                                                   {}
func (Service) GETRANKINGS(GETRANKINGS)                                               {}
func (Service) GiftRedeemed(GiftRedeemed)                                             {}
func (Service) GotoPlayer(GotoPlayer)                                                 {}
func (Service) GotoPlayerResponse(GotoPlayerResponse)                                 {}
func (Service) HarassmentReport(HarassmentReport)                                     {}
func (Service) IgnoreAdd(IgnoreAdd)                                                   {}
func (Service) IgnoreDrop(IgnoreDrop)                                                 {}
func (Service) IgnoreList(IgnoreList)                                                 {}
func (Service) InteractObject(InteractObject)                                         {}
func (Service) InteractOption(InteractOption)                                         {}
func (Service) INVENTORYBEHAVIORADDITEM(INVENTORYBEHAVIORADDITEM)                     {}
func (Service) INVENTORYBEHAVIORREMOVEITEM(INVENTORYBEHAVIORREMOVEITEM)               {}
func (Service) INVENTORYBEHAVIORTRADEITEM(INVENTORYBEHAVIORTRADEITEM)                 {}
func (Service) InviteFriend(InviteFriend)                                             {}
func (Service) InviteResponse(InviteResponse)                                         {}
func (Service) JoinChannelResponse(JoinChannelResponse)                               {}
func (Service) JOINSESSION(JOINSESSION)                                               {}
func (Service) Jump(Jump)                                                             {}
func (Service) KILLCLIENTPROCESS(KILLCLIENTPROCESS)                                   {}
func (Service) LADDER(LADDER)                                                         {}
func (Service) LeaveChannelResponse(LeaveChannelResponse)                             {}
func (Service) LeaveHousingLot(LeaveHousingLot)                                       {}
func (Service) LeaveServiceRange(LeaveServiceRange)                                   {}
func (Service) LeaveState(LeaveState)                                                 {}
func (Service) LOADSAVEOBJECTS(LOADSAVEOBJECTS)                                       {}
func (Service) LoginComplete(LoginComplete)                                           {}
func (Service) MailData(MailData)                                                     {}
func (Service) MarkLocation(MarkLocation)                                             {}
func (Service) MarkLocationResponse(MarkLocationResponse)                             {}
func (Service) MatchAward(MatchAward)                                                 {}
func (Service) MatchInvite(MatchInvite)                                               {}
func (Service) MatchMakerUpdate(MatchMakerUpdate)                                     {}
func (Service) MatchReady(MatchReady)                                                 {}
func (Service) MatchResult(MatchResult)                                               {}
func (Service) MESSAGEPROCESS(MESSAGEPROCESS)                                         {}
func (Service) MoveCorrection(MoveCorrection)                                         {}
func (Service) MoveState(MoveState)                                                   {}
func (Service) Mute(Mute)                                                             {}
func (Service) MuteRsp(MuteRsp)                                                       {}
func (Service) NewObject(NewObject)                                                   {}
func (Service) NewSysStats(NewSysStats)                                               {}
func (Service) NewTickCnt(NewTickCnt)                                                 {}
func (Service) NewTourneyRewards(NewTourneyRewards)                                   {}
func (Service) NewMail(NewMail)                                                       {}
func (Service) NotifyChannelInstance(NotifyChannelInstance)                           {}
func (Service) NotifyGift(NotifyGift)                                                 {}
func (Service) NotMuted(NotMuted)                                                     {}
func (Service) NotAfk(NotAfk)                                                         {}
func (Service) NPCSpeech(NPCSpeech)                                                   {}
func (Service) ObjectInfoQuery(ObjectInfoQuery)                                       {}
func (Service) PartyDisband(PartyDisband)                                             {}
func (Service) PartyJoinFailed(PartyJoinFailed)                                       {}
func (Service) PartyJoinNotification(PartyJoinNotification)                           {}
func (Service) PartyLeave(PartyLeave)                                                 {}
func (Service) PartyLeaveNotification(PartyLeaveNotification)                         {}
func (Service) PartyLevelUp(PartyLevelUp)                                             {}
func (Service) PartyLevelUpUpdate(PartyLevelUpUpdate)                                 {}
func (Service) PartyMultiPlayerMountEquip(PartyMultiPlayerMountEquip)                 {}
func (Service) PartyMultiPlayerMountEquipUpdate(PartyMultiPlayerMountEquipUpdate)     {}
func (Service) PartyMultiPlayerMountJoin(PartyMultiPlayerMountJoin)                   {}
func (Service) PartyMultiPlayerMountJoinUpdate(PartyMultiPlayerMountJoinUpdate)       {}
func (Service) PartyRequestAccept(PartyRequestAccept)                                 {}
func (Service) PartyRequestDecline(PartyRequestDecline)                               {}
func (Service) PartyRequestInvite(PartyRequestInvite)                                 {}
func (Service) PartyRequestJoin(PartyRequestJoin)                                     {}
func (Service) PartyRequestMemberZones(PartyRequestMemberZones)                       {}
func (Service) PartyRequestResponse(PartyRequestResponse)                             {}
func (Service) PartyRequestTimeout(PartyRequestTimeout)                               {}
func (Service) PartySubmitMemberZones(PartySubmitMemberZones)                         {}
func (Service) PartyUpdate(PartyUpdate)                                               {}
func (Service) PartyZoneRequest(PartyZoneRequest)                                     {}
func (Service) PartyZoneRequestResponse(PartyZoneRequestResponse)                     {}
func (Service) PickUpObject(PickUpObject)                                             {}
func (Service) PlaceObject(PlaceObject)                                               {}
func (Service) PlayCinematic(PlayCinematic)                                           {}
func (Service) PlayerBlackballedAlert(PlayerBlackballedAlert)                         {}
func (Service) PlayerReadyAck(PlayerReadyAck)                                         {}
func (Service) PlaySound(PlaySound)                                                   {}
func (Service) PostZoneEventFromClient(PostZoneEventFromClient)                       {}
func (Service) PreviewIsland(PreviewIsland)                                           {}
func (Service) PvPUpdateInfo(PvPUpdateInfo)                                           {}
func (Service) QueryLogout(QueryLogout)                                               {}
func (Service) RadialChat(RadialChat)                                                 {}
func (Service) RadialQuickChat(RadialQuickChat)                                       {}
func (Service) RadialQuickChatExt(RadialQuickChatExt)                                 {}
func (Service) RadialZoneClusterQuickChat(RadialZoneClusterQuickChat)                 {}
func (Service) RANKING(RANKING)                                                       {}
func (Service) RealmInfoQuery(RealmInfoQuery)                                         {}
func (Service) RecallLocation(RecallLocation)                                         {}
func (Service) ReceiveGifts(ReceiveGifts)                                             {}
func (Service) ReceivePromotions(ReceivePromotions)                                   {}
func (Service) RedeemGift(RedeemGift)                                                 {}
func (Service) RedeemMailGift(RedeemMailGift)                                         {}
func (Service) RedeemMailGiftResponse(RedeemMailGiftResponse)                         {}
func (Service) ReleaseDelay(ReleaseDelay)                                             {}
func (Service) ReloadTemplateDir(ReloadTemplateDir)                                   {}
func (Service) RemovedShopper(RemovedShopper)                                         {}
func (Service) RemoveEffect(RemoveEffect)                                             {}
func (Service) RemoveItemRequest(RemoveItemRequest)                                   {}
func (Service) RemoveObject(RemoveObject)                                             {}
func (Service) RemoveParticle(RemoveParticle)                                         {}
func (Service) RemoveZoneTimer(RemoveZoneTimer)                                       {}
func (Service) ReportAdTakeover(ReportAdTakeover)                                     {}
func (Service) ReqAskServer(ReqAskServer)                                             {}
func (Service) ReqChatDiagnostics(ReqChatDiagnostics)                                 {}
func (Service) RequestAdvanceChannelInstance(RequestAdvanceChannelInstance)           {}
func (Service) RequestChatCode(RequestChatCode)                                       {}
func (Service) RequestCreateChannel(RequestCreateChannel)                             {}
func (Service) RequestDirectedChat(RequestDirectedChat)                               {}
func (Service) RequestDirectedChatByName(RequestDirectedChatByName)                   {}
func (Service) RequestDirectedQuickChat(RequestDirectedQuickChat)                     {}
func (Service) RequestDirectedQuickChatExt(RequestDirectedQuickChatExt)               {}
func (Service) RequestJoinChannel(RequestJoinChannel)                                 {}
func (Service) RequestJoinChannelByName(RequestJoinChannelByName)                     {}
func (Service) RequestLeaveChannel(RequestLeaveChannel)                               {}
func (Service) RequestLeaveChannelByName(RequestLeaveChannelByName)                   {}
func (Service) RequestMaxFriends(RequestMaxFriends)                                   {}
func (Service) RequestRadialChat(RequestRadialChat)                                   {}
func (Service) RequestRadialFriendChat(RequestRadialFriendChat)                       {}
func (Service) RequestRadialFriendQuickChat(RequestRadialFriendQuickChat)             {}
func (Service) RequestRadialOwnerChat(RequestRadialOwnerChat)                         {}
func (Service) RequestRadialQuickChat(RequestRadialQuickChat)                         {}
func (Service) RequestRadialQuickChatExt(RequestRadialQuickChatExt)                   {}
func (Service) RequestSession(RequestSession)                                         {}
func (Service) RequestZoneClusterQuickChat(RequestZoneClusterQuickChat)               {}
func (Service) RequestGifts(RequestGifts)                                             {}
func (Service) RequestPromotions(RequestPromotions)                                   {}
func (Service) RestoreCharRsp(RestoreCharRsp)                                         {}
func (Service) RetrieveMail(RetrieveMail)                                             {}
func (Service) RetryTeleport(RetryTeleport)                                           {}
func (Service) Script(Script)                                                         {}
func (Service) SelectBadge(SelectBadge)                                               {}
func (Service) SendChatCode(SendChatCode)                                             {}
func (Service) SendInteractOptions(SendInteractOptions)                               {}
func (Service) SendText(SendText)                                                     {}
func (Service) ServerMove(ServerMove)                                                 {}
func (Service) ServerShutdown(ServerShutdown)                                         {}
func (Service) ServerTeleport(ServerTeleport)                                         {}
func (Service) ServerTransfer(ServerTransfer)                                         {}
func (Service) ServerTutorialCommand(ServerTutorialCommand)                           {}
func (Service) ServerError(ServerError)                                               {}
func (Service) SERVERPROCESSRUNNING(SERVERPROCESSRUNNING)                             {}
func (Service) SESSION(SESSION)                                                       {}
func (Service) SESSIONERROR(SESSIONERROR)                                             {}
func (Service) SESSIONPLAYER(SESSIONPLAYER)                                           {}
func (Service) SETHOUSECUSTOMIZATION(SETHOUSECUSTOMIZATION)                           {}
func (Service) SplitQuantity(SplitQuantity)                                           {}
func (Service) StartStagedCinematic(StartStagedCinematic)                             {}
func (Service) STARTCLIENTPROCESS(STARTCLIENTPROCESS)                                 {}
func (Service) STARTSERVERPROCESS(STARTSERVERPROCESS)                                 {}
func (Service) SuboptimalBracketResponse(SuboptimalBracketResponse)                   {}
func (Service) TeleportToGameZone(TeleportToGameZone)                                 {}
func (Service) TournamentUpdate(TournamentUpdate)                                     {}
func (Service) TransferCharRsp(TransferCharRsp)                                       {}
func (Service) TransferInstance(TransferInstance)                                     {}
func (Service) TransferRealms(TransferRealms)                                         {}
func (Service) TrashInventoryItem(TrashInventoryItem)                                 {}
func (Service) Tutorials(Tutorials)                                                   {}
func (Service) UpdateObject(UpdateObject)                                             {}
func (Service) UpdateQuantity(UpdateQuantity)                                         {}
func (Service) UpdateZoneCounter(UpdateZoneCounter)                                   {}
func (Service) UpdateZoneTimer(UpdateZoneTimer)                                       {}
func (Service) UseChatCode(UseChatCode)                                               {}
func (Service) CSRViewAccount(CSRViewAccount)                                         {}
func (Service) WizBang(WizBang)                                                       {}
func (Service) ZombiePlayer(ZombiePlayer)                                             {}
func (Service) ZONEEVENTTIMEREXPIRED(ZONEEVENTTIMEREXPIRED)                           {}
func (Service) ZoneTransfer(ZoneTransfer)                                             {}
func (Service) ZoneTransferAck(ZoneTransferAck)                                       {}
func (Service) ZoneTransferNack(ZoneTransferNack)                                     {}
func (Service) ZoneTransferRequest(ZoneTransferRequest)                               {}

func RegisterService(r *proto.MessageRouter, s service) {
	proto.RegisterMessageHandler(r, 5, 1, s.ADCLICKTHROUGH)
	proto.RegisterMessageHandler(r, 5, 2, s.AddEffect)
	proto.RegisterMessageHandler(r, 5, 3, s.AddItemRequest)
	proto.RegisterMessageHandler(r, 5, 4, s.AddObject)
	proto.RegisterMessageHandler(r, 5, 5, s.AddParticle)
	proto.RegisterMessageHandler(r, 5, 6, s.AddZoneTimer)
	proto.RegisterMessageHandler(r, 5, 7, s.Attach)
	proto.RegisterMessageHandler(r, 5, 8, s.AttachFailed)
	proto.RegisterMessageHandler(r, 5, 9, s.AuctionHouseUpdate)
	proto.RegisterMessageHandler(r, 5, 10, s.Badges)
	proto.RegisterMessageHandler(r, 5, 11, s.BanRsp)
	proto.RegisterMessageHandler(r, 5, 12, s.BestFriend)
	proto.RegisterMessageHandler(r, 5, 13, s.Blackball)
	proto.RegisterMessageHandler(r, 5, 14, s.BuddyDrop)
	proto.RegisterMessageHandler(r, 5, 15, s.BuddyEntry)
	proto.RegisterMessageHandler(r, 5, 16, s.BuddyListComplete)
	proto.RegisterMessageHandler(r, 5, 17, s.BuddyRequestAccept)
	proto.RegisterMessageHandler(r, 5, 18, s.BuddyRequestAcceptFwd)
	proto.RegisterMessageHandler(r, 5, 19, s.BuddyRequestAdd)
	proto.RegisterMessageHandler(r, 5, 20, s.BuddyRequestAddFwd)
	proto.RegisterMessageHandler(r, 5, 21, s.BuddyRequestDeny)
	proto.RegisterMessageHandler(r, 5, 22, s.BuddyRequestDenyFwd)
	proto.RegisterMessageHandler(r, 5, 23, s.BuddyRequestDrop)
	proto.RegisterMessageHandler(r, 5, 24, s.BuddyRequestError)
	proto.RegisterMessageHandler(r, 5, 25, s.BuddyRequestList)
	proto.RegisterMessageHandler(r, 5, 26, s.BuddyStats)
	proto.RegisterMessageHandler(r, 5, 27, s.BuddyStatusUpdate)
	proto.RegisterMessageHandler(r, 5, 28, s.BugReport)
	proto.RegisterMessageHandler(r, 5, 29, s.BugSubmitResponse)
	proto.RegisterMessageHandler(r, 5, 30, s.ChannelChat)
	proto.RegisterMessageHandler(r, 5, 31, s.ChannelSubscription)
	proto.RegisterMessageHandler(r, 5, 32, s.ChatDiagnostics)
	proto.RegisterMessageHandler(r, 5, 33, s.ChatError)
	proto.RegisterMessageHandler(r, 5, 34, s.CheckSubscription)
	proto.RegisterMessageHandler(r, 5, 35, s.CheckMail)
	proto.RegisterMessageHandler(r, 5, 36, s.ClientMove)
	proto.RegisterMessageHandler(r, 5, 37, s.ClientMoveState)
	proto.RegisterMessageHandler(r, 5, 38, s.ClientNotifyText)
	proto.RegisterMessageHandler(r, 5, 39, s.ClientTutorialEvent)
	proto.RegisterMessageHandler(r, 5, 40, s.ClientDisconnect)
	proto.RegisterMessageHandler(r, 5, 41, s.ClientError)
	proto.RegisterMessageHandler(r, 5, 42, s.CLIENTPROCESSTERMINATED)
	proto.RegisterMessageHandler(r, 5, 43, s.CombineInventoryItems)
	proto.RegisterMessageHandler(r, 5, 44, s.Command)
	proto.RegisterMessageHandler(r, 5, 45, s.CommandResult)
	proto.RegisterMessageHandler(r, 5, 46, s.CompanionEffects)
	proto.RegisterMessageHandler(r, 5, 47, s.CoreEmote)
	proto.RegisterMessageHandler(r, 5, 48, s.CreateChannelResponse)
	proto.RegisterMessageHandler(r, 5, 49, s.CREATESESSION)
	proto.RegisterMessageHandler(r, 5, 50, s.CSRBankItems)
	proto.RegisterMessageHandler(r, 5, 51, s.CSRBankItemsDone)
	proto.RegisterMessageHandler(r, 5, 52, s.CSREditCharacter)
	proto.RegisterMessageHandler(r, 5, 53, s.CSREditCharacterFailed)
	proto.RegisterMessageHandler(r, 5, 54, s.CSRFinishedHouse)
	proto.RegisterMessageHandler(r, 5, 55, s.CSRSearchList)
	proto.RegisterMessageHandler(r, 5, 56, s.CSRMailData)
	proto.RegisterMessageHandler(r, 5, 57, s.CSRReceiveGifts)
	proto.RegisterMessageHandler(r, 5, 58, s.DEBUGDELETEALLOBJECTS)
	proto.RegisterMessageHandler(r, 5, 59, s.DeleteObject)
	proto.RegisterMessageHandler(r, 5, 60, s.DeleteGift)
	proto.RegisterMessageHandler(r, 5, 61, s.DirectedChat)
	proto.RegisterMessageHandler(r, 5, 62, s.DirectedChatByNameResponse)
	proto.RegisterMessageHandler(r, 5, 63, s.DirectedChatFail)
	proto.RegisterMessageHandler(r, 5, 64, s.DirectedQuickChat)
	proto.RegisterMessageHandler(r, 5, 65, s.DirectedQuickChatExt)
	proto.RegisterMessageHandler(r, 5, 66, s.DisconnectAfk)
	proto.RegisterMessageHandler(r, 5, 67, s.DownloadBrowser)
	proto.RegisterMessageHandler(r, 5, 68, s.DownloadPackage)
	proto.RegisterMessageHandler(r, 5, 69, s.DownloadPackageElement)
	proto.RegisterMessageHandler(r, 5, 70, s.DynaModBehaviorUpdateMods)
	proto.RegisterMessageHandler(r, 5, 71, s.DynaModDump)
	proto.RegisterMessageHandler(r, 5, 72, s.EnterState)
	proto.RegisterMessageHandler(r, 5, 73, s.EquipItem)
	proto.RegisterMessageHandler(r, 5, 74, s.EquipmentBehaviorEquipItem)
	proto.RegisterMessageHandler(r, 5, 75, s.EquipmentBehaviorPublicEquipItem)
	proto.RegisterMessageHandler(r, 5, 76, s.EquipmentBehaviorPublicUnequipItem)
	proto.RegisterMessageHandler(r, 5, 77, s.EquipmentBehaviorUnequipItem)
	proto.RegisterMessageHandler(r, 5, 78, s.FeedInventoryItem)
	proto.RegisterMessageHandler(r, 5, 79, s.FINDSESSIONS)
	proto.RegisterMessageHandler(r, 5, 80, s.FINDSESSIONPLAYERS)
	proto.RegisterMessageHandler(r, 5, 81, s.GenericGame)
	proto.RegisterMessageHandler(r, 5, 82, s.GetLadder)
	proto.RegisterMessageHandler(r, 5, 83, s.GETRANKINGS)
	proto.RegisterMessageHandler(r, 5, 84, s.GiftRedeemed)
	proto.RegisterMessageHandler(r, 5, 85, s.GotoPlayer)
	proto.RegisterMessageHandler(r, 5, 86, s.GotoPlayerResponse)
	proto.RegisterMessageHandler(r, 5, 87, s.HarassmentReport)
	proto.RegisterMessageHandler(r, 5, 88, s.IgnoreAdd)
	proto.RegisterMessageHandler(r, 5, 89, s.IgnoreDrop)
	proto.RegisterMessageHandler(r, 5, 90, s.IgnoreList)
	proto.RegisterMessageHandler(r, 5, 91, s.InteractObject)
	proto.RegisterMessageHandler(r, 5, 92, s.InteractOption)
	proto.RegisterMessageHandler(r, 5, 93, s.INVENTORYBEHAVIORADDITEM)
	proto.RegisterMessageHandler(r, 5, 94, s.INVENTORYBEHAVIORREMOVEITEM)
	proto.RegisterMessageHandler(r, 5, 95, s.INVENTORYBEHAVIORTRADEITEM)
	proto.RegisterMessageHandler(r, 5, 96, s.InviteFriend)
	proto.RegisterMessageHandler(r, 5, 97, s.InviteResponse)
	proto.RegisterMessageHandler(r, 5, 98, s.JoinChannelResponse)
	proto.RegisterMessageHandler(r, 5, 99, s.JOINSESSION)
	proto.RegisterMessageHandler(r, 5, 100, s.Jump)
	proto.RegisterMessageHandler(r, 5, 101, s.KILLCLIENTPROCESS)
	proto.RegisterMessageHandler(r, 5, 102, s.LADDER)
	proto.RegisterMessageHandler(r, 5, 103, s.LeaveChannelResponse)
	proto.RegisterMessageHandler(r, 5, 104, s.LeaveHousingLot)
	proto.RegisterMessageHandler(r, 5, 105, s.LeaveServiceRange)
	proto.RegisterMessageHandler(r, 5, 106, s.LeaveState)
	proto.RegisterMessageHandler(r, 5, 107, s.LOADSAVEOBJECTS)
	proto.RegisterMessageHandler(r, 5, 108, s.LoginComplete)
	proto.RegisterMessageHandler(r, 5, 109, s.MailData)
	proto.RegisterMessageHandler(r, 5, 110, s.MarkLocation)
	proto.RegisterMessageHandler(r, 5, 111, s.MarkLocationResponse)
	proto.RegisterMessageHandler(r, 5, 112, s.MatchAward)
	proto.RegisterMessageHandler(r, 5, 113, s.MatchInvite)
	proto.RegisterMessageHandler(r, 5, 114, s.MatchMakerUpdate)
	proto.RegisterMessageHandler(r, 5, 115, s.MatchReady)
	proto.RegisterMessageHandler(r, 5, 116, s.MatchResult)
	proto.RegisterMessageHandler(r, 5, 117, s.MESSAGEPROCESS)
	proto.RegisterMessageHandler(r, 5, 118, s.MoveCorrection)
	proto.RegisterMessageHandler(r, 5, 119, s.MoveState)
	proto.RegisterMessageHandler(r, 5, 120, s.Mute)
	proto.RegisterMessageHandler(r, 5, 121, s.MuteRsp)
	proto.RegisterMessageHandler(r, 5, 122, s.NewObject)
	proto.RegisterMessageHandler(r, 5, 123, s.NewSysStats)
	proto.RegisterMessageHandler(r, 5, 124, s.NewTickCnt)
	proto.RegisterMessageHandler(r, 5, 125, s.NewTourneyRewards)
	proto.RegisterMessageHandler(r, 5, 126, s.NewMail)
	proto.RegisterMessageHandler(r, 5, 127, s.NotifyChannelInstance)
	proto.RegisterMessageHandler(r, 5, 128, s.NotifyGift)
	proto.RegisterMessageHandler(r, 5, 129, s.NotMuted)
	proto.RegisterMessageHandler(r, 5, 130, s.NotAfk)
	proto.RegisterMessageHandler(r, 5, 131, s.NPCSpeech)
	proto.RegisterMessageHandler(r, 5, 132, s.ObjectInfoQuery)
	proto.RegisterMessageHandler(r, 5, 133, s.PartyDisband)
	proto.RegisterMessageHandler(r, 5, 134, s.PartyJoinFailed)
	proto.RegisterMessageHandler(r, 5, 135, s.PartyJoinNotification)
	proto.RegisterMessageHandler(r, 5, 136, s.PartyLeave)
	proto.RegisterMessageHandler(r, 5, 137, s.PartyLeaveNotification)
	proto.RegisterMessageHandler(r, 5, 138, s.PartyLevelUp)
	proto.RegisterMessageHandler(r, 5, 139, s.PartyLevelUpUpdate)
	proto.RegisterMessageHandler(r, 5, 140, s.PartyMultiPlayerMountEquip)
	proto.RegisterMessageHandler(r, 5, 141, s.PartyMultiPlayerMountEquipUpdate)
	proto.RegisterMessageHandler(r, 5, 142, s.PartyMultiPlayerMountJoin)
	proto.RegisterMessageHandler(r, 5, 143, s.PartyMultiPlayerMountJoinUpdate)
	proto.RegisterMessageHandler(r, 5, 144, s.PartyRequestAccept)
	proto.RegisterMessageHandler(r, 5, 145, s.PartyRequestDecline)
	proto.RegisterMessageHandler(r, 5, 146, s.PartyRequestInvite)
	proto.RegisterMessageHandler(r, 5, 147, s.PartyRequestJoin)
	proto.RegisterMessageHandler(r, 5, 148, s.PartyRequestMemberZones)
	proto.RegisterMessageHandler(r, 5, 149, s.PartyRequestResponse)
	proto.RegisterMessageHandler(r, 5, 150, s.PartyRequestTimeout)
	proto.RegisterMessageHandler(r, 5, 151, s.PartySubmitMemberZones)
	proto.RegisterMessageHandler(r, 5, 152, s.PartyUpdate)
	proto.RegisterMessageHandler(r, 5, 153, s.PartyZoneRequest)
	proto.RegisterMessageHandler(r, 5, 154, s.PartyZoneRequestResponse)
	proto.RegisterMessageHandler(r, 5, 155, s.PickUpObject)
	proto.RegisterMessageHandler(r, 5, 156, s.PlaceObject)
	proto.RegisterMessageHandler(r, 5, 157, s.PlayCinematic)
	proto.RegisterMessageHandler(r, 5, 158, s.PlayerBlackballedAlert)
	proto.RegisterMessageHandler(r, 5, 159, s.PlayerReadyAck)
	proto.RegisterMessageHandler(r, 5, 160, s.PlaySound)
	proto.RegisterMessageHandler(r, 5, 161, s.PostZoneEventFromClient)
	proto.RegisterMessageHandler(r, 5, 162, s.PreviewIsland)
	proto.RegisterMessageHandler(r, 5, 163, s.PvPUpdateInfo)
	proto.RegisterMessageHandler(r, 5, 164, s.QueryLogout)
	proto.RegisterMessageHandler(r, 5, 165, s.RadialChat)
	proto.RegisterMessageHandler(r, 5, 166, s.RadialQuickChat)
	proto.RegisterMessageHandler(r, 5, 167, s.RadialQuickChatExt)
	proto.RegisterMessageHandler(r, 5, 168, s.RadialZoneClusterQuickChat)
	proto.RegisterMessageHandler(r, 5, 169, s.RANKING)
	proto.RegisterMessageHandler(r, 5, 170, s.RealmInfoQuery)
	proto.RegisterMessageHandler(r, 5, 171, s.RecallLocation)
	proto.RegisterMessageHandler(r, 5, 172, s.ReceiveGifts)
	proto.RegisterMessageHandler(r, 5, 173, s.ReceivePromotions)
	proto.RegisterMessageHandler(r, 5, 174, s.RedeemGift)
	proto.RegisterMessageHandler(r, 5, 175, s.RedeemMailGift)
	proto.RegisterMessageHandler(r, 5, 176, s.RedeemMailGiftResponse)
	proto.RegisterMessageHandler(r, 5, 177, s.ReleaseDelay)
	proto.RegisterMessageHandler(r, 5, 178, s.ReloadTemplateDir)
	proto.RegisterMessageHandler(r, 5, 179, s.RemovedShopper)
	proto.RegisterMessageHandler(r, 5, 180, s.RemoveEffect)
	proto.RegisterMessageHandler(r, 5, 181, s.RemoveItemRequest)
	proto.RegisterMessageHandler(r, 5, 182, s.RemoveObject)
	proto.RegisterMessageHandler(r, 5, 183, s.RemoveParticle)
	proto.RegisterMessageHandler(r, 5, 184, s.RemoveZoneTimer)
	proto.RegisterMessageHandler(r, 5, 185, s.ReportAdTakeover)
	proto.RegisterMessageHandler(r, 5, 186, s.ReqAskServer)
	proto.RegisterMessageHandler(r, 5, 187, s.ReqChatDiagnostics)
	proto.RegisterMessageHandler(r, 5, 188, s.RequestAdvanceChannelInstance)
	proto.RegisterMessageHandler(r, 5, 189, s.RequestChatCode)
	proto.RegisterMessageHandler(r, 5, 190, s.RequestCreateChannel)
	proto.RegisterMessageHandler(r, 5, 191, s.RequestDirectedChat)
	proto.RegisterMessageHandler(r, 5, 192, s.RequestDirectedChatByName)
	proto.RegisterMessageHandler(r, 5, 193, s.RequestDirectedQuickChat)
	proto.RegisterMessageHandler(r, 5, 194, s.RequestDirectedQuickChatExt)
	proto.RegisterMessageHandler(r, 5, 195, s.RequestJoinChannel)
	proto.RegisterMessageHandler(r, 5, 196, s.RequestJoinChannelByName)
	proto.RegisterMessageHandler(r, 5, 197, s.RequestLeaveChannel)
	proto.RegisterMessageHandler(r, 5, 198, s.RequestLeaveChannelByName)
	proto.RegisterMessageHandler(r, 5, 199, s.RequestMaxFriends)
	proto.RegisterMessageHandler(r, 5, 200, s.RequestRadialChat)
	proto.RegisterMessageHandler(r, 5, 201, s.RequestRadialFriendChat)
	proto.RegisterMessageHandler(r, 5, 202, s.RequestRadialFriendQuickChat)
	proto.RegisterMessageHandler(r, 5, 203, s.RequestRadialOwnerChat)
	proto.RegisterMessageHandler(r, 5, 204, s.RequestRadialQuickChat)
	proto.RegisterMessageHandler(r, 5, 205, s.RequestRadialQuickChatExt)
	proto.RegisterMessageHandler(r, 5, 206, s.RequestSession)
	proto.RegisterMessageHandler(r, 5, 207, s.RequestZoneClusterQuickChat)
	proto.RegisterMessageHandler(r, 5, 208, s.RequestGifts)
	proto.RegisterMessageHandler(r, 5, 209, s.RequestPromotions)
	proto.RegisterMessageHandler(r, 5, 210, s.RestoreCharRsp)
	proto.RegisterMessageHandler(r, 5, 211, s.RetrieveMail)
	proto.RegisterMessageHandler(r, 5, 212, s.RetryTeleport)
	proto.RegisterMessageHandler(r, 5, 213, s.Script)
	proto.RegisterMessageHandler(r, 5, 214, s.SelectBadge)
	proto.RegisterMessageHandler(r, 5, 215, s.SendChatCode)
	proto.RegisterMessageHandler(r, 5, 216, s.SendInteractOptions)
	proto.RegisterMessageHandler(r, 5, 217, s.SendText)
	proto.RegisterMessageHandler(r, 5, 218, s.ServerMove)
	proto.RegisterMessageHandler(r, 5, 219, s.ServerShutdown)
	proto.RegisterMessageHandler(r, 5, 220, s.ServerTeleport)
	proto.RegisterMessageHandler(r, 5, 221, s.ServerTransfer)
	proto.RegisterMessageHandler(r, 5, 222, s.ServerTutorialCommand)
	proto.RegisterMessageHandler(r, 5, 223, s.ServerError)
	proto.RegisterMessageHandler(r, 5, 224, s.SERVERPROCESSRUNNING)
	proto.RegisterMessageHandler(r, 5, 225, s.SESSION)
	proto.RegisterMessageHandler(r, 5, 226, s.SESSIONERROR)
	proto.RegisterMessageHandler(r, 5, 227, s.SESSIONPLAYER)
	proto.RegisterMessageHandler(r, 5, 228, s.SETHOUSECUSTOMIZATION)
	proto.RegisterMessageHandler(r, 5, 229, s.SplitQuantity)
	proto.RegisterMessageHandler(r, 5, 230, s.StartStagedCinematic)
	proto.RegisterMessageHandler(r, 5, 231, s.STARTCLIENTPROCESS)
	proto.RegisterMessageHandler(r, 5, 232, s.STARTSERVERPROCESS)
	proto.RegisterMessageHandler(r, 5, 233, s.SuboptimalBracketResponse)
	proto.RegisterMessageHandler(r, 5, 234, s.TeleportToGameZone)
	proto.RegisterMessageHandler(r, 5, 235, s.TournamentUpdate)
	proto.RegisterMessageHandler(r, 5, 236, s.TransferCharRsp)
	proto.RegisterMessageHandler(r, 5, 237, s.TransferInstance)
	proto.RegisterMessageHandler(r, 5, 238, s.TransferRealms)
	proto.RegisterMessageHandler(r, 5, 239, s.TrashInventoryItem)
	proto.RegisterMessageHandler(r, 5, 240, s.Tutorials)
	proto.RegisterMessageHandler(r, 5, 241, s.UpdateObject)
	proto.RegisterMessageHandler(r, 5, 242, s.UpdateQuantity)
	proto.RegisterMessageHandler(r, 5, 243, s.UpdateZoneCounter)
	proto.RegisterMessageHandler(r, 5, 244, s.UpdateZoneTimer)
	proto.RegisterMessageHandler(r, 5, 245, s.UseChatCode)
	proto.RegisterMessageHandler(r, 5, 246, s.CSRViewAccount)
	proto.RegisterMessageHandler(r, 5, 247, s.WizBang)
	proto.RegisterMessageHandler(r, 5, 248, s.ZombiePlayer)
	proto.RegisterMessageHandler(r, 5, 249, s.ZONEEVENTTIMEREXPIRED)
	proto.RegisterMessageHandler(r, 5, 250, s.ZoneTransfer)
	proto.RegisterMessageHandler(r, 5, 251, s.ZoneTransferAck)
	proto.RegisterMessageHandler(r, 5, 252, s.ZoneTransferNack)
	proto.RegisterMessageHandler(r, 5, 253, s.ZoneTransferRequest)
}

func NewClient(c *proto.Client) Client {
	return Client{c}
}

func (c Client) ADCLICKTHROUGH(m *ADCLICKTHROUGH) error {
	return c.c.WriteMessage(5, 1, m)
}

func (c Client) AddEffect(m *AddEffect) error {
	return c.c.WriteMessage(5, 2, m)
}

func (c Client) AddItemRequest(m *AddItemRequest) error {
	return c.c.WriteMessage(5, 3, m)
}

func (c Client) AddObject(m *AddObject) error {
	return c.c.WriteMessage(5, 4, m)
}

func (c Client) AddParticle(m *AddParticle) error {
	return c.c.WriteMessage(5, 5, m)
}

func (c Client) AddZoneTimer(m *AddZoneTimer) error {
	return c.c.WriteMessage(5, 6, m)
}

func (c Client) Attach(m *Attach) error {
	return c.c.WriteMessage(5, 7, m)
}

func (c Client) AttachFailed(m *AttachFailed) error {
	return c.c.WriteMessage(5, 8, m)
}

func (c Client) AuctionHouseUpdate(m *AuctionHouseUpdate) error {
	return c.c.WriteMessage(5, 9, m)
}

func (c Client) Badges(m *Badges) error {
	return c.c.WriteMessage(5, 10, m)
}

func (c Client) BanRsp(m *BanRsp) error {
	return c.c.WriteMessage(5, 11, m)
}

func (c Client) BestFriend(m *BestFriend) error {
	return c.c.WriteMessage(5, 12, m)
}

func (c Client) Blackball(m *Blackball) error {
	return c.c.WriteMessage(5, 13, m)
}

func (c Client) BuddyDrop(m *BuddyDrop) error {
	return c.c.WriteMessage(5, 14, m)
}

func (c Client) BuddyEntry(m *BuddyEntry) error {
	return c.c.WriteMessage(5, 15, m)
}

func (c Client) BuddyListComplete(m *BuddyListComplete) error {
	return c.c.WriteMessage(5, 16, m)
}

func (c Client) BuddyRequestAccept(m *BuddyRequestAccept) error {
	return c.c.WriteMessage(5, 17, m)
}

func (c Client) BuddyRequestAcceptFwd(m *BuddyRequestAcceptFwd) error {
	return c.c.WriteMessage(5, 18, m)
}

func (c Client) BuddyRequestAdd(m *BuddyRequestAdd) error {
	return c.c.WriteMessage(5, 19, m)
}

func (c Client) BuddyRequestAddFwd(m *BuddyRequestAddFwd) error {
	return c.c.WriteMessage(5, 20, m)
}

func (c Client) BuddyRequestDeny(m *BuddyRequestDeny) error {
	return c.c.WriteMessage(5, 21, m)
}

func (c Client) BuddyRequestDenyFwd(m *BuddyRequestDenyFwd) error {
	return c.c.WriteMessage(5, 22, m)
}

func (c Client) BuddyRequestDrop(m *BuddyRequestDrop) error {
	return c.c.WriteMessage(5, 23, m)
}

func (c Client) BuddyRequestError(m *BuddyRequestError) error {
	return c.c.WriteMessage(5, 24, m)
}

func (c Client) BuddyRequestList(m *BuddyRequestList) error {
	return c.c.WriteMessage(5, 25, m)
}

func (c Client) BuddyStats(m *BuddyStats) error {
	return c.c.WriteMessage(5, 26, m)
}

func (c Client) BuddyStatusUpdate(m *BuddyStatusUpdate) error {
	return c.c.WriteMessage(5, 27, m)
}

func (c Client) BugReport(m *BugReport) error {
	return c.c.WriteMessage(5, 28, m)
}

func (c Client) BugSubmitResponse(m *BugSubmitResponse) error {
	return c.c.WriteMessage(5, 29, m)
}

func (c Client) ChannelChat(m *ChannelChat) error {
	return c.c.WriteMessage(5, 30, m)
}

func (c Client) ChannelSubscription(m *ChannelSubscription) error {
	return c.c.WriteMessage(5, 31, m)
}

func (c Client) ChatDiagnostics(m *ChatDiagnostics) error {
	return c.c.WriteMessage(5, 32, m)
}

func (c Client) ChatError(m *ChatError) error {
	return c.c.WriteMessage(5, 33, m)
}

func (c Client) CheckSubscription(m *CheckSubscription) error {
	return c.c.WriteMessage(5, 34, m)
}

func (c Client) CheckMail(m *CheckMail) error {
	return c.c.WriteMessage(5, 35, m)
}

func (c Client) ClientMove(m *ClientMove) error {
	return c.c.WriteMessage(5, 36, m)
}

func (c Client) ClientMoveState(m *ClientMoveState) error {
	return c.c.WriteMessage(5, 37, m)
}

func (c Client) ClientNotifyText(m *ClientNotifyText) error {
	return c.c.WriteMessage(5, 38, m)
}

func (c Client) ClientTutorialEvent(m *ClientTutorialEvent) error {
	return c.c.WriteMessage(5, 39, m)
}

func (c Client) ClientDisconnect(m *ClientDisconnect) error {
	return c.c.WriteMessage(5, 40, m)
}

func (c Client) ClientError(m *ClientError) error {
	return c.c.WriteMessage(5, 41, m)
}

func (c Client) CLIENTPROCESSTERMINATED(m *CLIENTPROCESSTERMINATED) error {
	return c.c.WriteMessage(5, 42, m)
}

func (c Client) CombineInventoryItems(m *CombineInventoryItems) error {
	return c.c.WriteMessage(5, 43, m)
}

func (c Client) Command(m *Command) error {
	return c.c.WriteMessage(5, 44, m)
}

func (c Client) CommandResult(m *CommandResult) error {
	return c.c.WriteMessage(5, 45, m)
}

func (c Client) CompanionEffects(m *CompanionEffects) error {
	return c.c.WriteMessage(5, 46, m)
}

func (c Client) CoreEmote(m *CoreEmote) error {
	return c.c.WriteMessage(5, 47, m)
}

func (c Client) CreateChannelResponse(m *CreateChannelResponse) error {
	return c.c.WriteMessage(5, 48, m)
}

func (c Client) CREATESESSION(m *CREATESESSION) error {
	return c.c.WriteMessage(5, 49, m)
}

func (c Client) CSRBankItems(m *CSRBankItems) error {
	return c.c.WriteMessage(5, 50, m)
}

func (c Client) CSRBankItemsDone(m *CSRBankItemsDone) error {
	return c.c.WriteMessage(5, 51, m)
}

func (c Client) CSREditCharacter(m *CSREditCharacter) error {
	return c.c.WriteMessage(5, 52, m)
}

func (c Client) CSREditCharacterFailed(m *CSREditCharacterFailed) error {
	return c.c.WriteMessage(5, 53, m)
}

func (c Client) CSRFinishedHouse(m *CSRFinishedHouse) error {
	return c.c.WriteMessage(5, 54, m)
}

func (c Client) CSRSearchList(m *CSRSearchList) error {
	return c.c.WriteMessage(5, 55, m)
}

func (c Client) CSRMailData(m *CSRMailData) error {
	return c.c.WriteMessage(5, 56, m)
}

func (c Client) CSRReceiveGifts(m *CSRReceiveGifts) error {
	return c.c.WriteMessage(5, 57, m)
}

func (c Client) DEBUGDELETEALLOBJECTS(m *DEBUGDELETEALLOBJECTS) error {
	return c.c.WriteMessage(5, 58, m)
}

func (c Client) DeleteObject(m *DeleteObject) error {
	return c.c.WriteMessage(5, 59, m)
}

func (c Client) DeleteGift(m *DeleteGift) error {
	return c.c.WriteMessage(5, 60, m)
}

func (c Client) DirectedChat(m *DirectedChat) error {
	return c.c.WriteMessage(5, 61, m)
}

func (c Client) DirectedChatByNameResponse(m *DirectedChatByNameResponse) error {
	return c.c.WriteMessage(5, 62, m)
}

func (c Client) DirectedChatFail(m *DirectedChatFail) error {
	return c.c.WriteMessage(5, 63, m)
}

func (c Client) DirectedQuickChat(m *DirectedQuickChat) error {
	return c.c.WriteMessage(5, 64, m)
}

func (c Client) DirectedQuickChatExt(m *DirectedQuickChatExt) error {
	return c.c.WriteMessage(5, 65, m)
}

func (c Client) DisconnectAfk(m *DisconnectAfk) error {
	return c.c.WriteMessage(5, 66, m)
}

func (c Client) DownloadBrowser(m *DownloadBrowser) error {
	return c.c.WriteMessage(5, 67, m)
}

func (c Client) DownloadPackage(m *DownloadPackage) error {
	return c.c.WriteMessage(5, 68, m)
}

func (c Client) DownloadPackageElement(m *DownloadPackageElement) error {
	return c.c.WriteMessage(5, 69, m)
}

func (c Client) DynaModBehaviorUpdateMods(m *DynaModBehaviorUpdateMods) error {
	return c.c.WriteMessage(5, 70, m)
}

func (c Client) DynaModDump(m *DynaModDump) error {
	return c.c.WriteMessage(5, 71, m)
}

func (c Client) EnterState(m *EnterState) error {
	return c.c.WriteMessage(5, 72, m)
}

func (c Client) EquipItem(m *EquipItem) error {
	return c.c.WriteMessage(5, 73, m)
}

func (c Client) EquipmentBehaviorEquipItem(m *EquipmentBehaviorEquipItem) error {
	return c.c.WriteMessage(5, 74, m)
}

func (c Client) EquipmentBehaviorPublicEquipItem(m *EquipmentBehaviorPublicEquipItem) error {
	return c.c.WriteMessage(5, 75, m)
}

func (c Client) EquipmentBehaviorPublicUnequipItem(m *EquipmentBehaviorPublicUnequipItem) error {
	return c.c.WriteMessage(5, 76, m)
}

func (c Client) EquipmentBehaviorUnequipItem(m *EquipmentBehaviorUnequipItem) error {
	return c.c.WriteMessage(5, 77, m)
}

func (c Client) FeedInventoryItem(m *FeedInventoryItem) error {
	return c.c.WriteMessage(5, 78, m)
}

func (c Client) FINDSESSIONS(m *FINDSESSIONS) error {
	return c.c.WriteMessage(5, 79, m)
}

func (c Client) FINDSESSIONPLAYERS(m *FINDSESSIONPLAYERS) error {
	return c.c.WriteMessage(5, 80, m)
}

func (c Client) GenericGame(m *GenericGame) error {
	return c.c.WriteMessage(5, 81, m)
}

func (c Client) GetLadder(m *GetLadder) error {
	return c.c.WriteMessage(5, 82, m)
}

func (c Client) GETRANKINGS(m *GETRANKINGS) error {
	return c.c.WriteMessage(5, 83, m)
}

func (c Client) GiftRedeemed(m *GiftRedeemed) error {
	return c.c.WriteMessage(5, 84, m)
}

func (c Client) GotoPlayer(m *GotoPlayer) error {
	return c.c.WriteMessage(5, 85, m)
}

func (c Client) GotoPlayerResponse(m *GotoPlayerResponse) error {
	return c.c.WriteMessage(5, 86, m)
}

func (c Client) HarassmentReport(m *HarassmentReport) error {
	return c.c.WriteMessage(5, 87, m)
}

func (c Client) IgnoreAdd(m *IgnoreAdd) error {
	return c.c.WriteMessage(5, 88, m)
}

func (c Client) IgnoreDrop(m *IgnoreDrop) error {
	return c.c.WriteMessage(5, 89, m)
}

func (c Client) IgnoreList(m *IgnoreList) error {
	return c.c.WriteMessage(5, 90, m)
}

func (c Client) InteractObject(m *InteractObject) error {
	return c.c.WriteMessage(5, 91, m)
}

func (c Client) InteractOption(m *InteractOption) error {
	return c.c.WriteMessage(5, 92, m)
}

func (c Client) INVENTORYBEHAVIORADDITEM(m *INVENTORYBEHAVIORADDITEM) error {
	return c.c.WriteMessage(5, 93, m)
}

func (c Client) INVENTORYBEHAVIORREMOVEITEM(m *INVENTORYBEHAVIORREMOVEITEM) error {
	return c.c.WriteMessage(5, 94, m)
}

func (c Client) INVENTORYBEHAVIORTRADEITEM(m *INVENTORYBEHAVIORTRADEITEM) error {
	return c.c.WriteMessage(5, 95, m)
}

func (c Client) InviteFriend(m *InviteFriend) error {
	return c.c.WriteMessage(5, 96, m)
}

func (c Client) InviteResponse(m *InviteResponse) error {
	return c.c.WriteMessage(5, 97, m)
}

func (c Client) JoinChannelResponse(m *JoinChannelResponse) error {
	return c.c.WriteMessage(5, 98, m)
}

func (c Client) JOINSESSION(m *JOINSESSION) error {
	return c.c.WriteMessage(5, 99, m)
}

func (c Client) Jump(m *Jump) error {
	return c.c.WriteMessage(5, 100, m)
}

func (c Client) KILLCLIENTPROCESS(m *KILLCLIENTPROCESS) error {
	return c.c.WriteMessage(5, 101, m)
}

func (c Client) LADDER(m *LADDER) error {
	return c.c.WriteMessage(5, 102, m)
}

func (c Client) LeaveChannelResponse(m *LeaveChannelResponse) error {
	return c.c.WriteMessage(5, 103, m)
}

func (c Client) LeaveHousingLot(m *LeaveHousingLot) error {
	return c.c.WriteMessage(5, 104, m)
}

func (c Client) LeaveServiceRange(m *LeaveServiceRange) error {
	return c.c.WriteMessage(5, 105, m)
}

func (c Client) LeaveState(m *LeaveState) error {
	return c.c.WriteMessage(5, 106, m)
}

func (c Client) LOADSAVEOBJECTS(m *LOADSAVEOBJECTS) error {
	return c.c.WriteMessage(5, 107, m)
}

func (c Client) LoginComplete(m *LoginComplete) error {
	return c.c.WriteMessage(5, 108, m)
}

func (c Client) MailData(m *MailData) error {
	return c.c.WriteMessage(5, 109, m)
}

func (c Client) MarkLocation(m *MarkLocation) error {
	return c.c.WriteMessage(5, 110, m)
}

func (c Client) MarkLocationResponse(m *MarkLocationResponse) error {
	return c.c.WriteMessage(5, 111, m)
}

func (c Client) MatchAward(m *MatchAward) error {
	return c.c.WriteMessage(5, 112, m)
}

func (c Client) MatchInvite(m *MatchInvite) error {
	return c.c.WriteMessage(5, 113, m)
}

func (c Client) MatchMakerUpdate(m *MatchMakerUpdate) error {
	return c.c.WriteMessage(5, 114, m)
}

func (c Client) MatchReady(m *MatchReady) error {
	return c.c.WriteMessage(5, 115, m)
}

func (c Client) MatchResult(m *MatchResult) error {
	return c.c.WriteMessage(5, 116, m)
}

func (c Client) MESSAGEPROCESS(m *MESSAGEPROCESS) error {
	return c.c.WriteMessage(5, 117, m)
}

func (c Client) MoveCorrection(m *MoveCorrection) error {
	return c.c.WriteMessage(5, 118, m)
}

func (c Client) MoveState(m *MoveState) error {
	return c.c.WriteMessage(5, 119, m)
}

func (c Client) Mute(m *Mute) error {
	return c.c.WriteMessage(5, 120, m)
}

func (c Client) MuteRsp(m *MuteRsp) error {
	return c.c.WriteMessage(5, 121, m)
}

func (c Client) NewObject(m *NewObject) error {
	return c.c.WriteMessage(5, 122, m)
}

func (c Client) NewSysStats(m *NewSysStats) error {
	return c.c.WriteMessage(5, 123, m)
}

func (c Client) NewTickCnt(m *NewTickCnt) error {
	return c.c.WriteMessage(5, 124, m)
}

func (c Client) NewTourneyRewards(m *NewTourneyRewards) error {
	return c.c.WriteMessage(5, 125, m)
}

func (c Client) NewMail(m *NewMail) error {
	return c.c.WriteMessage(5, 126, m)
}

func (c Client) NotifyChannelInstance(m *NotifyChannelInstance) error {
	return c.c.WriteMessage(5, 127, m)
}

func (c Client) NotifyGift(m *NotifyGift) error {
	return c.c.WriteMessage(5, 128, m)
}

func (c Client) NotMuted(m *NotMuted) error {
	return c.c.WriteMessage(5, 129, m)
}

func (c Client) NotAfk(m *NotAfk) error {
	return c.c.WriteMessage(5, 130, m)
}

func (c Client) NPCSpeech(m *NPCSpeech) error {
	return c.c.WriteMessage(5, 131, m)
}

func (c Client) ObjectInfoQuery(m *ObjectInfoQuery) error {
	return c.c.WriteMessage(5, 132, m)
}

func (c Client) PartyDisband(m *PartyDisband) error {
	return c.c.WriteMessage(5, 133, m)
}

func (c Client) PartyJoinFailed(m *PartyJoinFailed) error {
	return c.c.WriteMessage(5, 134, m)
}

func (c Client) PartyJoinNotification(m *PartyJoinNotification) error {
	return c.c.WriteMessage(5, 135, m)
}

func (c Client) PartyLeave(m *PartyLeave) error {
	return c.c.WriteMessage(5, 136, m)
}

func (c Client) PartyLeaveNotification(m *PartyLeaveNotification) error {
	return c.c.WriteMessage(5, 137, m)
}

func (c Client) PartyLevelUp(m *PartyLevelUp) error {
	return c.c.WriteMessage(5, 138, m)
}

func (c Client) PartyLevelUpUpdate(m *PartyLevelUpUpdate) error {
	return c.c.WriteMessage(5, 139, m)
}

func (c Client) PartyMultiPlayerMountEquip(m *PartyMultiPlayerMountEquip) error {
	return c.c.WriteMessage(5, 140, m)
}

func (c Client) PartyMultiPlayerMountEquipUpdate(m *PartyMultiPlayerMountEquipUpdate) error {
	return c.c.WriteMessage(5, 141, m)
}

func (c Client) PartyMultiPlayerMountJoin(m *PartyMultiPlayerMountJoin) error {
	return c.c.WriteMessage(5, 142, m)
}

func (c Client) PartyMultiPlayerMountJoinUpdate(m *PartyMultiPlayerMountJoinUpdate) error {
	return c.c.WriteMessage(5, 143, m)
}

func (c Client) PartyRequestAccept(m *PartyRequestAccept) error {
	return c.c.WriteMessage(5, 144, m)
}

func (c Client) PartyRequestDecline(m *PartyRequestDecline) error {
	return c.c.WriteMessage(5, 145, m)
}

func (c Client) PartyRequestInvite(m *PartyRequestInvite) error {
	return c.c.WriteMessage(5, 146, m)
}

func (c Client) PartyRequestJoin(m *PartyRequestJoin) error {
	return c.c.WriteMessage(5, 147, m)
}

func (c Client) PartyRequestMemberZones(m *PartyRequestMemberZones) error {
	return c.c.WriteMessage(5, 148, m)
}

func (c Client) PartyRequestResponse(m *PartyRequestResponse) error {
	return c.c.WriteMessage(5, 149, m)
}

func (c Client) PartyRequestTimeout(m *PartyRequestTimeout) error {
	return c.c.WriteMessage(5, 150, m)
}

func (c Client) PartySubmitMemberZones(m *PartySubmitMemberZones) error {
	return c.c.WriteMessage(5, 151, m)
}

func (c Client) PartyUpdate(m *PartyUpdate) error {
	return c.c.WriteMessage(5, 152, m)
}

func (c Client) PartyZoneRequest(m *PartyZoneRequest) error {
	return c.c.WriteMessage(5, 153, m)
}

func (c Client) PartyZoneRequestResponse(m *PartyZoneRequestResponse) error {
	return c.c.WriteMessage(5, 154, m)
}

func (c Client) PickUpObject(m *PickUpObject) error {
	return c.c.WriteMessage(5, 155, m)
}

func (c Client) PlaceObject(m *PlaceObject) error {
	return c.c.WriteMessage(5, 156, m)
}

func (c Client) PlayCinematic(m *PlayCinematic) error {
	return c.c.WriteMessage(5, 157, m)
}

func (c Client) PlayerBlackballedAlert(m *PlayerBlackballedAlert) error {
	return c.c.WriteMessage(5, 158, m)
}

func (c Client) PlayerReadyAck(m *PlayerReadyAck) error {
	return c.c.WriteMessage(5, 159, m)
}

func (c Client) PlaySound(m *PlaySound) error {
	return c.c.WriteMessage(5, 160, m)
}

func (c Client) PostZoneEventFromClient(m *PostZoneEventFromClient) error {
	return c.c.WriteMessage(5, 161, m)
}

func (c Client) PreviewIsland(m *PreviewIsland) error {
	return c.c.WriteMessage(5, 162, m)
}

func (c Client) PvPUpdateInfo(m *PvPUpdateInfo) error {
	return c.c.WriteMessage(5, 163, m)
}

func (c Client) QueryLogout(m *QueryLogout) error {
	return c.c.WriteMessage(5, 164, m)
}

func (c Client) RadialChat(m *RadialChat) error {
	return c.c.WriteMessage(5, 165, m)
}

func (c Client) RadialQuickChat(m *RadialQuickChat) error {
	return c.c.WriteMessage(5, 166, m)
}

func (c Client) RadialQuickChatExt(m *RadialQuickChatExt) error {
	return c.c.WriteMessage(5, 167, m)
}

func (c Client) RadialZoneClusterQuickChat(m *RadialZoneClusterQuickChat) error {
	return c.c.WriteMessage(5, 168, m)
}

func (c Client) RANKING(m *RANKING) error {
	return c.c.WriteMessage(5, 169, m)
}

func (c Client) RealmInfoQuery(m *RealmInfoQuery) error {
	return c.c.WriteMessage(5, 170, m)
}

func (c Client) RecallLocation(m *RecallLocation) error {
	return c.c.WriteMessage(5, 171, m)
}

func (c Client) ReceiveGifts(m *ReceiveGifts) error {
	return c.c.WriteMessage(5, 172, m)
}

func (c Client) ReceivePromotions(m *ReceivePromotions) error {
	return c.c.WriteMessage(5, 173, m)
}

func (c Client) RedeemGift(m *RedeemGift) error {
	return c.c.WriteMessage(5, 174, m)
}

func (c Client) RedeemMailGift(m *RedeemMailGift) error {
	return c.c.WriteMessage(5, 175, m)
}

func (c Client) RedeemMailGiftResponse(m *RedeemMailGiftResponse) error {
	return c.c.WriteMessage(5, 176, m)
}

func (c Client) ReleaseDelay(m *ReleaseDelay) error {
	return c.c.WriteMessage(5, 177, m)
}

func (c Client) ReloadTemplateDir(m *ReloadTemplateDir) error {
	return c.c.WriteMessage(5, 178, m)
}

func (c Client) RemovedShopper(m *RemovedShopper) error {
	return c.c.WriteMessage(5, 179, m)
}

func (c Client) RemoveEffect(m *RemoveEffect) error {
	return c.c.WriteMessage(5, 180, m)
}

func (c Client) RemoveItemRequest(m *RemoveItemRequest) error {
	return c.c.WriteMessage(5, 181, m)
}

func (c Client) RemoveObject(m *RemoveObject) error {
	return c.c.WriteMessage(5, 182, m)
}

func (c Client) RemoveParticle(m *RemoveParticle) error {
	return c.c.WriteMessage(5, 183, m)
}

func (c Client) RemoveZoneTimer(m *RemoveZoneTimer) error {
	return c.c.WriteMessage(5, 184, m)
}

func (c Client) ReportAdTakeover(m *ReportAdTakeover) error {
	return c.c.WriteMessage(5, 185, m)
}

func (c Client) ReqAskServer(m *ReqAskServer) error {
	return c.c.WriteMessage(5, 186, m)
}

func (c Client) ReqChatDiagnostics(m *ReqChatDiagnostics) error {
	return c.c.WriteMessage(5, 187, m)
}

func (c Client) RequestAdvanceChannelInstance(m *RequestAdvanceChannelInstance) error {
	return c.c.WriteMessage(5, 188, m)
}

func (c Client) RequestChatCode(m *RequestChatCode) error {
	return c.c.WriteMessage(5, 189, m)
}

func (c Client) RequestCreateChannel(m *RequestCreateChannel) error {
	return c.c.WriteMessage(5, 190, m)
}

func (c Client) RequestDirectedChat(m *RequestDirectedChat) error {
	return c.c.WriteMessage(5, 191, m)
}

func (c Client) RequestDirectedChatByName(m *RequestDirectedChatByName) error {
	return c.c.WriteMessage(5, 192, m)
}

func (c Client) RequestDirectedQuickChat(m *RequestDirectedQuickChat) error {
	return c.c.WriteMessage(5, 193, m)
}

func (c Client) RequestDirectedQuickChatExt(m *RequestDirectedQuickChatExt) error {
	return c.c.WriteMessage(5, 194, m)
}

func (c Client) RequestJoinChannel(m *RequestJoinChannel) error {
	return c.c.WriteMessage(5, 195, m)
}

func (c Client) RequestJoinChannelByName(m *RequestJoinChannelByName) error {
	return c.c.WriteMessage(5, 196, m)
}

func (c Client) RequestLeaveChannel(m *RequestLeaveChannel) error {
	return c.c.WriteMessage(5, 197, m)
}

func (c Client) RequestLeaveChannelByName(m *RequestLeaveChannelByName) error {
	return c.c.WriteMessage(5, 198, m)
}

func (c Client) RequestMaxFriends(m *RequestMaxFriends) error {
	return c.c.WriteMessage(5, 199, m)
}

func (c Client) RequestRadialChat(m *RequestRadialChat) error {
	return c.c.WriteMessage(5, 200, m)
}

func (c Client) RequestRadialFriendChat(m *RequestRadialFriendChat) error {
	return c.c.WriteMessage(5, 201, m)
}

func (c Client) RequestRadialFriendQuickChat(m *RequestRadialFriendQuickChat) error {
	return c.c.WriteMessage(5, 202, m)
}

func (c Client) RequestRadialOwnerChat(m *RequestRadialOwnerChat) error {
	return c.c.WriteMessage(5, 203, m)
}

func (c Client) RequestRadialQuickChat(m *RequestRadialQuickChat) error {
	return c.c.WriteMessage(5, 204, m)
}

func (c Client) RequestRadialQuickChatExt(m *RequestRadialQuickChatExt) error {
	return c.c.WriteMessage(5, 205, m)
}

func (c Client) RequestSession(m *RequestSession) error {
	return c.c.WriteMessage(5, 206, m)
}

func (c Client) RequestZoneClusterQuickChat(m *RequestZoneClusterQuickChat) error {
	return c.c.WriteMessage(5, 207, m)
}

func (c Client) RequestGifts(m *RequestGifts) error {
	return c.c.WriteMessage(5, 208, m)
}

func (c Client) RequestPromotions(m *RequestPromotions) error {
	return c.c.WriteMessage(5, 209, m)
}

func (c Client) RestoreCharRsp(m *RestoreCharRsp) error {
	return c.c.WriteMessage(5, 210, m)
}

func (c Client) RetrieveMail(m *RetrieveMail) error {
	return c.c.WriteMessage(5, 211, m)
}

func (c Client) RetryTeleport(m *RetryTeleport) error {
	return c.c.WriteMessage(5, 212, m)
}

func (c Client) Script(m *Script) error {
	return c.c.WriteMessage(5, 213, m)
}

func (c Client) SelectBadge(m *SelectBadge) error {
	return c.c.WriteMessage(5, 214, m)
}

func (c Client) SendChatCode(m *SendChatCode) error {
	return c.c.WriteMessage(5, 215, m)
}

func (c Client) SendInteractOptions(m *SendInteractOptions) error {
	return c.c.WriteMessage(5, 216, m)
}

func (c Client) SendText(m *SendText) error {
	return c.c.WriteMessage(5, 217, m)
}

func (c Client) ServerMove(m *ServerMove) error {
	return c.c.WriteMessage(5, 218, m)
}

func (c Client) ServerShutdown(m *ServerShutdown) error {
	return c.c.WriteMessage(5, 219, m)
}

func (c Client) ServerTeleport(m *ServerTeleport) error {
	return c.c.WriteMessage(5, 220, m)
}

func (c Client) ServerTransfer(m *ServerTransfer) error {
	return c.c.WriteMessage(5, 221, m)
}

func (c Client) ServerTutorialCommand(m *ServerTutorialCommand) error {
	return c.c.WriteMessage(5, 222, m)
}

func (c Client) ServerError(m *ServerError) error {
	return c.c.WriteMessage(5, 223, m)
}

func (c Client) SERVERPROCESSRUNNING(m *SERVERPROCESSRUNNING) error {
	return c.c.WriteMessage(5, 224, m)
}

func (c Client) SESSION(m *SESSION) error {
	return c.c.WriteMessage(5, 225, m)
}

func (c Client) SESSIONERROR(m *SESSIONERROR) error {
	return c.c.WriteMessage(5, 226, m)
}

func (c Client) SESSIONPLAYER(m *SESSIONPLAYER) error {
	return c.c.WriteMessage(5, 227, m)
}

func (c Client) SETHOUSECUSTOMIZATION(m *SETHOUSECUSTOMIZATION) error {
	return c.c.WriteMessage(5, 228, m)
}

func (c Client) SplitQuantity(m *SplitQuantity) error {
	return c.c.WriteMessage(5, 229, m)
}

func (c Client) StartStagedCinematic(m *StartStagedCinematic) error {
	return c.c.WriteMessage(5, 230, m)
}

func (c Client) STARTCLIENTPROCESS(m *STARTCLIENTPROCESS) error {
	return c.c.WriteMessage(5, 231, m)
}

func (c Client) STARTSERVERPROCESS(m *STARTSERVERPROCESS) error {
	return c.c.WriteMessage(5, 232, m)
}

func (c Client) SuboptimalBracketResponse(m *SuboptimalBracketResponse) error {
	return c.c.WriteMessage(5, 233, m)
}

func (c Client) TeleportToGameZone(m *TeleportToGameZone) error {
	return c.c.WriteMessage(5, 234, m)
}

func (c Client) TournamentUpdate(m *TournamentUpdate) error {
	return c.c.WriteMessage(5, 235, m)
}

func (c Client) TransferCharRsp(m *TransferCharRsp) error {
	return c.c.WriteMessage(5, 236, m)
}

func (c Client) TransferInstance(m *TransferInstance) error {
	return c.c.WriteMessage(5, 237, m)
}

func (c Client) TransferRealms(m *TransferRealms) error {
	return c.c.WriteMessage(5, 238, m)
}

func (c Client) TrashInventoryItem(m *TrashInventoryItem) error {
	return c.c.WriteMessage(5, 239, m)
}

func (c Client) Tutorials(m *Tutorials) error {
	return c.c.WriteMessage(5, 240, m)
}

func (c Client) UpdateObject(m *UpdateObject) error {
	return c.c.WriteMessage(5, 241, m)
}

func (c Client) UpdateQuantity(m *UpdateQuantity) error {
	return c.c.WriteMessage(5, 242, m)
}

func (c Client) UpdateZoneCounter(m *UpdateZoneCounter) error {
	return c.c.WriteMessage(5, 243, m)
}

func (c Client) UpdateZoneTimer(m *UpdateZoneTimer) error {
	return c.c.WriteMessage(5, 244, m)
}

func (c Client) UseChatCode(m *UseChatCode) error {
	return c.c.WriteMessage(5, 245, m)
}

func (c Client) CSRViewAccount(m *CSRViewAccount) error {
	return c.c.WriteMessage(5, 246, m)
}

func (c Client) WizBang(m *WizBang) error {
	return c.c.WriteMessage(5, 247, m)
}

func (c Client) ZombiePlayer(m *ZombiePlayer) error {
	return c.c.WriteMessage(5, 248, m)
}

func (c Client) ZONEEVENTTIMEREXPIRED(m *ZONEEVENTTIMEREXPIRED) error {
	return c.c.WriteMessage(5, 249, m)
}

func (c Client) ZoneTransfer(m *ZoneTransfer) error {
	return c.c.WriteMessage(5, 250, m)
}

func (c Client) ZoneTransferAck(m *ZoneTransferAck) error {
	return c.c.WriteMessage(5, 251, m)
}

func (c Client) ZoneTransferNack(m *ZoneTransferNack) error {
	return c.c.WriteMessage(5, 252, m)
}

func (c Client) ZoneTransferRequest(m *ZoneTransferRequest) error {
	return c.c.WriteMessage(5, 253, m)
}

type Service struct {
	service
}

type Client struct {
	c *proto.Client
}
type ADCLICKTHROUGH struct {
	URL     string
	Partner string
}

func (s *ADCLICKTHROUGH) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Partner)+len(s.URL)))
	binary.Write(b, binary.LittleEndian, s.Partner)
	binary.Write(b, binary.LittleEndian, s.URL)
	return b.Bytes()
}

func (s *ADCLICKTHROUGH) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Partner, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.URL, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type AddEffect struct {
	EffectData   string
	GameObjectID uint64
}

func (s *AddEffect) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.EffectData)))
	binary.Write(b, binary.LittleEndian, s.EffectData)
	return b.Bytes()
}

func (s *AddEffect) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.EffectData, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type AddItemRequest struct {
	GlobalID       uint64
	ItemTemplateID uint64
	Quantity       int32
}

func (s *AddItemRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *AddItemRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type AddObject struct {
	Name         string
	GameObjectID uint64
	TemplateID   uint64
	LocationX    float32
	LocationY    float32
	LocationZ    float32
	Direction    float32
}

func (s *AddObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 34+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.Name)
	return b.Bytes()
}

func (s *AddObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type AddParticle struct {
	Sound     string
	ChatArgs  string
	ChatText  string
	FloatText string
	AttachTo  string
	NewName   string
	Asset     string
	ParentID  uint64
	Loop      uint8
}

func (s *AddParticle) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23+len(s.Asset)+len(s.NewName)+len(s.AttachTo)+len(s.FloatText)+len(s.ChatText)+len(s.ChatArgs)+len(s.Sound)))
	binary.Write(b, binary.LittleEndian, s.Asset)
	binary.Write(b, binary.LittleEndian, s.NewName)
	binary.Write(b, binary.LittleEndian, s.AttachTo)
	binary.Write(b, binary.LittleEndian, s.FloatText)
	binary.Write(b, binary.LittleEndian, s.ChatText)
	binary.Write(b, binary.LittleEndian, s.ChatArgs)
	binary.Write(b, binary.LittleEndian, s.Sound)
	return b.Bytes()
}

func (s *AddParticle) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Asset, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.NewName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.AttachTo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Loop); err != nil {
		return err
	}
	if s.FloatText, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ChatText, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ChatArgs, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Sound, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	return nil
}

type AddZoneTimer struct {
	TimerUI       string
	Title         string
	TimerID       int32
	CountdownTime float32
}

func (s *AddZoneTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.Title)+len(s.TimerUI)))
	binary.Write(b, binary.LittleEndian, s.Title)
	binary.Write(b, binary.LittleEndian, s.TimerUI)
	return b.Bytes()
}

func (s *AddZoneTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TimerID); err != nil {
		return err
	}
	if s.Title, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.TimerUI, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CountdownTime); err != nil {
		return err
	}
	return nil
}

type Attach struct {
	PassKey        string
	Location       string
	ZoneName       string
	LoginKey       string
	Locale         string
	UserID         uint64
	CharID         uint64
	TargetPlayerID uint64
	ZoneID         uint64
	GameObjectID   uint64
	SessionID      uint64
	MachineID      uint64
	Slot           int32
	SessionSlot    int32
	Retry          uint8
	Reattach       uint8
}

func (s *Attach) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 76+len(s.LoginKey)+len(s.ZoneName)+len(s.Location)+len(s.PassKey)+len(s.Locale)))
	binary.Write(b, binary.LittleEndian, s.LoginKey)
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.Location)
	binary.Write(b, binary.LittleEndian, s.PassKey)
	binary.Write(b, binary.LittleEndian, s.Locale)
	return b.Bytes()
}

func (s *Attach) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.LoginKey, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharID); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Location, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetPlayerID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Slot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionSlot); err != nil {
		return err
	}
	if s.PassKey, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Reattach); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Retry); err != nil {
		return err
	}
	if s.Locale, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MachineID); err != nil {
		return err
	}
	return nil
}

type AttachFailed struct {
	Error        uint32
	Rejected     uint32
	NoDisconnect uint32
}

func (s *AttachFailed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *AttachFailed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Rejected); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NoDisconnect); err != nil {
		return err
	}
	return nil
}

type AuctionHouseUpdate struct {
	UpdateInfo  string
	CharacterID uint64
}

func (s *AuctionHouseUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.UpdateInfo)))
	binary.Write(b, binary.LittleEndian, s.UpdateInfo)
	return b.Bytes()
}

func (s *AuctionHouseUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.UpdateInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type Badges struct {
	BadgeFilterInfo string
	BadgeInfo       string
	BadgeName       string
	CurrentBadge    uint32
	TotalBadges     uint32
	BadgeNameID     uint32
	UpdateAll       int8
	Add             int8
	Remove          int8
	Display         uint8
}

func (s *Badges) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.BadgeName)+len(s.BadgeInfo)+len(s.BadgeFilterInfo)))
	binary.Write(b, binary.LittleEndian, s.BadgeName)
	binary.Write(b, binary.LittleEndian, s.BadgeInfo)
	binary.Write(b, binary.LittleEndian, s.BadgeFilterInfo)
	return b.Bytes()
}

func (s *Badges) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CurrentBadge); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpdateAll); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalBadges); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	if s.BadgeName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.BadgeInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BadgeNameID); err != nil {
		return err
	}
	if s.BadgeFilterInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Display); err != nil {
		return err
	}
	return nil
}

type BanRsp struct {
	BanType  string
	BanTime  string
	BannedID string
	Success  uint8
}

func (s *BanRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.BannedID)+len(s.BanTime)+len(s.BanType)))
	binary.Write(b, binary.LittleEndian, s.BannedID)
	binary.Write(b, binary.LittleEndian, s.BanTime)
	binary.Write(b, binary.LittleEndian, s.BanType)
	return b.Bytes()
}

func (s *BanRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.BannedID, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.BanTime, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.BanType, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type BestFriend struct {
	ListOwnerGID uint64
	BuddyID      uint64
	Forwarded    uint8
	FriendSymbol uint8
}

func (s *BestFriend) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18))
	return b.Bytes()
}

func (s *BestFriend) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BuddyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendSymbol); err != nil {
		return err
	}
	return nil
}

type Blackball struct {
	ChatLog        string
	HarassmentType string
	TargetObjID    uint64
	IsMute         int8
	IsCharacterID  int8
}

func (s *Blackball) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.HarassmentType)+len(s.ChatLog)))
	binary.Write(b, binary.LittleEndian, s.HarassmentType)
	binary.Write(b, binary.LittleEndian, s.ChatLog)
	return b.Bytes()
}

func (s *Blackball) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetObjID); err != nil {
		return err
	}
	if s.HarassmentType, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ChatLog, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsMute); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsCharacterID); err != nil {
		return err
	}
	return nil
}

type BuddyDrop struct {
	ListOwnerGID uint64
	EntryGID     uint64
}

func (s *BuddyDrop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *BuddyDrop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	return nil
}

type BuddyEntry struct {
	RealmName        string
	PreviousName     string
	ZoneName         string
	Name             string
	ListOwnerGID     uint64
	GameObjectID     uint64
	EntryGID         uint64
	FriendInfo       uint32
	Permissions      uint32
	Locale           uint32
	FriendDate       uint32
	FriendStatusDate uint32
	Status           uint8
	PasswordChat     uint8
}

func (s *BuddyEntry) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 54+len(s.Name)+len(s.ZoneName)+len(s.RealmName)+len(s.PreviousName)))
	binary.Write(b, binary.LittleEndian, s.Name)
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.RealmName)
	binary.Write(b, binary.LittleEndian, s.PreviousName)
	return b.Bytes()
}

func (s *BuddyEntry) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendInfo); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PasswordChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.RealmName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Locale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendDate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendStatusDate); err != nil {
		return err
	}
	if s.PreviousName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type BuddyListComplete struct {
	ListOwnerGID uint64
}

func (s *BuddyListComplete) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *BuddyListComplete) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	return nil
}

type BuddyRequestAccept struct {
	EntryName        string
	OwnerName        string
	PreviousName     string
	EntryGID         uint64
	SourceObjectID   uint64
	DestObjectID     uint64
	ListOwnerGID     uint64
	Error            uint32
	EntryLocale      uint32
	FriendInfo       uint32
	FriendDate       uint32
	FriendStatusDate uint32
	Permissions      uint32
	Forwarded        uint8
}

func (s *BuddyRequestAccept) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 63+len(s.OwnerName)+len(s.EntryName)+len(s.PreviousName)))
	binary.Write(b, binary.LittleEndian, s.OwnerName)
	binary.Write(b, binary.LittleEndian, s.EntryName)
	binary.Write(b, binary.LittleEndian, s.PreviousName)
	return b.Bytes()
}

func (s *BuddyRequestAccept) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if s.OwnerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.EntryName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DestObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryLocale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendInfo); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendDate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendStatusDate); err != nil {
		return err
	}
	if s.PreviousName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type BuddyRequestAcceptFwd struct {
	PreviousName     string
	EntryName        string
	OwnerName        string
	ListOwnerGID     uint64
	EntryGID         uint64
	SourceObjectID   uint64
	DestObjectID     uint64
	Permissions      uint32
	EntryLocale      uint32
	FriendInfo       uint32
	FriendDate       uint32
	FriendStatusDate uint32
}

func (s *BuddyRequestAcceptFwd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 58+len(s.OwnerName)+len(s.EntryName)+len(s.PreviousName)))
	binary.Write(b, binary.LittleEndian, s.OwnerName)
	binary.Write(b, binary.LittleEndian, s.EntryName)
	binary.Write(b, binary.LittleEndian, s.PreviousName)
	return b.Bytes()
}

func (s *BuddyRequestAcceptFwd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if s.OwnerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.EntryName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DestObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryLocale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendInfo); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendDate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendStatusDate); err != nil {
		return err
	}
	if s.PreviousName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type BuddyRequestAdd struct {
	OwnerSchool  string
	OwnerName    string
	ListOwnerGID uint64
	EntryGID     uint64
	OwnerLevel   uint8
	Remove       uint8
}

func (s *BuddyRequestAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.OwnerName)+len(s.OwnerSchool)))
	binary.Write(b, binary.LittleEndian, s.OwnerName)
	binary.Write(b, binary.LittleEndian, s.OwnerSchool)
	return b.Bytes()
}

func (s *BuddyRequestAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if s.OwnerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerLevel); err != nil {
		return err
	}
	if s.OwnerSchool, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	return nil
}

type BuddyRequestAddFwd struct {
	OwnerSchool  string
	OwnerName    string
	ListOwnerGID uint64
	EntryGID     uint64
	OwnerLevel   uint8
	Remove       uint8
}

func (s *BuddyRequestAddFwd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.OwnerName)+len(s.OwnerSchool)))
	binary.Write(b, binary.LittleEndian, s.OwnerName)
	binary.Write(b, binary.LittleEndian, s.OwnerSchool)
	return b.Bytes()
}

func (s *BuddyRequestAddFwd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if s.OwnerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerLevel); err != nil {
		return err
	}
	if s.OwnerSchool, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	return nil
}

type BuddyRequestDeny struct {
	ListOwnerGID uint64
	EntryGID     uint64
}

func (s *BuddyRequestDeny) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *BuddyRequestDeny) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	return nil
}

type BuddyRequestDenyFwd struct {
	ListOwnerGID uint64
	EntryGID     uint64
}

func (s *BuddyRequestDenyFwd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *BuddyRequestDenyFwd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	return nil
}

type BuddyRequestDrop struct {
	ListOwnerGID uint64
	EntryGID     uint64
	Forwarded    uint8
}

func (s *BuddyRequestDrop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	return b.Bytes()
}

func (s *BuddyRequestDrop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type BuddyRequestError struct {
	ListOwnerGID uint64
	EntryGID     uint64
	Error        uint8
}

func (s *BuddyRequestError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	return b.Bytes()
}

func (s *BuddyRequestError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type BuddyRequestList struct {
	ListOwnerGID uint64
	Forwarded    uint8
}

func (s *BuddyRequestList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *BuddyRequestList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type BuddyStats struct {
	WishlistBlock      string
	EffectBlock        string
	EquipBlock         string
	CharBlock          string
	PetStatBlock       string
	StatBlock          string
	BuddyID            uint64
	TargetCharacterGID uint64
	SourceCharacterGID uint64
	EffectBlockCRC     uint32
	StatBlockCRC       uint32
	PetStatBlockCRC    uint32
	CharBlockCRC       uint32
	EquipBlockCRC      uint32
	ShowPVPOption      uint32
	WishlistBlockCRC   uint32
	School             uint32
	Level              uint32
	PetJewelID         uint32
	Gender             int8
}

func (s *BuddyStats) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 77+len(s.StatBlock)+len(s.PetStatBlock)+len(s.CharBlock)+len(s.EquipBlock)+len(s.EffectBlock)+len(s.WishlistBlock)))
	binary.Write(b, binary.LittleEndian, s.StatBlock)
	binary.Write(b, binary.LittleEndian, s.PetStatBlock)
	binary.Write(b, binary.LittleEndian, s.CharBlock)
	binary.Write(b, binary.LittleEndian, s.EquipBlock)
	binary.Write(b, binary.LittleEndian, s.EffectBlock)
	binary.Write(b, binary.LittleEndian, s.WishlistBlock)
	return b.Bytes()
}

func (s *BuddyStats) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.BuddyID); err != nil {
		return err
	}
	if s.StatBlock, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.PetStatBlock, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.CharBlock, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.EquipBlock, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.EffectBlock, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.WishlistBlock, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Level); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.School); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ShowPVPOption); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Gender); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StatBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetStatBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EquipBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EffectBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WishlistBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetJewelID); err != nil {
		return err
	}
	return nil
}

type BuddyStatusUpdate struct {
	PreviousName     string
	RealmName        string
	ZoneName         string
	ListOwnerGID     uint64
	EntryGID         uint64
	Permissions      uint32
	Locale           uint32
	FriendInfo       uint32
	FriendDate       uint32
	FriendStatusDate uint32
	Status           uint8
}

func (s *BuddyStatusUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 43+len(s.ZoneName)+len(s.RealmName)+len(s.PreviousName)))
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.RealmName)
	binary.Write(b, binary.LittleEndian, s.PreviousName)
	return b.Bytes()
}

func (s *BuddyStatusUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Locale); err != nil {
		return err
	}
	if s.RealmName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendInfo); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendDate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendStatusDate); err != nil {
		return err
	}
	if s.PreviousName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type BugReport struct {
	Report string
}

func (s *BugReport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Report)))
	binary.Write(b, binary.LittleEndian, s.Report)
	return b.Bytes()
}

func (s *BugReport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Report, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type BugSubmitResponse struct {
	Success int8
	Type    int8
}

func (s *BugSubmitResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2))
	return b.Bytes()
}

func (s *BugSubmitResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	return nil
}

type ChannelChat struct {
	Message    string
	SourceName string
	SourceID   uint64
	TargetID   uint64
	Flags      uint32
	Filter     uint8
}

func (s *ChannelChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25+len(s.SourceName)+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *ChannelChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	return nil
}

type ChannelSubscription struct {
	ChannelName string
	RecipientID uint64
	ChannelID   uint64
	ParentID    uint64
	ChannelType uint8
}

func (s *ChannelSubscription) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 27+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.ChannelName)
	return b.Bytes()
}

func (s *ChannelSubscription) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RecipientID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if s.ChannelName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelType); err != nil {
		return err
	}
	return nil
}

type ChatDiagnostics struct {
	Data        string
	CharacterID uint64
}

func (s *ChatDiagnostics) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *ChatDiagnostics) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ChatError struct {
	ListOwnerGID uint64
	CharacterID  uint64
	Error        uint32
}

func (s *ChatError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *ChatError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type CheckSubscription struct {
	Success uint8
}

func (s *CheckSubscription) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *CheckSubscription) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type CheckMail struct {
	CharacterID uint64
}

func (s *CheckMail) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *CheckMail) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type ClientMove struct {
	LocationX   uint16
	LocationY   uint16
	LocationZ   uint16
	Direction   uint8
	ZoneCounter uint8
}

func (s *ClientMove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *ClientMove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneCounter); err != nil {
		return err
	}
	return nil
}

type ClientMoveState struct {
	NewState int8
}

func (s *ClientMoveState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *ClientMoveState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.NewState); err != nil {
		return err
	}
	return nil
}

type ClientNotifyText struct {
	Madlibs    string
	NotifyText string
	Type       int32
	AddToChat  uint8
}

func (s *ClientNotifyText) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9+len(s.NotifyText)+len(s.Madlibs)))
	binary.Write(b, binary.LittleEndian, s.NotifyText)
	binary.Write(b, binary.LittleEndian, s.Madlibs)
	return b.Bytes()
}

func (s *ClientNotifyText) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.NotifyText, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	if s.Madlibs, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AddToChat); err != nil {
		return err
	}
	return nil
}

type ClientTutorialEvent struct {
	Event string
}

func (s *ClientTutorialEvent) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Event)))
	binary.Write(b, binary.LittleEndian, s.Event)
	return b.Bytes()
}

func (s *ClientTutorialEvent) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Event, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ClientDisconnect struct {
}

func (s *ClientDisconnect) Marshal() []byte {
	return []byte{}
}

func (s *ClientDisconnect) Unmarshal(data []byte) error {
	return nil
}

type ClientError struct {
	Function string
}

func (s *ClientError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Function)))
	binary.Write(b, binary.LittleEndian, s.Function)
	return b.Bytes()
}

func (s *ClientError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Function, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type CLIENTPROCESSTERMINATED struct {
	JobID uint32
}

func (s *CLIENTPROCESSTERMINATED) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *CLIENTPROCESSTERMINATED) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	return nil
}

type CombineInventoryItems struct {
	GlobalID uint64
	ItemID1  uint64
	ItemID2  uint64
}

func (s *CombineInventoryItems) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *CombineInventoryItems) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID2); err != nil {
		return err
	}
	return nil
}

type Command struct {
	ResultEvent string
	Command     string
	TimeLeft    int32
}

func (s *Command) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8+len(s.Command)+len(s.ResultEvent)))
	binary.Write(b, binary.LittleEndian, s.Command)
	binary.Write(b, binary.LittleEndian, s.ResultEvent)
	return b.Bytes()
}

func (s *Command) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Command, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ResultEvent, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TimeLeft); err != nil {
		return err
	}
	return nil
}

type CommandResult struct {
	Results     string
	ResultEvent string
	Command     string
}

func (s *CommandResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Command)+len(s.ResultEvent)+len(s.Results)))
	binary.Write(b, binary.LittleEndian, s.Command)
	binary.Write(b, binary.LittleEndian, s.ResultEvent)
	binary.Write(b, binary.LittleEndian, s.Results)
	return b.Bytes()
}

func (s *CommandResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Command, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ResultEvent, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Results, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type CompanionEffects struct {
	EffectInfoList string
	NPC            uint32
	Add            uint8
}

func (s *CompanionEffects) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.EffectInfoList)))
	binary.Write(b, binary.LittleEndian, s.EffectInfoList)
	return b.Bytes()
}

func (s *CompanionEffects) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.NPC); err != nil {
		return err
	}
	if s.EffectInfoList, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	return nil
}

type CoreEmote struct {
	Name              string
	PhraseID          uint32
	ExcludeOriginator uint8
}

func (s *CoreEmote) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.Name)
	return b.Bytes()
}

func (s *CoreEmote) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ExcludeOriginator); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PhraseID); err != nil {
		return err
	}
	return nil
}

type CreateChannelResponse struct {
	ChannelName string
	SourceID    uint64
	ChannelID   uint64
	ErrorCode   uint8
}

func (s *CreateChannelResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.ChannelName)
	return b.Bytes()
}

func (s *CreateChannelResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if s.ChannelName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	return nil
}

type CREATESESSION struct {
}

func (s *CREATESESSION) Marshal() []byte {
	return []byte{}
}

func (s *CREATESESSION) Unmarshal(data []byte) error {
	return nil
}

type CSRBankItems struct {
	SerializedItem string
	GlobalID       uint64
	SharedBank     uint8
}

func (s *CSRBankItems) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.SerializedItem)))
	binary.Write(b, binary.LittleEndian, s.SerializedItem)
	return b.Bytes()
}

func (s *CSRBankItems) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SharedBank); err != nil {
		return err
	}
	if s.SerializedItem, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type CSRBankItemsDone struct {
	GlobalID   uint64
	Limit      int32
	SharedBank uint8
}

func (s *CSRBankItemsDone) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *CSRBankItemsDone) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SharedBank); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Limit); err != nil {
		return err
	}
	return nil
}

type CSREditCharacter struct {
	Object           string
	AccessPasses     string
	CurrentMute      string
	CurrentBan       string
	UserName         string
	BadgeList        string
	DynaMods         string
	Registry         string
	CurrentQuests    string
	UserID           uint64
	CharacterID      uint64
	ChunkNum         uint32
	CharacterSlots   int32
	AcctAssoc        uint8
	Edit             uint8
	AllowedToReport  uint8
	SegmentedMessage uint8
	LastSegment      uint8
}

func (s *CSREditCharacter) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 47+len(s.UserName)+len(s.CurrentBan)+len(s.CurrentMute)+len(s.Object)+len(s.CurrentQuests)+len(s.Registry)+len(s.AccessPasses)+len(s.BadgeList)+len(s.DynaMods)))
	binary.Write(b, binary.LittleEndian, s.UserName)
	binary.Write(b, binary.LittleEndian, s.CurrentBan)
	binary.Write(b, binary.LittleEndian, s.CurrentMute)
	binary.Write(b, binary.LittleEndian, s.Object)
	binary.Write(b, binary.LittleEndian, s.CurrentQuests)
	binary.Write(b, binary.LittleEndian, s.Registry)
	binary.Write(b, binary.LittleEndian, s.AccessPasses)
	binary.Write(b, binary.LittleEndian, s.BadgeList)
	binary.Write(b, binary.LittleEndian, s.DynaMods)
	return b.Bytes()
}

func (s *CSREditCharacter) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ChunkNum); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserID); err != nil {
		return err
	}
	if s.UserName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.CurrentBan, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.CurrentMute, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AcctAssoc); err != nil {
		return err
	}
	if s.Object, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.CurrentQuests, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Registry, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.AccessPasses, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.BadgeList, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Edit); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowedToReport); err != nil {
		return err
	}
	if s.DynaMods, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterSlots); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SegmentedMessage); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LastSegment); err != nil {
		return err
	}
	return nil
}

type CSREditCharacterFailed struct {
	CharacterID uint64
}

func (s *CSREditCharacterFailed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *CSREditCharacterFailed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type CSRFinishedHouse struct {
	OldGid    uint64
	NewGid    uint64
	Character uint64
	Error     uint8
}

func (s *CSRFinishedHouse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	return b.Bytes()
}

func (s *CSRFinishedHouse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.OldGid); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewGid); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Character); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type CSRSearchList struct {
	Data     string
	StartEnd uint8
}

func (s *CSRSearchList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *CSRSearchList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.StartEnd); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type CSRMailData struct {
	Data string
}

func (s *CSRMailData) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *CSRMailData) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type CSRReceiveGifts struct {
	Data    string
	Success int32
}

func (s *CSRReceiveGifts) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *CSRReceiveGifts) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type DEBUGDELETEALLOBJECTS struct {
}

func (s *DEBUGDELETEALLOBJECTS) Marshal() []byte {
	return []byte{}
}

func (s *DEBUGDELETEALLOBJECTS) Unmarshal(data []byte) error {
	return nil
}

type DeleteObject struct {
	Data         string
	GameObjectID uint64
}

func (s *DeleteObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *DeleteObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type DeleteGift struct {
	GiftID         string
	Success        int32
	IsPeriodicItem uint8
}

func (s *DeleteGift) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.GiftID)))
	binary.Write(b, binary.LittleEndian, s.GiftID)
	return b.Bytes()
}

func (s *DeleteGift) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.GiftID, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsPeriodicItem); err != nil {
		return err
	}
	return nil
}

type DirectedChat struct {
	Message    string
	SourceName string
	SourceID   uint64
	TargetID   uint64
	Filter     uint8
}

func (s *DirectedChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21+len(s.SourceName)+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *DirectedChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	return nil
}

type DirectedChatByNameResponse struct {
	TargetName string
	TargetID   uint64
}

func (s *DirectedChatByNameResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.TargetName)))
	binary.Write(b, binary.LittleEndian, s.TargetName)
	return b.Bytes()
}

func (s *DirectedChatByNameResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if s.TargetName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type DirectedChatFail struct {
}

func (s *DirectedChatFail) Marshal() []byte {
	return []byte{}
}

func (s *DirectedChatFail) Unmarshal(data []byte) error {
	return nil
}

type DirectedQuickChat struct {
	SourceName string
	SourceID   uint64
	MessageID  uint32
	Flags      uint32
	Filter     uint8
}

func (s *DirectedQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.SourceName)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	return b.Bytes()
}

func (s *DirectedQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	return nil
}

type DirectedQuickChatExt struct {
	Message    string
	SourceName string
	SourceID   uint64
	Flags      uint32
	Filter     uint8
}

func (s *DirectedQuickChatExt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17+len(s.SourceName)+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *DirectedQuickChatExt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	return nil
}

type DisconnectAfk struct {
	Warning int8
}

func (s *DisconnectAfk) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *DisconnectAfk) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Warning); err != nil {
		return err
	}
	return nil
}

type DownloadBrowser struct {
}

func (s *DownloadBrowser) Marshal() []byte {
	return []byte{}
}

func (s *DownloadBrowser) Unmarshal(data []byte) error {
	return nil
}

type DownloadPackage struct {
	Data string
}

func (s *DownloadPackage) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *DownloadPackage) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type DownloadPackageElement struct {
	Data string
}

func (s *DownloadPackageElement) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *DownloadPackageElement) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type DynaModBehaviorUpdateMods struct {
	NewMod    string
	AllMods   string
	GlobalID  uint64
	Index     int32
	UpdateAll int8
	Add       int8
	Remove    int8
}

func (s *DynaModBehaviorUpdateMods) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.AllMods)+len(s.NewMod)))
	binary.Write(b, binary.LittleEndian, s.AllMods)
	binary.Write(b, binary.LittleEndian, s.NewMod)
	return b.Bytes()
}

func (s *DynaModBehaviorUpdateMods) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpdateAll); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	if s.AllMods, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.NewMod, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index); err != nil {
		return err
	}
	return nil
}

type DynaModDump struct {
	Filename string
	Data     string
}

func (s *DynaModDump) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Data)+len(s.Filename)))
	binary.Write(b, binary.LittleEndian, s.Data)
	binary.Write(b, binary.LittleEndian, s.Filename)
	return b.Bytes()
}

func (s *DynaModDump) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Filename, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type EnterState struct {
	Data                      string
	GameObjectID              uint64
	State                     uint32
	IgnoreIfCurrentStateIsOff uint8
}

func (s *EnterState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 15+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *EnterState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IgnoreIfCurrentStateIsOff); err != nil {
		return err
	}
	return nil
}

type EquipItem struct {
	SlotName string
	ItemID   uint64
	IsEquip  int32
}

func (s *EquipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.SlotName)))
	binary.Write(b, binary.LittleEndian, s.SlotName)
	return b.Bytes()
}

func (s *EquipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.IsEquip); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if s.SlotName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type EquipmentBehaviorEquipItem struct {
	SerializedItem string
	SlotName       string
	GlobalID       uint64
	IsValid        int32
}

func (s *EquipmentBehaviorEquipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.SlotName)+len(s.SerializedItem)))
	binary.Write(b, binary.LittleEndian, s.SlotName)
	binary.Write(b, binary.LittleEndian, s.SerializedItem)
	return b.Bytes()
}

func (s *EquipmentBehaviorEquipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.SlotName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsValid); err != nil {
		return err
	}
	if s.SerializedItem, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type EquipmentBehaviorPublicEquipItem struct {
	SerializedInfo string
	GlobalID       uint64
}

func (s *EquipmentBehaviorPublicEquipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.SerializedInfo)))
	binary.Write(b, binary.LittleEndian, s.SerializedInfo)
	return b.Bytes()
}

func (s *EquipmentBehaviorPublicEquipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.SerializedInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type EquipmentBehaviorPublicUnequipItem struct {
	GlobalID      uint64
	IndexToRemove uint8
}

func (s *EquipmentBehaviorPublicUnequipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *EquipmentBehaviorPublicUnequipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IndexToRemove); err != nil {
		return err
	}
	return nil
}

type EquipmentBehaviorUnequipItem struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *EquipmentBehaviorUnequipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *EquipmentBehaviorUnequipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type FeedInventoryItem struct {
	PetID       uint64
	FedObjectID uint64
}

func (s *FeedInventoryItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *FeedInventoryItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FedObjectID); err != nil {
		return err
	}
	return nil
}

type FINDSESSIONS struct {
}

func (s *FINDSESSIONS) Marshal() []byte {
	return []byte{}
}

func (s *FINDSESSIONS) Unmarshal(data []byte) error {
	return nil
}

type FINDSESSIONPLAYERS struct {
	ZoneID    uint64
	SessionID uint64
}

func (s *FINDSESSIONPLAYERS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *FINDSESSIONPLAYERS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	return nil
}

type GenericGame struct {
	Message string
	A       int32
	B       int32
	X       int32
	Y       int32
	Z       int32
	W       int32
}

func (s *GenericGame) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 26+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *GenericGame) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.A); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.B); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.X); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Y); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Z); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.W); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type GetLadder struct {
	NameBlob         string
	CharacterID      uint64
	TournamentNameID uint32
}

func (s *GetLadder) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.NameBlob)))
	binary.Write(b, binary.LittleEndian, s.NameBlob)
	return b.Bytes()
}

func (s *GetLadder) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.NameBlob, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	return nil
}

type GETRANKINGS struct {
	Game         string
	GroupID      uint64
	RankingCount int32
	Time         uint32
}

func (s *GETRANKINGS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.Game)))
	binary.Write(b, binary.LittleEndian, s.Game)
	return b.Bytes()
}

func (s *GETRANKINGS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RankingCount); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Time); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GroupID); err != nil {
		return err
	}
	return nil
}

type GiftRedeemed struct {
	Data                 string
	GiftID               string
	GID                  uint64
	TemplateID           uint64
	Success              int32
	ErrorCode            int32
	Quantity             int32
	HasMorePromoGifts    int8
	HasMoreCrownsRewards int8
	HasMorePeriodicItems int8
}

func (s *GiftRedeemed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 35+len(s.GiftID)+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GiftID)
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *GiftRedeemed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.GiftID, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HasMorePromoGifts); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HasMoreCrownsRewards); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HasMorePeriodicItems); err != nil {
		return err
	}
	return nil
}

type GotoPlayer struct {
	TargetCharacterID uint64
	OriginatorID      uint64
	MustBeFriend      uint8
}

func (s *GotoPlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	return b.Bytes()
}

func (s *GotoPlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OriginatorID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MustBeFriend); err != nil {
		return err
	}
	return nil
}

type GotoPlayerResponse struct {
	ZoneName          string
	TargetCharacterID uint64
	ZoneID            uint64
	OriginatorID      uint64
	Error             uint32
}

func (s *GotoPlayerResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 30+len(s.ZoneName)))
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	return b.Bytes()
}

func (s *GotoPlayerResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OriginatorID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type HarassmentReport struct {
	Count       int32
	CountToMute int32
}

func (s *HarassmentReport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *HarassmentReport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CountToMute); err != nil {
		return err
	}
	return nil
}

type IgnoreAdd struct {
	CharacterName string
	ListOwnerGID  uint64
	CharacterGID  uint64
	GameObjectGID uint64
	Forwarded     uint8
}

func (s *IgnoreAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 27+len(s.CharacterName)))
	binary.Write(b, binary.LittleEndian, s.CharacterName)
	return b.Bytes()
}

func (s *IgnoreAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectGID); err != nil {
		return err
	}
	if s.CharacterName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type IgnoreDrop struct {
	ListOwnerGID  uint64
	CharacterGID  uint64
	GameObjectGID uint64
	Forwarded     uint8
}

func (s *IgnoreDrop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	return b.Bytes()
}

func (s *IgnoreDrop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type IgnoreList struct {
	ListData     string
	ListOwnerGID uint64
	Add          uint8
}

func (s *IgnoreList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.ListData)))
	binary.Write(b, binary.LittleEndian, s.ListData)
	return b.Bytes()
}

func (s *IgnoreList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if s.ListData, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	return nil
}

type InteractObject struct {
	GlobalID   uint64
	TemplateID uint64
}

func (s *InteractObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *InteractObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type InteractOption struct {
	ObjectID    uint64
	OptionIndex int32
}

func (s *InteractOption) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *InteractOption) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OptionIndex); err != nil {
		return err
	}
	return nil
}

type INVENTORYBEHAVIORADDITEM struct {
	SerializedItem string
	GlobalID       uint64
}

func (s *INVENTORYBEHAVIORADDITEM) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.SerializedItem)))
	binary.Write(b, binary.LittleEndian, s.SerializedItem)
	return b.Bytes()
}

func (s *INVENTORYBEHAVIORADDITEM) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.SerializedItem, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type INVENTORYBEHAVIORREMOVEITEM struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *INVENTORYBEHAVIORREMOVEITEM) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *INVENTORYBEHAVIORREMOVEITEM) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type INVENTORYBEHAVIORTRADEITEM struct {
	GlobalID uint64
	ItemID   uint64
	Trading  int32
}

func (s *INVENTORYBEHAVIORTRADEITEM) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *INVENTORYBEHAVIORTRADEITEM) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Trading); err != nil {
		return err
	}
	return nil
}

type InviteFriend struct {
	Locale        string
	FriendEmail   string
	FriendName    string
	YourName      string
	PromoID       string
	SendInEnglish uint8
}

func (s *InviteFriend) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.PromoID)+len(s.YourName)+len(s.FriendName)+len(s.FriendEmail)+len(s.Locale)))
	binary.Write(b, binary.LittleEndian, s.PromoID)
	binary.Write(b, binary.LittleEndian, s.YourName)
	binary.Write(b, binary.LittleEndian, s.FriendName)
	binary.Write(b, binary.LittleEndian, s.FriendEmail)
	binary.Write(b, binary.LittleEndian, s.Locale)
	return b.Bytes()
}

func (s *InviteFriend) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PromoID, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.YourName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.FriendName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.FriendEmail, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Locale, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SendInEnglish); err != nil {
		return err
	}
	return nil
}

type InviteResponse struct {
	ErrorDesc string
	Success   int32
}

func (s *InviteResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.ErrorDesc)))
	binary.Write(b, binary.LittleEndian, s.ErrorDesc)
	return b.Bytes()
}

func (s *InviteResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.ErrorDesc, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type JoinChannelResponse struct {
	ChannelName string
	SourceID    uint64
	ParentID    uint64
	ChannelID   uint64
	RecipientID uint64
	ErrorCode   uint8
	ChannelType uint8
}

func (s *JoinChannelResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 36+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.ChannelName)
	return b.Bytes()
}

func (s *JoinChannelResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if s.ChannelName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RecipientID); err != nil {
		return err
	}
	return nil
}

type JOINSESSION struct {
	ZoneID    uint64
	SessionID uint64
}

func (s *JOINSESSION) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *JOINSESSION) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	return nil
}

type Jump struct {
	ExcludeOriginator uint8
}

func (s *Jump) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *Jump) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ExcludeOriginator); err != nil {
		return err
	}
	return nil
}

type KILLCLIENTPROCESS struct {
	JobID uint32
}

func (s *KILLCLIENTPROCESS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *KILLCLIENTPROCESS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	return nil
}

type LADDER struct {
	LadderData     string
	CharacterID    uint64
	TourneyCredits uint32
}

func (s *LADDER) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.LadderData)))
	binary.Write(b, binary.LittleEndian, s.LadderData)
	return b.Bytes()
}

func (s *LADDER) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.LadderData, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TourneyCredits); err != nil {
		return err
	}
	return nil
}

type LeaveChannelResponse struct {
	ChannelName string
	SourceID    uint64
	ParentID    uint64
	ChannelID   uint64
	RecipientID uint64
	ChannelType uint8
	ErrorCode   uint8
}

func (s *LeaveChannelResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 36+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.ChannelName)
	return b.Bytes()
}

func (s *LeaveChannelResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if s.ChannelName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RecipientID); err != nil {
		return err
	}
	return nil
}

type LeaveHousingLot struct {
}

func (s *LeaveHousingLot) Marshal() []byte {
	return []byte{}
}

func (s *LeaveHousingLot) Unmarshal(data []byte) error {
	return nil
}

type LeaveServiceRange struct {
	MobileID uint64
}

func (s *LeaveServiceRange) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *LeaveServiceRange) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	return nil
}

type LeaveState struct {
	GameObjectID uint64
	State        uint32
}

func (s *LeaveState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *LeaveState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	return nil
}

type LOADSAVEOBJECTS struct {
	Filename string
	Save     uint8
}

func (s *LOADSAVEOBJECTS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Filename)))
	binary.Write(b, binary.LittleEndian, s.Filename)
	return b.Bytes()
}

func (s *LOADSAVEOBJECTS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Filename, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Save); err != nil {
		return err
	}
	return nil
}

type LoginComplete struct {
	ZoneName                     string
	RealmName                    string
	CriticalObjects              string
	Data                         string
	ZoneServer                   string
	ZoneID                       uint64
	AltMusicFile                 uint32
	ServerTime                   uint32
	Permissions                  uint32
	DisableBeastmoonGroups       uint32
	DynamicServerProcID          uint32
	IsCSR                        int32
	SubscriberCrownsPricePercent int32
	UseFriendFinder              int32
	DynamicZoneID                uint32
	HourOffset                   uint32
	ShowSubscriberIcon           uint8
	ZoneHasFriendlyPlayers       uint8
	IsBossMarkZone               uint8
	TestServer                   uint8
	PickUpAllEnabled             uint8
	SegmentedMessage             uint8
	LastSegment                  uint8
}

func (s *LoginComplete) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 65+len(s.ZoneName)+len(s.Data)+len(s.ZoneServer)+len(s.RealmName)+len(s.CriticalObjects)))
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.Data)
	binary.Write(b, binary.LittleEndian, s.ZoneServer)
	binary.Write(b, binary.LittleEndian, s.RealmName)
	binary.Write(b, binary.LittleEndian, s.CriticalObjects)
	return b.Bytes()
}

func (s *LoginComplete) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ServerTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicServerProcID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsCSR); err != nil {
		return err
	}
	if s.ZoneServer, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TestServer); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AltMusicFile); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ShowSubscriberIcon); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SubscriberCrownsPricePercent); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseFriendFinder); err != nil {
		return err
	}
	if s.RealmName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsBossMarkZone); err != nil {
		return err
	}
	if s.CriticalObjects, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneHasFriendlyPlayers); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HourOffset); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DisableBeastmoonGroups); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PickUpAllEnabled); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SegmentedMessage); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LastSegment); err != nil {
		return err
	}
	return nil
}

type MailData struct {
	Data string
}

func (s *MailData) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *MailData) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type MarkLocation struct {
}

func (s *MarkLocation) Marshal() []byte {
	return []byte{}
}

func (s *MarkLocation) Unmarshal(data []byte) error {
	return nil
}

type MarkLocationResponse struct {
	MarkType          string
	CommonsZoneId     string
	ZoneDisplayNameId string
	ZoneName          string
	InstanceId        uint64
	LocationX         float32
	LocationY         float32
	LocationZ         float32
	Direction         float32
	Result            int8
	ZoneType          int8
}

func (s *MarkLocationResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 34+len(s.ZoneName)+len(s.ZoneDisplayNameId)+len(s.CommonsZoneId)+len(s.MarkType)))
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.ZoneDisplayNameId)
	binary.Write(b, binary.LittleEndian, s.CommonsZoneId)
	binary.Write(b, binary.LittleEndian, s.MarkType)
	return b.Bytes()
}

func (s *MarkLocationResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Result); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ZoneDisplayNameId, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.InstanceId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if s.CommonsZoneId, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.MarkType, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type MatchAward struct {
	AwardData   string
	CharacterID uint64
}

func (s *MatchAward) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.AwardData)))
	binary.Write(b, binary.LittleEndian, s.AwardData)
	return b.Bytes()
}

func (s *MatchAward) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.AwardData, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type MatchInvite struct {
	MatchActor       string
	CharacterID      uint64
	TournamentNameID uint32
}

func (s *MatchInvite) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.MatchActor)))
	binary.Write(b, binary.LittleEndian, s.MatchActor)
	return b.Bytes()
}

func (s *MatchInvite) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if s.MatchActor, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type MatchMakerUpdate struct {
	UpdateMessage    string
	RegistrationInfo string
	BracketInfo      string
	MatchActor       string
	MatchTeam        string
	CharacterID      uint64
	Status           uint8
}

func (s *MatchMakerUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.MatchTeam)+len(s.MatchActor)+len(s.BracketInfo)+len(s.RegistrationInfo)+len(s.UpdateMessage)))
	binary.Write(b, binary.LittleEndian, s.MatchTeam)
	binary.Write(b, binary.LittleEndian, s.MatchActor)
	binary.Write(b, binary.LittleEndian, s.BracketInfo)
	binary.Write(b, binary.LittleEndian, s.RegistrationInfo)
	binary.Write(b, binary.LittleEndian, s.UpdateMessage)
	return b.Bytes()
}

func (s *MatchMakerUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.MatchTeam, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.MatchActor, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.BracketInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.RegistrationInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.UpdateMessage, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type MatchReady struct {
	MatchActor       string
	ZoneName         string
	CharacterID      uint64
	ZoneID           uint64
	TournamentNameID uint32
}

func (s *MatchReady) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.ZoneName)+len(s.MatchActor)))
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.MatchActor)
	return b.Bytes()
}

func (s *MatchReady) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if s.MatchActor, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type MatchResult struct {
	AwardData   string
	ResultData  string
	CharacterID uint64
}

func (s *MatchResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.ResultData)+len(s.AwardData)))
	binary.Write(b, binary.LittleEndian, s.ResultData)
	binary.Write(b, binary.LittleEndian, s.AwardData)
	return b.Bytes()
}

func (s *MatchResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.ResultData, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.AwardData, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type MESSAGEPROCESS struct {
	Message string
	JobID   uint32
}

func (s *MESSAGEPROCESS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *MESSAGEPROCESS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type MoveCorrection struct {
	LocationX float32
	LocationY float32
	LocationZ float32
	Direction float32
}

func (s *MoveCorrection) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *MoveCorrection) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	return nil
}

type MoveState struct {
	GlobalID uint64
	NewState int8
}

func (s *MoveState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *MoveState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewState); err != nil {
		return err
	}
	return nil
}

type Mute struct {
	MuteTime     string
	ForceMessage uint8
}

func (s *Mute) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.MuteTime)))
	binary.Write(b, binary.LittleEndian, s.MuteTime)
	return b.Bytes()
}

func (s *Mute) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.MuteTime, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ForceMessage); err != nil {
		return err
	}
	return nil
}

type MuteRsp struct {
	MuteType string
	MuteTime string
	MutedID  string
	Success  uint8
}

func (s *MuteRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.MutedID)+len(s.MuteTime)+len(s.MuteType)))
	binary.Write(b, binary.LittleEndian, s.MutedID)
	binary.Write(b, binary.LittleEndian, s.MuteTime)
	binary.Write(b, binary.LittleEndian, s.MuteType)
	return b.Bytes()
}

func (s *MuteRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.MutedID, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.MuteTime, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.MuteType, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type NewObject struct {
	Data string
}

func (s *NewObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *NewObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type NewSysStats struct {
	CpuUsage int32
	VMemUsed int32
	RMemUsed int32
}

func (s *NewSysStats) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *NewSysStats) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CpuUsage); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VMemUsed); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RMemUsed); err != nil {
		return err
	}
	return nil
}

type NewTickCnt struct {
	TickCnt int32
}

func (s *NewTickCnt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *NewTickCnt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TickCnt); err != nil {
		return err
	}
	return nil
}

type NewTourneyRewards struct {
	TourneyNameSTKey string
	Data             string
	BracketID        uint64
}

func (s *NewTourneyRewards) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.Data)+len(s.TourneyNameSTKey)))
	binary.Write(b, binary.LittleEndian, s.Data)
	binary.Write(b, binary.LittleEndian, s.TourneyNameSTKey)
	return b.Bytes()
}

func (s *NewTourneyRewards) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BracketID); err != nil {
		return err
	}
	if s.TourneyNameSTKey, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type NewMail struct {
	CharacterID uint64
	MailType    int32
	AccountMail uint8
}

func (s *NewMail) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *NewMail) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MailType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AccountMail); err != nil {
		return err
	}
	return nil
}

type NotifyChannelInstance struct {
	Name        string
	RecipientID uint64
	ParentID    uint64
	ID          uint64
	Create      uint8
}

func (s *NotifyChannelInstance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 27+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.Name)
	return b.Bytes()
}

func (s *NotifyChannelInstance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RecipientID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ID); err != nil {
		return err
	}
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Create); err != nil {
		return err
	}
	return nil
}

type NotifyGift struct {
	Gift          int32
	CrownsRewards int32
	PeriodicItems int32
}

func (s *NotifyGift) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *NotifyGift) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Gift); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CrownsRewards); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PeriodicItems); err != nil {
		return err
	}
	return nil
}

type NotMuted struct {
}

func (s *NotMuted) Marshal() []byte {
	return []byte{}
}

func (s *NotMuted) Unmarshal(data []byte) error {
	return nil
}

type NotAfk struct {
}

func (s *NotAfk) Marshal() []byte {
	return []byte{}
}

func (s *NotAfk) Unmarshal(data []byte) error {
	return nil
}

type NPCSpeech struct {
	Sound         string
	Talk          string
	TargetName    string
	SourceName    string
	SourceID      uint64
	TargetID      uint64
	WidthOverride int32
}

func (s *NPCSpeech) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28+len(s.SourceName)+len(s.TargetName)+len(s.Talk)+len(s.Sound)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.TargetName)
	binary.Write(b, binary.LittleEndian, s.Talk)
	binary.Write(b, binary.LittleEndian, s.Sound)
	return b.Bytes()
}

func (s *NPCSpeech) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.TargetName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if s.Talk, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Sound, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WidthOverride); err != nil {
		return err
	}
	return nil
}

type ObjectInfoQuery struct {
	Info  string
	Part  int32
	Total int32
	Size  int32
}

func (s *ObjectInfoQuery) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Info)))
	binary.Write(b, binary.LittleEndian, s.Info)
	return b.Bytes()
}

func (s *ObjectInfoQuery) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Info, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Part); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Total); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Size); err != nil {
		return err
	}
	return nil
}

type PartyDisband struct {
	DestinationCharacterID uint64
}

func (s *PartyDisband) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *PartyDisband) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	return nil
}

type PartyJoinFailed struct {
	DestinationCharacterID uint64
	ErrorCode              int32
}

func (s *PartyJoinFailed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *PartyJoinFailed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	return nil
}

type PartyJoinNotification struct {
	DestinationCharacterID uint64
	ChannelID              uint64
	PartyID                uint64
	PartyTotalSize         uint32
	FromAdventureParty     uint8
}

func (s *PartyJoinNotification) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 29))
	return b.Bytes()
}

func (s *PartyJoinNotification) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyTotalSize); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	return nil
}

type PartyLeave struct {
	SourceCharacterID uint64
}

func (s *PartyLeave) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *PartyLeave) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	return nil
}

type PartyLeaveNotification struct {
	DestinationCharacterID uint64
	CharacterID            uint64
	PartyTotalSize         uint32
	FromAdventureParty     uint8
}

func (s *PartyLeaveNotification) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	return b.Bytes()
}

func (s *PartyLeaveNotification) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyTotalSize); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	return nil
}

type PartyLevelUp struct {
	CharacterID uint64
	NewLevel    int32
}

func (s *PartyLevelUp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *PartyLevelUp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewLevel); err != nil {
		return err
	}
	return nil
}

type PartyLevelUpUpdate struct {
	DestinationCharacterID uint64
	CharacterID            uint64
	NewLevel               int32
}

func (s *PartyLevelUpUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *PartyLevelUpUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewLevel); err != nil {
		return err
	}
	return nil
}

type PartyMultiPlayerMountEquip struct {
	SourceCharacterID uint64
	MountTemplateID   uint64
}

func (s *PartyMultiPlayerMountEquip) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PartyMultiPlayerMountEquip) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountTemplateID); err != nil {
		return err
	}
	return nil
}

type PartyMultiPlayerMountEquipUpdate struct {
	DestinationCharacterID uint64
	SourceCharacterID      uint64
	MountTemplateID        uint64
}

func (s *PartyMultiPlayerMountEquipUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *PartyMultiPlayerMountEquipUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountTemplateID); err != nil {
		return err
	}
	return nil
}

type PartyMultiPlayerMountJoin struct {
	SourceCharacterID     uint64
	MountOwnerCharacterID uint64
	MountTemplateID       uint64
}

func (s *PartyMultiPlayerMountJoin) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *PartyMultiPlayerMountJoin) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountOwnerCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountTemplateID); err != nil {
		return err
	}
	return nil
}

type PartyMultiPlayerMountJoinUpdate struct {
	DestinationCharacterID uint64
	SourceCharacterID      uint64
	MountOwnerCharacterID  uint64
	MountTemplateID        uint64
}

func (s *PartyMultiPlayerMountJoinUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 32))
	return b.Bytes()
}

func (s *PartyMultiPlayerMountJoinUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountOwnerCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountTemplateID); err != nil {
		return err
	}
	return nil
}

type PartyRequestAccept struct {
	SourceCharacterID uint64
	PartyID           uint64
}

func (s *PartyRequestAccept) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PartyRequestAccept) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	return nil
}

type PartyRequestDecline struct {
	SourceCharacterID uint64
	PartyID           uint64
}

func (s *PartyRequestDecline) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PartyRequestDecline) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	return nil
}

type PartyRequestInvite struct {
	SourceCharacterID  uint64
	SourceGlobalID     uint64
	TargetCharacterID  uint64
	TargetGlobalID     uint64
	FromAdventureParty uint8
}

func (s *PartyRequestInvite) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 33))
	return b.Bytes()
}

func (s *PartyRequestInvite) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	return nil
}

type PartyRequestJoin struct {
	PlayerNameBlob         string
	DestinationCharacterID uint64
	CharacterID            uint64
	GlobalID               uint64
	PartyID                uint64
	FriendsOnly            int32
}

func (s *PartyRequestJoin) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 38+len(s.PlayerNameBlob)))
	binary.Write(b, binary.LittleEndian, s.PlayerNameBlob)
	return b.Bytes()
}

func (s *PartyRequestJoin) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.PlayerNameBlob, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendsOnly); err != nil {
		return err
	}
	return nil
}

type PartyRequestMemberZones struct {
	PartyID           uint64
	SourceCharacterID uint64
}

func (s *PartyRequestMemberZones) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PartyRequestMemberZones) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	return nil
}

type PartyRequestResponse struct {
	PlayerNameBlob         string
	DestinationCharacterID uint64
	TargetCharacterID      uint64
	TargetGlobalID         uint64
	ErrorCode              int32
}

func (s *PartyRequestResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 30+len(s.PlayerNameBlob)))
	binary.Write(b, binary.LittleEndian, s.PlayerNameBlob)
	return b.Bytes()
}

func (s *PartyRequestResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if s.PlayerNameBlob, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PartyRequestTimeout struct {
	DestinationCharacterID uint64
}

func (s *PartyRequestTimeout) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *PartyRequestTimeout) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	return nil
}

type PartySubmitMemberZones struct {
	PartyMemberZones       string
	DestinationCharacterID uint64
}

func (s *PartySubmitMemberZones) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.PartyMemberZones)))
	binary.Write(b, binary.LittleEndian, s.PartyMemberZones)
	return b.Bytes()
}

func (s *PartySubmitMemberZones) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PartyMemberZones, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	return nil
}

type PartyUpdate struct {
	PlayerNameBlob         string
	ZoneDisplayName        string
	GlobalID               uint64
	DestinationCharacterID uint64
	CharacterID            uint64
	LeaderGID              uint64
	QuestGID               uint64
	GoalGID                uint64
	SchoolID               uint32
	Level                  uint32
	PartyTotalSize         uint32
	SigilSlot              uint32
	HasFilteredChat        uint8
	FromAdventureParty     uint8
}

func (s *PartyUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 70+len(s.PlayerNameBlob)+len(s.ZoneDisplayName)))
	binary.Write(b, binary.LittleEndian, s.PlayerNameBlob)
	binary.Write(b, binary.LittleEndian, s.ZoneDisplayName)
	return b.Bytes()
}

func (s *PartyUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if s.PlayerNameBlob, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SchoolID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Level); err != nil {
		return err
	}
	if s.ZoneDisplayName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HasFilteredChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyTotalSize); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SigilSlot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LeaderGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.QuestGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GoalGID); err != nil {
		return err
	}
	return nil
}

type PartyZoneRequest struct {
	CharacterID uint64
}

func (s *PartyZoneRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *PartyZoneRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type PartyZoneRequestResponse struct {
	CharacterID        uint64
	PartyID            uint64
	PartyTotalSize     uint32
	FromAdventureParty uint8
}

func (s *PartyZoneRequestResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	return b.Bytes()
}

func (s *PartyZoneRequestResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyTotalSize); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	return nil
}

type PickUpObject struct {
	GameObjectID uint64
}

func (s *PickUpObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *PickUpObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	return nil
}

type PlaceObject struct {
	GlobalID   uint64
	TemplateID uint64
}

func (s *PlaceObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PlaceObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type PlayCinematic struct {
	Asset              string
	CinematicID        uint64
	TargetID           uint64
	Start_X            float32
	Start_Y            float32
	Start_Z            float32
	End_X              float32
	End_Y              float32
	End_Z              float32
	DisableInteraction uint8
}

func (s *PlayCinematic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 43+len(s.Asset)))
	binary.Write(b, binary.LittleEndian, s.Asset)
	return b.Bytes()
}

func (s *PlayCinematic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CinematicID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_X); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_Y); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_Z); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.End_X); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.End_Y); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.End_Z); err != nil {
		return err
	}
	if s.Asset, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DisableInteraction); err != nil {
		return err
	}
	return nil
}

type PlayerBlackballedAlert struct {
	CharacterID uint64
	Muted       int8
}

func (s *PlayerBlackballedAlert) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *PlayerBlackballedAlert) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Muted); err != nil {
		return err
	}
	return nil
}

type PlayerReadyAck struct {
	CharacterID      uint64
	BracketID        uint64
	TournamentNameID uint32
	MatchNameID      uint32
	Online           uint8
}

func (s *PlayerReadyAck) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	return b.Bytes()
}

func (s *PlayerReadyAck) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MatchNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BracketID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Online); err != nil {
		return err
	}
	return nil
}

type PlaySound struct {
	SoundFilename     string
	SoundID           uint64
	ReinteractTime    float32
	StartDelay        float32
	PlayAtMusicVolume uint8
}

func (s *PlaySound) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.SoundFilename)))
	binary.Write(b, binary.LittleEndian, s.SoundFilename)
	return b.Bytes()
}

func (s *PlaySound) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SoundID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ReinteractTime); err != nil {
		return err
	}
	if s.SoundFilename, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StartDelay); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayAtMusicVolume); err != nil {
		return err
	}
	return nil
}

type PostZoneEventFromClient struct {
	EventName string
}

func (s *PostZoneEventFromClient) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.EventName)))
	binary.Write(b, binary.LittleEndian, s.EventName)
	return b.Bytes()
}

func (s *PostZoneEventFromClient) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.EventName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PreviewIsland struct {
	TemplateID uint32
}

func (s *PreviewIsland) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *PreviewIsland) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type PvPUpdateInfo struct {
	TournamentInfo string
	CharacterID    uint64
	DiffType       uint32
	PromptMsg      uint8
	IsPvPQueue     uint8
}

func (s *PvPUpdateInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.TournamentInfo)))
	binary.Write(b, binary.LittleEndian, s.TournamentInfo)
	return b.Bytes()
}

func (s *PvPUpdateInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.TournamentInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PromptMsg); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DiffType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsPvPQueue); err != nil {
		return err
	}
	return nil
}

type QueryLogout struct {
	IsInstance uint8
}

func (s *QueryLogout) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *QueryLogout) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.IsInstance); err != nil {
		return err
	}
	return nil
}

type RadialChat struct {
	Message    string
	SourceName string
	SourceID   uint64
	Filter     uint8
}

func (s *RadialChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13+len(s.SourceName)+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *RadialChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	return nil
}

type RadialQuickChat struct {
	SourceName string
	SourceID   uint64
	MessageID  uint32
	Filter     uint8
}

func (s *RadialQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 15+len(s.SourceName)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	return b.Bytes()
}

func (s *RadialQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	return nil
}

type RadialQuickChatExt struct {
	Message    string
	SourceName string
	SourceID   uint64
	Filter     uint8
}

func (s *RadialQuickChatExt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13+len(s.SourceName)+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *RadialQuickChatExt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	return nil
}

type RadialZoneClusterQuickChat struct {
	SourceName string
	SourceID   uint64
	MessageID  uint32
	Filter     uint8
	IsOwner    uint8
}

func (s *RadialZoneClusterQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.SourceName)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	return b.Bytes()
}

func (s *RadialZoneClusterQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsOwner); err != nil {
		return err
	}
	return nil
}

type RANKING struct {
	Name        string
	CharacterID uint64
	GameID      uint32
	Score       int32
	Rank        int32
}

func (s *RANKING) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.Name)
	return b.Bytes()
}

func (s *RANKING) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameID); err != nil {
		return err
	}
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Score); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Rank); err != nil {
		return err
	}
	return nil
}

type RealmInfoQuery struct {
	CurrentZone      string
	InstanceInfoList string
	CurrentRealm     string
	RealmInfoList    string
}

func (s *RealmInfoQuery) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8+len(s.RealmInfoList)+len(s.CurrentRealm)+len(s.InstanceInfoList)+len(s.CurrentZone)))
	binary.Write(b, binary.LittleEndian, s.RealmInfoList)
	binary.Write(b, binary.LittleEndian, s.CurrentRealm)
	binary.Write(b, binary.LittleEndian, s.InstanceInfoList)
	binary.Write(b, binary.LittleEndian, s.CurrentZone)
	return b.Bytes()
}

func (s *RealmInfoQuery) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.RealmInfoList, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.CurrentRealm, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.InstanceInfoList, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.CurrentZone, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RecallLocation struct {
}

func (s *RecallLocation) Marshal() []byte {
	return []byte{}
}

func (s *RecallLocation) Unmarshal(data []byte) error {
	return nil
}

type ReceiveGifts struct {
	Data          string
	Success       int32
	CrownsRewards int32
	PeriodicItems int32
}

func (s *ReceiveGifts) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *ReceiveGifts) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CrownsRewards); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PeriodicItems); err != nil {
		return err
	}
	return nil
}

type ReceivePromotions struct {
	Data    string
	Success int32
}

func (s *ReceivePromotions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *ReceivePromotions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RedeemGift struct {
	GiftID               string
	BundleChoiceID       uint64
	PrimaryColorIndex    int32
	RedeemElixirEquipNow uint32
	IsPeriodicItem       uint8
}

func (s *RedeemGift) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.GiftID)))
	binary.Write(b, binary.LittleEndian, s.GiftID)
	return b.Bytes()
}

func (s *RedeemGift) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.GiftID, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BundleChoiceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PrimaryColorIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsPeriodicItem); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RedeemElixirEquipNow); err != nil {
		return err
	}
	return nil
}

type RedeemMailGift struct {
	MailId            uint64
	PrimaryColorIndex int32
}

func (s *RedeemMailGift) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *RedeemMailGift) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MailId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PrimaryColorIndex); err != nil {
		return err
	}
	return nil
}

type RedeemMailGiftResponse struct {
	MailId     uint64
	TemplateId uint64
	ErrorCode  int32
}

func (s *RedeemMailGiftResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *RedeemMailGiftResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MailId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateId); err != nil {
		return err
	}
	return nil
}

type ReleaseDelay struct {
}

func (s *ReleaseDelay) Marshal() []byte {
	return []byte{}
}

func (s *ReleaseDelay) Unmarshal(data []byte) error {
	return nil
}

type ReloadTemplateDir struct {
	Directory string
	Recursive int8
}

func (s *ReloadTemplateDir) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Directory)))
	binary.Write(b, binary.LittleEndian, s.Directory)
	return b.Bytes()
}

func (s *ReloadTemplateDir) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Directory, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Recursive); err != nil {
		return err
	}
	return nil
}

type RemovedShopper struct {
	StateName string
}

func (s *RemovedShopper) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.StateName)))
	binary.Write(b, binary.LittleEndian, s.StateName)
	return b.Bytes()
}

func (s *RemovedShopper) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.StateName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RemoveEffect struct {
	GameObjectID uint64
	EffectNameID uint32
	InternalID   int32
}

func (s *RemoveEffect) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *RemoveEffect) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EffectNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.InternalID); err != nil {
		return err
	}
	return nil
}

type RemoveItemRequest struct {
	GlobalID       uint64
	ItemTemplateID uint64
	Quantity       int32
}

func (s *RemoveItemRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *RemoveItemRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type RemoveObject struct {
	GameObjectID uint64
}

func (s *RemoveObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *RemoveObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	return nil
}

type RemoveParticle struct {
	AttachTo string
	NewName  string
	ParentID uint64
}

func (s *RemoveParticle) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.NewName)+len(s.AttachTo)))
	binary.Write(b, binary.LittleEndian, s.NewName)
	binary.Write(b, binary.LittleEndian, s.AttachTo)
	return b.Bytes()
}

func (s *RemoveParticle) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.NewName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.AttachTo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	return nil
}

type RemoveZoneTimer struct {
	TimerID int32
}

func (s *RemoveZoneTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *RemoveZoneTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TimerID); err != nil {
		return err
	}
	return nil
}

type ReportAdTakeover struct {
	URL     string
	PARTNER string
}

func (s *ReportAdTakeover) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.PARTNER)+len(s.URL)))
	binary.Write(b, binary.LittleEndian, s.PARTNER)
	binary.Write(b, binary.LittleEndian, s.URL)
	return b.Bytes()
}

func (s *ReportAdTakeover) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PARTNER, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.URL, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ReqAskServer struct {
	Requirement string
	RequestID   uint32
	Response    uint32
}

func (s *ReqAskServer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Requirement)))
	binary.Write(b, binary.LittleEndian, s.Requirement)
	return b.Bytes()
}

func (s *ReqAskServer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RequestID); err != nil {
		return err
	}
	if s.Requirement, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Response); err != nil {
		return err
	}
	return nil
}

type ReqChatDiagnostics struct {
	Data        string
	CharacterID uint64
}

func (s *ReqChatDiagnostics) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *ReqChatDiagnostics) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestAdvanceChannelInstance struct {
	SourceID  uint64
	ChannelID uint64
}

func (s *RequestAdvanceChannelInstance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *RequestAdvanceChannelInstance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	return nil
}

type RequestChatCode struct {
	NameBlob     string
	Code         string
	ListOwnerGID uint64
	CodeTime     int32
	SpecialCode  int32
	Forwarded    uint8
}

func (s *RequestChatCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21+len(s.Code)+len(s.NameBlob)))
	binary.Write(b, binary.LittleEndian, s.Code)
	binary.Write(b, binary.LittleEndian, s.NameBlob)
	return b.Bytes()
}

func (s *RequestChatCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if s.Code, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CodeTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpecialCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if s.NameBlob, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestCreateChannel struct {
	Password      string
	Name          string
	SourceID      uint64
	Flags         uint32
	ChatInfoFlags uint32
	UserLimit     int32
}

func (s *RequestCreateChannel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.Name)+len(s.Password)))
	binary.Write(b, binary.LittleEndian, s.Name)
	binary.Write(b, binary.LittleEndian, s.Password)
	return b.Bytes()
}

func (s *RequestCreateChannel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Password, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChatInfoFlags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserLimit); err != nil {
		return err
	}
	return nil
}

type RequestDirectedChat struct {
	Message  string
	TargetID uint64
}

func (s *RequestDirectedChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *RequestDirectedChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	return nil
}

type RequestDirectedChatByName struct {
	TargetName string
	Message    string
}

func (s *RequestDirectedChatByName) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Message)+len(s.TargetName)))
	binary.Write(b, binary.LittleEndian, s.Message)
	binary.Write(b, binary.LittleEndian, s.TargetName)
	return b.Bytes()
}

func (s *RequestDirectedChatByName) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.TargetName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestDirectedQuickChat struct {
	TargetID  uint64
	MessageID uint32
}

func (s *RequestDirectedQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *RequestDirectedQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	return nil
}

type RequestDirectedQuickChatExt struct {
	Message  string
	TargetID uint64
}

func (s *RequestDirectedQuickChatExt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *RequestDirectedQuickChatExt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestJoinChannel struct {
	Password  string
	SourceID  uint64
	ChannelID uint64
}

func (s *RequestJoinChannel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.Password)))
	binary.Write(b, binary.LittleEndian, s.Password)
	return b.Bytes()
}

func (s *RequestJoinChannel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if s.Password, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestJoinChannelByName struct {
	Password    string
	ChannelName string
	SourceID    uint64
}

func (s *RequestJoinChannelByName) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.ChannelName)+len(s.Password)))
	binary.Write(b, binary.LittleEndian, s.ChannelName)
	binary.Write(b, binary.LittleEndian, s.Password)
	return b.Bytes()
}

func (s *RequestJoinChannelByName) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.ChannelName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Password, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestLeaveChannel struct {
	SourceID  uint64
	ChannelID uint64
}

func (s *RequestLeaveChannel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *RequestLeaveChannel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	return nil
}

type RequestLeaveChannelByName struct {
	ChannelName string
	SourceID    uint64
}

func (s *RequestLeaveChannelByName) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.ChannelName)
	return b.Bytes()
}

func (s *RequestLeaveChannelByName) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.ChannelName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestMaxFriends struct {
	RequestingPlayerGID      uint64
	MaximumFriends           int32
	MaximumSubscriberFriends int32
}

func (s *RequestMaxFriends) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *RequestMaxFriends) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RequestingPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaximumFriends); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaximumSubscriberFriends); err != nil {
		return err
	}
	return nil
}

type RequestRadialChat struct {
	Message string
}

func (s *RequestRadialChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *RequestRadialChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestRadialFriendChat struct {
	SourceName string
	Message    string
	PlayerGID  uint64
	SourceID   uint64
	Filter     uint8
}

func (s *RequestRadialFriendChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21+len(s.Message)+len(s.SourceName)))
	binary.Write(b, binary.LittleEndian, s.Message)
	binary.Write(b, binary.LittleEndian, s.SourceName)
	return b.Bytes()
}

func (s *RequestRadialFriendChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestRadialFriendQuickChat struct {
	SourceName string
	PlayerGID  uint64
	SourceID   uint64
	MessageID  uint32
	Filter     uint8
}

func (s *RequestRadialFriendQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23+len(s.SourceName)))
	binary.Write(b, binary.LittleEndian, s.SourceName)
	return b.Bytes()
}

func (s *RequestRadialFriendQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestRadialOwnerChat struct {
	SourceName string
	Message    string
	SourceID   uint64
	Filter     uint8
	IsOwner    uint8
}

func (s *RequestRadialOwnerChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Message)+len(s.SourceName)))
	binary.Write(b, binary.LittleEndian, s.Message)
	binary.Write(b, binary.LittleEndian, s.SourceName)
	return b.Bytes()
}

func (s *RequestRadialOwnerChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if s.SourceName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsOwner); err != nil {
		return err
	}
	return nil
}

type RequestRadialQuickChat struct {
	MessageID uint32
}

func (s *RequestRadialQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *RequestRadialQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	return nil
}

type RequestRadialQuickChatExt struct {
	Message string
}

func (s *RequestRadialQuickChatExt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *RequestRadialQuickChatExt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestSession struct {
	Whitelist string
	STEAMID   string
	Session   string
	ID        int32
	CRC       uint32
	Threshold uint32
	Valid     uint8
}

func (s *RequestSession) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.Session)+len(s.STEAMID)+len(s.Whitelist)))
	binary.Write(b, binary.LittleEndian, s.Session)
	binary.Write(b, binary.LittleEndian, s.STEAMID)
	binary.Write(b, binary.LittleEndian, s.Whitelist)
	return b.Bytes()
}

func (s *RequestSession) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Session, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Valid); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CRC); err != nil {
		return err
	}
	if s.STEAMID, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Whitelist, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Threshold); err != nil {
		return err
	}
	return nil
}

type RequestZoneClusterQuickChat struct {
	MessageID uint32
	IsOwner   uint8
}

func (s *RequestZoneClusterQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	return b.Bytes()
}

func (s *RequestZoneClusterQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsOwner); err != nil {
		return err
	}
	return nil
}

type RequestGifts struct {
	GiftType string
}

func (s *RequestGifts) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.GiftType)))
	binary.Write(b, binary.LittleEndian, s.GiftType)
	return b.Bytes()
}

func (s *RequestGifts) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.GiftType, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestPromotions struct {
	Locale string
}

func (s *RequestPromotions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Locale)))
	binary.Write(b, binary.LittleEndian, s.Locale)
	return b.Bytes()
}

func (s *RequestPromotions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Locale, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RestoreCharRsp struct {
	Success uint8
}

func (s *RestoreCharRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *RestoreCharRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type RetrieveMail struct {
}

func (s *RetrieveMail) Marshal() []byte {
	return []byte{}
}

func (s *RetrieveMail) Unmarshal(data []byte) error {
	return nil
}

type RetryTeleport struct {
}

func (s *RetryTeleport) Marshal() []byte {
	return []byte{}
}

func (s *RetryTeleport) Unmarshal(data []byte) error {
	return nil
}

type Script struct {
	Message   string
	ProcessID int32
}

func (s *Script) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *Script) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ProcessID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SelectBadge struct {
	BadgeNameID uint32
	Error       uint32
}

func (s *SelectBadge) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *SelectBadge) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.BadgeNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type SendChatCode struct {
	CreatorName  string
	Code         string
	ListOwnerGID uint64
	UseSuccess   uint64
	Error        uint32
}

func (s *SendChatCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.Code)+len(s.CreatorName)))
	binary.Write(b, binary.LittleEndian, s.Code)
	binary.Write(b, binary.LittleEndian, s.CreatorName)
	return b.Bytes()
}

func (s *SendChatCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if s.Code, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseSuccess); err != nil {
		return err
	}
	if s.CreatorName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SendInteractOptions struct {
	Options  string
	MobileID uint64
}

func (s *SendInteractOptions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Options)))
	binary.Write(b, binary.LittleEndian, s.Options)
	return b.Bytes()
}

func (s *SendInteractOptions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if s.Options, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SendText struct {
	Message     string
	CharacterID uint64
}

func (s *SendText) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *SendText) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ServerMove struct {
	LocationX uint16
	LocationY uint16
	LocationZ uint16
	MobileID  uint16
	Direction uint8
}

func (s *ServerMove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *ServerMove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	return nil
}

type ServerShutdown struct {
	Message uint32
}

func (s *ServerShutdown) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *ServerShutdown) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Message); err != nil {
		return err
	}
	return nil
}

type ServerTeleport struct {
	LocationX uint16
	LocationY uint16
	LocationZ uint16
	MobileID  uint16
	Direction uint8
}

func (s *ServerTeleport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *ServerTeleport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	return nil
}

type ServerTransfer struct {
	Location        string
	IP              string
	FallbackIP      string
	FallbackZone    string
	ZoneName        string
	SessionID       uint64
	TargetPlayerID  uint64
	ZoneID          uint64
	UserID          uint64
	CharID          uint64
	FallbackZoneID  uint64
	Slot            int32
	SessionSlot     int32
	UDPPort         int32
	FallbackTCPPort int32
	FallbackUDPPort int32
	FallbackKey     int32
	TCPPort         int32
	Key             int32
	TransitionID    uint32
}

func (s *ServerTransfer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 94+len(s.IP)+len(s.ZoneName)+len(s.Location)+len(s.FallbackIP)+len(s.FallbackZone)))
	binary.Write(b, binary.LittleEndian, s.IP)
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.Location)
	binary.Write(b, binary.LittleEndian, s.FallbackIP)
	binary.Write(b, binary.LittleEndian, s.FallbackZone)
	return b.Bytes()
}

func (s *ServerTransfer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.IP, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TCPPort); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UDPPort); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Key); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharID); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if s.Location, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Slot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionSlot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetPlayerID); err != nil {
		return err
	}
	if s.FallbackIP, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallbackTCPPort); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallbackUDPPort); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallbackKey); err != nil {
		return err
	}
	if s.FallbackZone, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallbackZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransitionID); err != nil {
		return err
	}
	return nil
}

type ServerTutorialCommand struct {
	Action         string
	EventToPost    string
	GoalToComplete string
	QuestToRemove  string
	QuestToAdd     string
	Value          int32
}

func (s *ServerTutorialCommand) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.QuestToAdd)+len(s.QuestToRemove)+len(s.GoalToComplete)+len(s.EventToPost)+len(s.Action)))
	binary.Write(b, binary.LittleEndian, s.QuestToAdd)
	binary.Write(b, binary.LittleEndian, s.QuestToRemove)
	binary.Write(b, binary.LittleEndian, s.GoalToComplete)
	binary.Write(b, binary.LittleEndian, s.EventToPost)
	binary.Write(b, binary.LittleEndian, s.Action)
	return b.Bytes()
}

func (s *ServerTutorialCommand) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.QuestToAdd, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.QuestToRemove, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.GoalToComplete, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.EventToPost, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Action, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Value); err != nil {
		return err
	}
	return nil
}

type ServerError struct {
	Error uint32
}

func (s *ServerError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *ServerError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type SERVERPROCESSRUNNING struct {
	PID   uint32
	JobID uint32
}

func (s *SERVERPROCESSRUNNING) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *SERVERPROCESSRUNNING) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	return nil
}

type SESSION struct {
	Rules       string
	Zone        string
	Name        string
	ZoneID      uint64
	SessionID   uint64
	Slots       int32
	ActiveSlots int32
}

func (s *SESSION) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 30+len(s.Name)+len(s.Zone)+len(s.Rules)))
	binary.Write(b, binary.LittleEndian, s.Name)
	binary.Write(b, binary.LittleEndian, s.Zone)
	binary.Write(b, binary.LittleEndian, s.Rules)
	return b.Bytes()
}

func (s *SESSION) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Slots); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ActiveSlots); err != nil {
		return err
	}
	if s.Zone, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Rules, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SESSIONERROR struct {
	ErrorCode int32
}

func (s *SESSIONERROR) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *SESSIONERROR) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	return nil
}

type SESSIONPLAYER struct {
	Ranking  string
	Name     string
	CharID   uint64
	Slot     int32
	IsFriend int32
}

func (s *SESSIONPLAYER) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20+len(s.Name)+len(s.Ranking)))
	binary.Write(b, binary.LittleEndian, s.Name)
	binary.Write(b, binary.LittleEndian, s.Ranking)
	return b.Bytes()
}

func (s *SESSIONPLAYER) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Slot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharID); err != nil {
		return err
	}
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Ranking, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsFriend); err != nil {
		return err
	}
	return nil
}

type SETHOUSECUSTOMIZATION struct {
	TextureFilename string
	TagName         string
	GameObjectID    uint64
}

func (s *SETHOUSECUSTOMIZATION) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.TagName)+len(s.TextureFilename)))
	binary.Write(b, binary.LittleEndian, s.TagName)
	binary.Write(b, binary.LittleEndian, s.TextureFilename)
	return b.Bytes()
}

func (s *SETHOUSECUSTOMIZATION) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.TagName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.TextureFilename, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SplitQuantity struct {
	GlobalID uint64
	ItemID   uint64
	Quantity int32
}

func (s *SplitQuantity) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *SplitQuantity) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type StartStagedCinematic struct {
	InitialStageName string
	CinematicName    string
	DuelID           uint64
	Start_X          float32
	Start_Y          float32
	Start_Z          float32
	Yaw              float32
	WinningTeamID    int8
}

func (s *StartStagedCinematic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 29+len(s.CinematicName)+len(s.InitialStageName)))
	binary.Write(b, binary.LittleEndian, s.CinematicName)
	binary.Write(b, binary.LittleEndian, s.InitialStageName)
	return b.Bytes()
}

func (s *StartStagedCinematic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.CinematicName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.InitialStageName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_X); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_Y); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_Z); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WinningTeamID); err != nil {
		return err
	}
	return nil
}

type STARTCLIENTPROCESS struct {
	ScriptName string
	OwnerGID   uint64
	JobID      uint32
}

func (s *STARTCLIENTPROCESS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.ScriptName)))
	binary.Write(b, binary.LittleEndian, s.ScriptName)
	return b.Bytes()
}

func (s *STARTCLIENTPROCESS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	if s.ScriptName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerGID); err != nil {
		return err
	}
	return nil
}

type STARTSERVERPROCESS struct {
	ScriptName string
	OwnerGID   uint64
	PID        uint32
}

func (s *STARTSERVERPROCESS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.ScriptName)))
	binary.Write(b, binary.LittleEndian, s.ScriptName)
	return b.Bytes()
}

func (s *STARTSERVERPROCESS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PID); err != nil {
		return err
	}
	if s.ScriptName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerGID); err != nil {
		return err
	}
	return nil
}

type SuboptimalBracketResponse struct {
	Choice uint32
}

func (s *SuboptimalBracketResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *SuboptimalBracketResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Choice); err != nil {
		return err
	}
	return nil
}

type TeleportToGameZone struct {
	Track          string
	Game           string
	CharacterID    uint64
	ZoneInstanceID uint64
}

func (s *TeleportToGameZone) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20+len(s.Game)+len(s.Track)))
	binary.Write(b, binary.LittleEndian, s.Game)
	binary.Write(b, binary.LittleEndian, s.Track)
	return b.Bytes()
}

func (s *TeleportToGameZone) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Game, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Track, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneInstanceID); err != nil {
		return err
	}
	return nil
}

type TournamentUpdate struct {
	Updates     string
	CharacterID uint64
}

func (s *TournamentUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Updates)))
	binary.Write(b, binary.LittleEndian, s.Updates)
	return b.Bytes()
}

func (s *TournamentUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Updates, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type TransferCharRsp struct {
	Success uint8
}

func (s *TransferCharRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *TransferCharRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type TransferInstance struct {
	ZoneID uint64
	Error  uint32
}

func (s *TransferInstance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *TransferInstance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type TransferRealms struct {
	RealmName string
	Error     uint32
}

func (s *TransferRealms) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.RealmName)))
	binary.Write(b, binary.LittleEndian, s.RealmName)
	return b.Bytes()
}

func (s *TransferRealms) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.RealmName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type TrashInventoryItem struct {
	GlobalID   uint64
	TemplateID uint64
}

func (s *TrashInventoryItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *TrashInventoryItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type Tutorials struct {
	TutorialInfo string
	GlobalID     uint64
	Remove       int32
}

func (s *Tutorials) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.TutorialInfo)))
	binary.Write(b, binary.LittleEndian, s.TutorialInfo)
	return b.Bytes()
}

func (s *Tutorials) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	if s.TutorialInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type UpdateObject struct {
	Name          string
	GameObjectID  uint64
	TemplateID    uint64
	LocationX     float32
	LocationY     float32
	LocationZ     float32
	Direction     float32
	StartDragging int32
}

func (s *UpdateObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 38+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.Name)
	return b.Bytes()
}

func (s *UpdateObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StartDragging); err != nil {
		return err
	}
	return nil
}

type UpdateQuantity struct {
	GlobalID uint64
	Quantity int32
}

func (s *UpdateQuantity) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *UpdateQuantity) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type UpdateZoneCounter struct {
	ZoneCounter uint8
}

func (s *UpdateZoneCounter) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *UpdateZoneCounter) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneCounter); err != nil {
		return err
	}
	return nil
}

type UpdateZoneTimer struct {
	TimerUI       string
	Title         string
	TimerID       int32
	CountdownTime float32
}

func (s *UpdateZoneTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.Title)+len(s.TimerUI)))
	binary.Write(b, binary.LittleEndian, s.Title)
	binary.Write(b, binary.LittleEndian, s.TimerUI)
	return b.Bytes()
}

func (s *UpdateZoneTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TimerID); err != nil {
		return err
	}
	if s.Title, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.TimerUI, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CountdownTime); err != nil {
		return err
	}
	return nil
}

type UseChatCode struct {
	Code         string
	ListOwnerGID uint64
	BuddyID      uint64
	Forwarded    uint8
}

func (s *UseChatCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.Code)))
	binary.Write(b, binary.LittleEndian, s.Code)
	return b.Bytes()
}

func (s *UseChatCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BuddyID); err != nil {
		return err
	}
	if s.Code, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type CSRViewAccount struct {
	AccountName   string
	AccountID     uint64
	CharacterID   uint64
	CanFilterChat uint8
	CanOpenChat   uint8
	CanUseCodes   uint8
}

func (s *CSRViewAccount) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21+len(s.AccountName)))
	binary.Write(b, binary.LittleEndian, s.AccountName)
	return b.Bytes()
}

func (s *CSRViewAccount) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.AccountName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AccountID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CanFilterChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CanOpenChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CanUseCodes); err != nil {
		return err
	}
	return nil
}

type WizBang struct {
	GameObjectID uint64
	WizBangID    uint32
}

func (s *WizBang) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *WizBang) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WizBangID); err != nil {
		return err
	}
	return nil
}

type ZombiePlayer struct {
	GlobalID  uint64
	Remaining float32
}

func (s *ZombiePlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *ZombiePlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remaining); err != nil {
		return err
	}
	return nil
}

type ZONEEVENTTIMEREXPIRED struct {
	EventName string
	TimerName string
}

func (s *ZONEEVENTTIMEREXPIRED) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.TimerName)+len(s.EventName)))
	binary.Write(b, binary.LittleEndian, s.TimerName)
	binary.Write(b, binary.LittleEndian, s.EventName)
	return b.Bytes()
}

func (s *ZONEEVENTTIMEREXPIRED) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.TimerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.EventName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ZoneTransfer struct {
	ZoneName            string
	ZoneID              uint64
	SessionID           uint64
	Slot                int32
	DynamicZoneID       uint32
	DynamicServerProcID uint32
	TransitionID        uint32
	SessionSlot         int32
	ZoneCounter         uint8
}

func (s *ZoneTransfer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 39+len(s.ZoneName)))
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	return b.Bytes()
}

func (s *ZoneTransfer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Slot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicServerProcID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneCounter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransitionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionSlot); err != nil {
		return err
	}
	return nil
}

type ZoneTransferAck struct {
}

func (s *ZoneTransferAck) Marshal() []byte {
	return []byte{}
}

func (s *ZoneTransferAck) Unmarshal(data []byte) error {
	return nil
}

type ZoneTransferNack struct {
}

func (s *ZoneTransferNack) Marshal() []byte {
	return []byte{}
}

func (s *ZoneTransferNack) Unmarshal(data []byte) error {
	return nil
}

type ZoneTransferRequest struct {
	ZoneName string
	SendAck  uint8
}

func (s *ZoneTransferRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.ZoneName)))
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	return b.Bytes()
}

func (s *ZoneTransferRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SendAck); err != nil {
		return err
	}
	return nil
}
