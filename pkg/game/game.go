// Code generated by w101-client-go. DO NOT EDIT.
package game

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type gameService interface {
	ADCLICKTHROUGH(ADCLICKTHROUGH)
	AddEffect(AddEffect)
	AddItemRequest(AddItemRequest)
	AddObject(AddObject)
	AddParticle(AddParticle)
	AddZoneTimer(AddZoneTimer)
	Attach(Attach)
	AttachFailed(AttachFailed)
	AuctionHouseUpdate(AuctionHouseUpdate)
	Badges(Badges)
	BanRsp(BanRsp)
	BestFriend(BestFriend)
	Blackball(Blackball)
	BuddyDrop(BuddyDrop)
	BuddyEntry(BuddyEntry)
	BuddyListComplete(BuddyListComplete)
	BuddyRequestAccept(BuddyRequestAccept)
	BuddyRequestAcceptFwd(BuddyRequestAcceptFwd)
	BuddyRequestAdd(BuddyRequestAdd)
	BuddyRequestAddFwd(BuddyRequestAddFwd)
	BuddyRequestDeny(BuddyRequestDeny)
	BuddyRequestDenyFwd(BuddyRequestDenyFwd)
	BuddyRequestDrop(BuddyRequestDrop)
	BuddyRequestError(BuddyRequestError)
	BuddyRequestList(BuddyRequestList)
	BuddyStats(BuddyStats)
	BuddyStatusUpdate(BuddyStatusUpdate)
	BugReport(BugReport)
	BugSubmitResponse(BugSubmitResponse)
	ChannelChat(ChannelChat)
	ChannelSubscription(ChannelSubscription)
	ChatDiagnostics(ChatDiagnostics)
	ChatError(ChatError)
	CheckSubscription(CheckSubscription)
	CheckMail(CheckMail)
	ClientMove(ClientMove)
	ClientMoveState(ClientMoveState)
	ClientNotifyText(ClientNotifyText)
	ClientTutorialEvent(ClientTutorialEvent)
	ClientDisconnect(ClientDisconnect)
	ClientError(ClientError)
	CLIENTPROCESSTERMINATED(CLIENTPROCESSTERMINATED)
	CombineInventoryItems(CombineInventoryItems)
	Command(Command)
	CommandResult(CommandResult)
	CompanionEffects(CompanionEffects)
	CoreEmote(CoreEmote)
	CreateChannelResponse(CreateChannelResponse)
	CREATESESSION(CREATESESSION)
	CSRBankItems(CSRBankItems)
	CSRBankItemsDone(CSRBankItemsDone)
	CSREditCharacter(CSREditCharacter)
	CSREditCharacterFailed(CSREditCharacterFailed)
	CSRFinishedHouse(CSRFinishedHouse)
	CSRSearchList(CSRSearchList)
	CSRMailData(CSRMailData)
	CSRReceiveGifts(CSRReceiveGifts)
	DEBUGDELETEALLOBJECTS(DEBUGDELETEALLOBJECTS)
	DeleteObject(DeleteObject)
	DeleteGift(DeleteGift)
	DirectedChat(DirectedChat)
	DirectedChatByNameResponse(DirectedChatByNameResponse)
	DirectedChatFail(DirectedChatFail)
	DirectedQuickChat(DirectedQuickChat)
	DirectedQuickChatExt(DirectedQuickChatExt)
	DisconnectAfk(DisconnectAfk)
	DownloadBrowser(DownloadBrowser)
	DownloadPackage(DownloadPackage)
	DownloadPackageElement(DownloadPackageElement)
	DynaModBehaviorUpdateMods(DynaModBehaviorUpdateMods)
	DynaModDump(DynaModDump)
	EnterState(EnterState)
	EquipItem(EquipItem)
	EquipmentBehaviorEquipItem(EquipmentBehaviorEquipItem)
	EquipmentBehaviorPublicEquipItem(EquipmentBehaviorPublicEquipItem)
	EquipmentBehaviorPublicUnequipItem(EquipmentBehaviorPublicUnequipItem)
	EquipmentBehaviorUnequipItem(EquipmentBehaviorUnequipItem)
	FeedInventoryItem(FeedInventoryItem)
	FINDSESSIONS(FINDSESSIONS)
	FINDSESSIONPLAYERS(FINDSESSIONPLAYERS)
	GenericGame(GenericGame)
	GetLadder(GetLadder)
	GETRANKINGS(GETRANKINGS)
	GiftRedeemed(GiftRedeemed)
	GotoPlayer(GotoPlayer)
	GotoPlayerResponse(GotoPlayerResponse)
	HarassmentReport(HarassmentReport)
	IgnoreAdd(IgnoreAdd)
	IgnoreDrop(IgnoreDrop)
	IgnoreList(IgnoreList)
	InteractObject(InteractObject)
	InteractOption(InteractOption)
	INVENTORYBEHAVIORADDITEM(INVENTORYBEHAVIORADDITEM)
	INVENTORYBEHAVIORREMOVEITEM(INVENTORYBEHAVIORREMOVEITEM)
	INVENTORYBEHAVIORTRADEITEM(INVENTORYBEHAVIORTRADEITEM)
	InviteFriend(InviteFriend)
	InviteResponse(InviteResponse)
	JoinChannelResponse(JoinChannelResponse)
	JOINSESSION(JOINSESSION)
	Jump(Jump)
	KILLCLIENTPROCESS(KILLCLIENTPROCESS)
	LADDER(LADDER)
	LeaveChannelResponse(LeaveChannelResponse)
	LeaveHousingLot(LeaveHousingLot)
	LeaveServiceRange(LeaveServiceRange)
	LeaveState(LeaveState)
	LOADSAVEOBJECTS(LOADSAVEOBJECTS)
	LoginComplete(LoginComplete)
	MailData(MailData)
	MarkLocation(MarkLocation)
	MarkLocationResponse(MarkLocationResponse)
	MatchAward(MatchAward)
	MatchInvite(MatchInvite)
	MatchMakerUpdate(MatchMakerUpdate)
	MatchReady(MatchReady)
	MatchResult(MatchResult)
	MESSAGEPROCESS(MESSAGEPROCESS)
	MoveCorrection(MoveCorrection)
	MoveState(MoveState)
	Mute(Mute)
	MuteRsp(MuteRsp)
	NewObject(NewObject)
	NewSysStats(NewSysStats)
	NewTickCnt(NewTickCnt)
	NewTourneyRewards(NewTourneyRewards)
	NewMail(NewMail)
	NotifyChannelInstance(NotifyChannelInstance)
	NotifyGift(NotifyGift)
	NotMuted(NotMuted)
	NotAfk(NotAfk)
	NPCSpeech(NPCSpeech)
	ObjectInfoQuery(ObjectInfoQuery)
	PartyDisband(PartyDisband)
	PartyJoinFailed(PartyJoinFailed)
	PartyJoinNotification(PartyJoinNotification)
	PartyLeave(PartyLeave)
	PartyLeaveNotification(PartyLeaveNotification)
	PartyLevelUp(PartyLevelUp)
	PartyLevelUpUpdate(PartyLevelUpUpdate)
	PartyMultiPlayerMountEquip(PartyMultiPlayerMountEquip)
	PartyMultiPlayerMountEquipUpdate(PartyMultiPlayerMountEquipUpdate)
	PartyMultiPlayerMountJoin(PartyMultiPlayerMountJoin)
	PartyMultiPlayerMountJoinUpdate(PartyMultiPlayerMountJoinUpdate)
	PartyRequestAccept(PartyRequestAccept)
	PartyRequestDecline(PartyRequestDecline)
	PartyRequestInvite(PartyRequestInvite)
	PartyRequestJoin(PartyRequestJoin)
	PartyRequestMemberZones(PartyRequestMemberZones)
	PartyRequestResponse(PartyRequestResponse)
	PartyRequestTimeout(PartyRequestTimeout)
	PartySubmitMemberZones(PartySubmitMemberZones)
	PartyUpdate(PartyUpdate)
	PartyZoneRequest(PartyZoneRequest)
	PartyZoneRequestResponse(PartyZoneRequestResponse)
	PickUpObject(PickUpObject)
	PlaceObject(PlaceObject)
	PlayCinematic(PlayCinematic)
	PlayerBlackballedAlert(PlayerBlackballedAlert)
	PlayerReadyAck(PlayerReadyAck)
	PlaySound(PlaySound)
	PostZoneEventFromClient(PostZoneEventFromClient)
	PreviewIsland(PreviewIsland)
	PvPUpdateInfo(PvPUpdateInfo)
	QueryLogout(QueryLogout)
	RadialChat(RadialChat)
	RadialQuickChat(RadialQuickChat)
	RadialQuickChatExt(RadialQuickChatExt)
	RadialZoneClusterQuickChat(RadialZoneClusterQuickChat)
	RANKING(RANKING)
	RealmInfoQuery(RealmInfoQuery)
	RecallLocation(RecallLocation)
	ReceiveGifts(ReceiveGifts)
	ReceivePromotions(ReceivePromotions)
	RedeemGift(RedeemGift)
	RedeemMailGift(RedeemMailGift)
	RedeemMailGiftResponse(RedeemMailGiftResponse)
	ReleaseDelay(ReleaseDelay)
	ReloadTemplateDir(ReloadTemplateDir)
	RemovedShopper(RemovedShopper)
	RemoveEffect(RemoveEffect)
	RemoveItemRequest(RemoveItemRequest)
	RemoveObject(RemoveObject)
	RemoveParticle(RemoveParticle)
	RemoveZoneTimer(RemoveZoneTimer)
	ReportAdTakeover(ReportAdTakeover)
	ReqAskServer(ReqAskServer)
	ReqChatDiagnostics(ReqChatDiagnostics)
	RequestAdvanceChannelInstance(RequestAdvanceChannelInstance)
	RequestChatCode(RequestChatCode)
	RequestCreateChannel(RequestCreateChannel)
	RequestDirectedChat(RequestDirectedChat)
	RequestDirectedChatByName(RequestDirectedChatByName)
	RequestDirectedQuickChat(RequestDirectedQuickChat)
	RequestDirectedQuickChatExt(RequestDirectedQuickChatExt)
	RequestJoinChannel(RequestJoinChannel)
	RequestJoinChannelByName(RequestJoinChannelByName)
	RequestLeaveChannel(RequestLeaveChannel)
	RequestLeaveChannelByName(RequestLeaveChannelByName)
	RequestMaxFriends(RequestMaxFriends)
	RequestRadialChat(RequestRadialChat)
	RequestRadialFriendChat(RequestRadialFriendChat)
	RequestRadialFriendQuickChat(RequestRadialFriendQuickChat)
	RequestRadialOwnerChat(RequestRadialOwnerChat)
	RequestRadialQuickChat(RequestRadialQuickChat)
	RequestRadialQuickChatExt(RequestRadialQuickChatExt)
	RequestSession(RequestSession)
	RequestZoneClusterQuickChat(RequestZoneClusterQuickChat)
	RequestGifts(RequestGifts)
	RequestPromotions(RequestPromotions)
	RestoreCharRsp(RestoreCharRsp)
	RetrieveMail(RetrieveMail)
	RetryTeleport(RetryTeleport)
	Script(Script)
	SelectBadge(SelectBadge)
	SendChatCode(SendChatCode)
	SendInteractOptions(SendInteractOptions)
	SendText(SendText)
	ServerMove(ServerMove)
	ServerShutdown(ServerShutdown)
	ServerTeleport(ServerTeleport)
	ServerTransfer(ServerTransfer)
	ServerTutorialCommand(ServerTutorialCommand)
	ServerError(ServerError)
	SERVERPROCESSRUNNING(SERVERPROCESSRUNNING)
	SESSION(SESSION)
	SESSIONERROR(SESSIONERROR)
	SESSIONPLAYER(SESSIONPLAYER)
	SETHOUSECUSTOMIZATION(SETHOUSECUSTOMIZATION)
	SplitQuantity(SplitQuantity)
	StartStagedCinematic(StartStagedCinematic)
	STARTCLIENTPROCESS(STARTCLIENTPROCESS)
	STARTSERVERPROCESS(STARTSERVERPROCESS)
	SuboptimalBracketResponse(SuboptimalBracketResponse)
	TeleportToGameZone(TeleportToGameZone)
	TournamentUpdate(TournamentUpdate)
	TransferCharRsp(TransferCharRsp)
	TransferInstance(TransferInstance)
	TransferRealms(TransferRealms)
	TrashInventoryItem(TrashInventoryItem)
	Tutorials(Tutorials)
	UpdateObject(UpdateObject)
	UpdateQuantity(UpdateQuantity)
	UpdateZoneCounter(UpdateZoneCounter)
	UpdateZoneTimer(UpdateZoneTimer)
	UseChatCode(UseChatCode)
	CSRViewAccount(CSRViewAccount)
	WizBang(WizBang)
	ZombiePlayer(ZombiePlayer)
	ZONEEVENTTIMEREXPIRED(ZONEEVENTTIMEREXPIRED)
	ZoneTransfer(ZoneTransfer)
	ZoneTransferAck(ZoneTransferAck)
	ZoneTransferNack(ZoneTransferNack)
	ZoneTransferRequest(ZoneTransferRequest)
}

type GameService struct {
	gameService
}

type GameClient struct {
	c *proto.Client
}

func (l *GameService) ADCLICKTHROUGH(_ ADCLICKTHROUGH)                                         {}
func (l *GameService) AddEffect(_ AddEffect)                                                   {}
func (l *GameService) AddItemRequest(_ AddItemRequest)                                         {}
func (l *GameService) AddObject(_ AddObject)                                                   {}
func (l *GameService) AddParticle(_ AddParticle)                                               {}
func (l *GameService) AddZoneTimer(_ AddZoneTimer)                                             {}
func (l *GameService) Attach(_ Attach)                                                         {}
func (l *GameService) AttachFailed(_ AttachFailed)                                             {}
func (l *GameService) AuctionHouseUpdate(_ AuctionHouseUpdate)                                 {}
func (l *GameService) Badges(_ Badges)                                                         {}
func (l *GameService) BanRsp(_ BanRsp)                                                         {}
func (l *GameService) BestFriend(_ BestFriend)                                                 {}
func (l *GameService) Blackball(_ Blackball)                                                   {}
func (l *GameService) BuddyDrop(_ BuddyDrop)                                                   {}
func (l *GameService) BuddyEntry(_ BuddyEntry)                                                 {}
func (l *GameService) BuddyListComplete(_ BuddyListComplete)                                   {}
func (l *GameService) BuddyRequestAccept(_ BuddyRequestAccept)                                 {}
func (l *GameService) BuddyRequestAcceptFwd(_ BuddyRequestAcceptFwd)                           {}
func (l *GameService) BuddyRequestAdd(_ BuddyRequestAdd)                                       {}
func (l *GameService) BuddyRequestAddFwd(_ BuddyRequestAddFwd)                                 {}
func (l *GameService) BuddyRequestDeny(_ BuddyRequestDeny)                                     {}
func (l *GameService) BuddyRequestDenyFwd(_ BuddyRequestDenyFwd)                               {}
func (l *GameService) BuddyRequestDrop(_ BuddyRequestDrop)                                     {}
func (l *GameService) BuddyRequestError(_ BuddyRequestError)                                   {}
func (l *GameService) BuddyRequestList(_ BuddyRequestList)                                     {}
func (l *GameService) BuddyStats(_ BuddyStats)                                                 {}
func (l *GameService) BuddyStatusUpdate(_ BuddyStatusUpdate)                                   {}
func (l *GameService) BugReport(_ BugReport)                                                   {}
func (l *GameService) BugSubmitResponse(_ BugSubmitResponse)                                   {}
func (l *GameService) ChannelChat(_ ChannelChat)                                               {}
func (l *GameService) ChannelSubscription(_ ChannelSubscription)                               {}
func (l *GameService) ChatDiagnostics(_ ChatDiagnostics)                                       {}
func (l *GameService) ChatError(_ ChatError)                                                   {}
func (l *GameService) CheckSubscription(_ CheckSubscription)                                   {}
func (l *GameService) CheckMail(_ CheckMail)                                                   {}
func (l *GameService) ClientMove(_ ClientMove)                                                 {}
func (l *GameService) ClientMoveState(_ ClientMoveState)                                       {}
func (l *GameService) ClientNotifyText(_ ClientNotifyText)                                     {}
func (l *GameService) ClientTutorialEvent(_ ClientTutorialEvent)                               {}
func (l *GameService) ClientDisconnect(_ ClientDisconnect)                                     {}
func (l *GameService) ClientError(_ ClientError)                                               {}
func (l *GameService) CLIENTPROCESSTERMINATED(_ CLIENTPROCESSTERMINATED)                       {}
func (l *GameService) CombineInventoryItems(_ CombineInventoryItems)                           {}
func (l *GameService) Command(_ Command)                                                       {}
func (l *GameService) CommandResult(_ CommandResult)                                           {}
func (l *GameService) CompanionEffects(_ CompanionEffects)                                     {}
func (l *GameService) CoreEmote(_ CoreEmote)                                                   {}
func (l *GameService) CreateChannelResponse(_ CreateChannelResponse)                           {}
func (l *GameService) CREATESESSION(_ CREATESESSION)                                           {}
func (l *GameService) CSRBankItems(_ CSRBankItems)                                             {}
func (l *GameService) CSRBankItemsDone(_ CSRBankItemsDone)                                     {}
func (l *GameService) CSREditCharacter(_ CSREditCharacter)                                     {}
func (l *GameService) CSREditCharacterFailed(_ CSREditCharacterFailed)                         {}
func (l *GameService) CSRFinishedHouse(_ CSRFinishedHouse)                                     {}
func (l *GameService) CSRSearchList(_ CSRSearchList)                                           {}
func (l *GameService) CSRMailData(_ CSRMailData)                                               {}
func (l *GameService) CSRReceiveGifts(_ CSRReceiveGifts)                                       {}
func (l *GameService) DEBUGDELETEALLOBJECTS(_ DEBUGDELETEALLOBJECTS)                           {}
func (l *GameService) DeleteObject(_ DeleteObject)                                             {}
func (l *GameService) DeleteGift(_ DeleteGift)                                                 {}
func (l *GameService) DirectedChat(_ DirectedChat)                                             {}
func (l *GameService) DirectedChatByNameResponse(_ DirectedChatByNameResponse)                 {}
func (l *GameService) DirectedChatFail(_ DirectedChatFail)                                     {}
func (l *GameService) DirectedQuickChat(_ DirectedQuickChat)                                   {}
func (l *GameService) DirectedQuickChatExt(_ DirectedQuickChatExt)                             {}
func (l *GameService) DisconnectAfk(_ DisconnectAfk)                                           {}
func (l *GameService) DownloadBrowser(_ DownloadBrowser)                                       {}
func (l *GameService) DownloadPackage(_ DownloadPackage)                                       {}
func (l *GameService) DownloadPackageElement(_ DownloadPackageElement)                         {}
func (l *GameService) DynaModBehaviorUpdateMods(_ DynaModBehaviorUpdateMods)                   {}
func (l *GameService) DynaModDump(_ DynaModDump)                                               {}
func (l *GameService) EnterState(_ EnterState)                                                 {}
func (l *GameService) EquipItem(_ EquipItem)                                                   {}
func (l *GameService) EquipmentBehaviorEquipItem(_ EquipmentBehaviorEquipItem)                 {}
func (l *GameService) EquipmentBehaviorPublicEquipItem(_ EquipmentBehaviorPublicEquipItem)     {}
func (l *GameService) EquipmentBehaviorPublicUnequipItem(_ EquipmentBehaviorPublicUnequipItem) {}
func (l *GameService) EquipmentBehaviorUnequipItem(_ EquipmentBehaviorUnequipItem)             {}
func (l *GameService) FeedInventoryItem(_ FeedInventoryItem)                                   {}
func (l *GameService) FINDSESSIONS(_ FINDSESSIONS)                                             {}
func (l *GameService) FINDSESSIONPLAYERS(_ FINDSESSIONPLAYERS)                                 {}
func (l *GameService) GenericGame(_ GenericGame)                                               {}
func (l *GameService) GetLadder(_ GetLadder)                                                   {}
func (l *GameService) GETRANKINGS(_ GETRANKINGS)                                               {}
func (l *GameService) GiftRedeemed(_ GiftRedeemed)                                             {}
func (l *GameService) GotoPlayer(_ GotoPlayer)                                                 {}
func (l *GameService) GotoPlayerResponse(_ GotoPlayerResponse)                                 {}
func (l *GameService) HarassmentReport(_ HarassmentReport)                                     {}
func (l *GameService) IgnoreAdd(_ IgnoreAdd)                                                   {}
func (l *GameService) IgnoreDrop(_ IgnoreDrop)                                                 {}
func (l *GameService) IgnoreList(_ IgnoreList)                                                 {}
func (l *GameService) InteractObject(_ InteractObject)                                         {}
func (l *GameService) InteractOption(_ InteractOption)                                         {}
func (l *GameService) INVENTORYBEHAVIORADDITEM(_ INVENTORYBEHAVIORADDITEM)                     {}
func (l *GameService) INVENTORYBEHAVIORREMOVEITEM(_ INVENTORYBEHAVIORREMOVEITEM)               {}
func (l *GameService) INVENTORYBEHAVIORTRADEITEM(_ INVENTORYBEHAVIORTRADEITEM)                 {}
func (l *GameService) InviteFriend(_ InviteFriend)                                             {}
func (l *GameService) InviteResponse(_ InviteResponse)                                         {}
func (l *GameService) JoinChannelResponse(_ JoinChannelResponse)                               {}
func (l *GameService) JOINSESSION(_ JOINSESSION)                                               {}
func (l *GameService) Jump(_ Jump)                                                             {}
func (l *GameService) KILLCLIENTPROCESS(_ KILLCLIENTPROCESS)                                   {}
func (l *GameService) LADDER(_ LADDER)                                                         {}
func (l *GameService) LeaveChannelResponse(_ LeaveChannelResponse)                             {}
func (l *GameService) LeaveHousingLot(_ LeaveHousingLot)                                       {}
func (l *GameService) LeaveServiceRange(_ LeaveServiceRange)                                   {}
func (l *GameService) LeaveState(_ LeaveState)                                                 {}
func (l *GameService) LOADSAVEOBJECTS(_ LOADSAVEOBJECTS)                                       {}
func (l *GameService) LoginComplete(_ LoginComplete)                                           {}
func (l *GameService) MailData(_ MailData)                                                     {}
func (l *GameService) MarkLocation(_ MarkLocation)                                             {}
func (l *GameService) MarkLocationResponse(_ MarkLocationResponse)                             {}
func (l *GameService) MatchAward(_ MatchAward)                                                 {}
func (l *GameService) MatchInvite(_ MatchInvite)                                               {}
func (l *GameService) MatchMakerUpdate(_ MatchMakerUpdate)                                     {}
func (l *GameService) MatchReady(_ MatchReady)                                                 {}
func (l *GameService) MatchResult(_ MatchResult)                                               {}
func (l *GameService) MESSAGEPROCESS(_ MESSAGEPROCESS)                                         {}
func (l *GameService) MoveCorrection(_ MoveCorrection)                                         {}
func (l *GameService) MoveState(_ MoveState)                                                   {}
func (l *GameService) Mute(_ Mute)                                                             {}
func (l *GameService) MuteRsp(_ MuteRsp)                                                       {}
func (l *GameService) NewObject(_ NewObject)                                                   {}
func (l *GameService) NewSysStats(_ NewSysStats)                                               {}
func (l *GameService) NewTickCnt(_ NewTickCnt)                                                 {}
func (l *GameService) NewTourneyRewards(_ NewTourneyRewards)                                   {}
func (l *GameService) NewMail(_ NewMail)                                                       {}
func (l *GameService) NotifyChannelInstance(_ NotifyChannelInstance)                           {}
func (l *GameService) NotifyGift(_ NotifyGift)                                                 {}
func (l *GameService) NotMuted(_ NotMuted)                                                     {}
func (l *GameService) NotAfk(_ NotAfk)                                                         {}
func (l *GameService) NPCSpeech(_ NPCSpeech)                                                   {}
func (l *GameService) ObjectInfoQuery(_ ObjectInfoQuery)                                       {}
func (l *GameService) PartyDisband(_ PartyDisband)                                             {}
func (l *GameService) PartyJoinFailed(_ PartyJoinFailed)                                       {}
func (l *GameService) PartyJoinNotification(_ PartyJoinNotification)                           {}
func (l *GameService) PartyLeave(_ PartyLeave)                                                 {}
func (l *GameService) PartyLeaveNotification(_ PartyLeaveNotification)                         {}
func (l *GameService) PartyLevelUp(_ PartyLevelUp)                                             {}
func (l *GameService) PartyLevelUpUpdate(_ PartyLevelUpUpdate)                                 {}
func (l *GameService) PartyMultiPlayerMountEquip(_ PartyMultiPlayerMountEquip)                 {}
func (l *GameService) PartyMultiPlayerMountEquipUpdate(_ PartyMultiPlayerMountEquipUpdate)     {}
func (l *GameService) PartyMultiPlayerMountJoin(_ PartyMultiPlayerMountJoin)                   {}
func (l *GameService) PartyMultiPlayerMountJoinUpdate(_ PartyMultiPlayerMountJoinUpdate)       {}
func (l *GameService) PartyRequestAccept(_ PartyRequestAccept)                                 {}
func (l *GameService) PartyRequestDecline(_ PartyRequestDecline)                               {}
func (l *GameService) PartyRequestInvite(_ PartyRequestInvite)                                 {}
func (l *GameService) PartyRequestJoin(_ PartyRequestJoin)                                     {}
func (l *GameService) PartyRequestMemberZones(_ PartyRequestMemberZones)                       {}
func (l *GameService) PartyRequestResponse(_ PartyRequestResponse)                             {}
func (l *GameService) PartyRequestTimeout(_ PartyRequestTimeout)                               {}
func (l *GameService) PartySubmitMemberZones(_ PartySubmitMemberZones)                         {}
func (l *GameService) PartyUpdate(_ PartyUpdate)                                               {}
func (l *GameService) PartyZoneRequest(_ PartyZoneRequest)                                     {}
func (l *GameService) PartyZoneRequestResponse(_ PartyZoneRequestResponse)                     {}
func (l *GameService) PickUpObject(_ PickUpObject)                                             {}
func (l *GameService) PlaceObject(_ PlaceObject)                                               {}
func (l *GameService) PlayCinematic(_ PlayCinematic)                                           {}
func (l *GameService) PlayerBlackballedAlert(_ PlayerBlackballedAlert)                         {}
func (l *GameService) PlayerReadyAck(_ PlayerReadyAck)                                         {}
func (l *GameService) PlaySound(_ PlaySound)                                                   {}
func (l *GameService) PostZoneEventFromClient(_ PostZoneEventFromClient)                       {}
func (l *GameService) PreviewIsland(_ PreviewIsland)                                           {}
func (l *GameService) PvPUpdateInfo(_ PvPUpdateInfo)                                           {}
func (l *GameService) QueryLogout(_ QueryLogout)                                               {}
func (l *GameService) RadialChat(_ RadialChat)                                                 {}
func (l *GameService) RadialQuickChat(_ RadialQuickChat)                                       {}
func (l *GameService) RadialQuickChatExt(_ RadialQuickChatExt)                                 {}
func (l *GameService) RadialZoneClusterQuickChat(_ RadialZoneClusterQuickChat)                 {}
func (l *GameService) RANKING(_ RANKING)                                                       {}
func (l *GameService) RealmInfoQuery(_ RealmInfoQuery)                                         {}
func (l *GameService) RecallLocation(_ RecallLocation)                                         {}
func (l *GameService) ReceiveGifts(_ ReceiveGifts)                                             {}
func (l *GameService) ReceivePromotions(_ ReceivePromotions)                                   {}
func (l *GameService) RedeemGift(_ RedeemGift)                                                 {}
func (l *GameService) RedeemMailGift(_ RedeemMailGift)                                         {}
func (l *GameService) RedeemMailGiftResponse(_ RedeemMailGiftResponse)                         {}
func (l *GameService) ReleaseDelay(_ ReleaseDelay)                                             {}
func (l *GameService) ReloadTemplateDir(_ ReloadTemplateDir)                                   {}
func (l *GameService) RemovedShopper(_ RemovedShopper)                                         {}
func (l *GameService) RemoveEffect(_ RemoveEffect)                                             {}
func (l *GameService) RemoveItemRequest(_ RemoveItemRequest)                                   {}
func (l *GameService) RemoveObject(_ RemoveObject)                                             {}
func (l *GameService) RemoveParticle(_ RemoveParticle)                                         {}
func (l *GameService) RemoveZoneTimer(_ RemoveZoneTimer)                                       {}
func (l *GameService) ReportAdTakeover(_ ReportAdTakeover)                                     {}
func (l *GameService) ReqAskServer(_ ReqAskServer)                                             {}
func (l *GameService) ReqChatDiagnostics(_ ReqChatDiagnostics)                                 {}
func (l *GameService) RequestAdvanceChannelInstance(_ RequestAdvanceChannelInstance)           {}
func (l *GameService) RequestChatCode(_ RequestChatCode)                                       {}
func (l *GameService) RequestCreateChannel(_ RequestCreateChannel)                             {}
func (l *GameService) RequestDirectedChat(_ RequestDirectedChat)                               {}
func (l *GameService) RequestDirectedChatByName(_ RequestDirectedChatByName)                   {}
func (l *GameService) RequestDirectedQuickChat(_ RequestDirectedQuickChat)                     {}
func (l *GameService) RequestDirectedQuickChatExt(_ RequestDirectedQuickChatExt)               {}
func (l *GameService) RequestJoinChannel(_ RequestJoinChannel)                                 {}
func (l *GameService) RequestJoinChannelByName(_ RequestJoinChannelByName)                     {}
func (l *GameService) RequestLeaveChannel(_ RequestLeaveChannel)                               {}
func (l *GameService) RequestLeaveChannelByName(_ RequestLeaveChannelByName)                   {}
func (l *GameService) RequestMaxFriends(_ RequestMaxFriends)                                   {}
func (l *GameService) RequestRadialChat(_ RequestRadialChat)                                   {}
func (l *GameService) RequestRadialFriendChat(_ RequestRadialFriendChat)                       {}
func (l *GameService) RequestRadialFriendQuickChat(_ RequestRadialFriendQuickChat)             {}
func (l *GameService) RequestRadialOwnerChat(_ RequestRadialOwnerChat)                         {}
func (l *GameService) RequestRadialQuickChat(_ RequestRadialQuickChat)                         {}
func (l *GameService) RequestRadialQuickChatExt(_ RequestRadialQuickChatExt)                   {}
func (l *GameService) RequestSession(_ RequestSession)                                         {}
func (l *GameService) RequestZoneClusterQuickChat(_ RequestZoneClusterQuickChat)               {}
func (l *GameService) RequestGifts(_ RequestGifts)                                             {}
func (l *GameService) RequestPromotions(_ RequestPromotions)                                   {}
func (l *GameService) RestoreCharRsp(_ RestoreCharRsp)                                         {}
func (l *GameService) RetrieveMail(_ RetrieveMail)                                             {}
func (l *GameService) RetryTeleport(_ RetryTeleport)                                           {}
func (l *GameService) Script(_ Script)                                                         {}
func (l *GameService) SelectBadge(_ SelectBadge)                                               {}
func (l *GameService) SendChatCode(_ SendChatCode)                                             {}
func (l *GameService) SendInteractOptions(_ SendInteractOptions)                               {}
func (l *GameService) SendText(_ SendText)                                                     {}
func (l *GameService) ServerMove(_ ServerMove)                                                 {}
func (l *GameService) ServerShutdown(_ ServerShutdown)                                         {}
func (l *GameService) ServerTeleport(_ ServerTeleport)                                         {}
func (l *GameService) ServerTransfer(_ ServerTransfer)                                         {}
func (l *GameService) ServerTutorialCommand(_ ServerTutorialCommand)                           {}
func (l *GameService) ServerError(_ ServerError)                                               {}
func (l *GameService) SERVERPROCESSRUNNING(_ SERVERPROCESSRUNNING)                             {}
func (l *GameService) SESSION(_ SESSION)                                                       {}
func (l *GameService) SESSIONERROR(_ SESSIONERROR)                                             {}
func (l *GameService) SESSIONPLAYER(_ SESSIONPLAYER)                                           {}
func (l *GameService) SETHOUSECUSTOMIZATION(_ SETHOUSECUSTOMIZATION)                           {}
func (l *GameService) SplitQuantity(_ SplitQuantity)                                           {}
func (l *GameService) StartStagedCinematic(_ StartStagedCinematic)                             {}
func (l *GameService) STARTCLIENTPROCESS(_ STARTCLIENTPROCESS)                                 {}
func (l *GameService) STARTSERVERPROCESS(_ STARTSERVERPROCESS)                                 {}
func (l *GameService) SuboptimalBracketResponse(_ SuboptimalBracketResponse)                   {}
func (l *GameService) TeleportToGameZone(_ TeleportToGameZone)                                 {}
func (l *GameService) TournamentUpdate(_ TournamentUpdate)                                     {}
func (l *GameService) TransferCharRsp(_ TransferCharRsp)                                       {}
func (l *GameService) TransferInstance(_ TransferInstance)                                     {}
func (l *GameService) TransferRealms(_ TransferRealms)                                         {}
func (l *GameService) TrashInventoryItem(_ TrashInventoryItem)                                 {}
func (l *GameService) Tutorials(_ Tutorials)                                                   {}
func (l *GameService) UpdateObject(_ UpdateObject)                                             {}
func (l *GameService) UpdateQuantity(_ UpdateQuantity)                                         {}
func (l *GameService) UpdateZoneCounter(_ UpdateZoneCounter)                                   {}
func (l *GameService) UpdateZoneTimer(_ UpdateZoneTimer)                                       {}
func (l *GameService) UseChatCode(_ UseChatCode)                                               {}
func (l *GameService) CSRViewAccount(_ CSRViewAccount)                                         {}
func (l *GameService) WizBang(_ WizBang)                                                       {}
func (l *GameService) ZombiePlayer(_ ZombiePlayer)                                             {}
func (l *GameService) ZONEEVENTTIMEREXPIRED(_ ZONEEVENTTIMEREXPIRED)                           {}
func (l *GameService) ZoneTransfer(_ ZoneTransfer)                                             {}
func (l *GameService) ZoneTransferAck(_ ZoneTransferAck)                                       {}
func (l *GameService) ZoneTransferNack(_ ZoneTransferNack)                                     {}
func (l *GameService) ZoneTransferRequest(_ ZoneTransferRequest)                               {}

func RegisterGameService(r *proto.MessageRouter, s gameService) {
	proto.RegisterMessageHandler(r, 5, 1, s.ADCLICKTHROUGH)
	proto.RegisterMessageHandler(r, 5, 2, s.AddEffect)
	proto.RegisterMessageHandler(r, 5, 3, s.AddItemRequest)
	proto.RegisterMessageHandler(r, 5, 4, s.AddObject)
	proto.RegisterMessageHandler(r, 5, 5, s.AddParticle)
	proto.RegisterMessageHandler(r, 5, 6, s.AddZoneTimer)
	proto.RegisterMessageHandler(r, 5, 7, s.Attach)
	proto.RegisterMessageHandler(r, 5, 8, s.AttachFailed)
	proto.RegisterMessageHandler(r, 5, 9, s.AuctionHouseUpdate)
	proto.RegisterMessageHandler(r, 5, 10, s.Badges)
	proto.RegisterMessageHandler(r, 5, 11, s.BanRsp)
	proto.RegisterMessageHandler(r, 5, 12, s.BestFriend)
	proto.RegisterMessageHandler(r, 5, 13, s.Blackball)
	proto.RegisterMessageHandler(r, 5, 14, s.BuddyDrop)
	proto.RegisterMessageHandler(r, 5, 15, s.BuddyEntry)
	proto.RegisterMessageHandler(r, 5, 16, s.BuddyListComplete)
	proto.RegisterMessageHandler(r, 5, 17, s.BuddyRequestAccept)
	proto.RegisterMessageHandler(r, 5, 18, s.BuddyRequestAcceptFwd)
	proto.RegisterMessageHandler(r, 5, 19, s.BuddyRequestAdd)
	proto.RegisterMessageHandler(r, 5, 20, s.BuddyRequestAddFwd)
	proto.RegisterMessageHandler(r, 5, 21, s.BuddyRequestDeny)
	proto.RegisterMessageHandler(r, 5, 22, s.BuddyRequestDenyFwd)
	proto.RegisterMessageHandler(r, 5, 23, s.BuddyRequestDrop)
	proto.RegisterMessageHandler(r, 5, 24, s.BuddyRequestError)
	proto.RegisterMessageHandler(r, 5, 25, s.BuddyRequestList)
	proto.RegisterMessageHandler(r, 5, 26, s.BuddyStats)
	proto.RegisterMessageHandler(r, 5, 27, s.BuddyStatusUpdate)
	proto.RegisterMessageHandler(r, 5, 28, s.BugReport)
	proto.RegisterMessageHandler(r, 5, 29, s.BugSubmitResponse)
	proto.RegisterMessageHandler(r, 5, 30, s.ChannelChat)
	proto.RegisterMessageHandler(r, 5, 31, s.ChannelSubscription)
	proto.RegisterMessageHandler(r, 5, 32, s.ChatDiagnostics)
	proto.RegisterMessageHandler(r, 5, 33, s.ChatError)
	proto.RegisterMessageHandler(r, 5, 34, s.CheckSubscription)
	proto.RegisterMessageHandler(r, 5, 35, s.CheckMail)
	proto.RegisterMessageHandler(r, 5, 36, s.ClientMove)
	proto.RegisterMessageHandler(r, 5, 37, s.ClientMoveState)
	proto.RegisterMessageHandler(r, 5, 38, s.ClientNotifyText)
	proto.RegisterMessageHandler(r, 5, 39, s.ClientTutorialEvent)
	proto.RegisterMessageHandler(r, 5, 40, s.ClientDisconnect)
	proto.RegisterMessageHandler(r, 5, 41, s.ClientError)
	proto.RegisterMessageHandler(r, 5, 42, s.CLIENTPROCESSTERMINATED)
	proto.RegisterMessageHandler(r, 5, 43, s.CombineInventoryItems)
	proto.RegisterMessageHandler(r, 5, 44, s.Command)
	proto.RegisterMessageHandler(r, 5, 45, s.CommandResult)
	proto.RegisterMessageHandler(r, 5, 46, s.CompanionEffects)
	proto.RegisterMessageHandler(r, 5, 47, s.CoreEmote)
	proto.RegisterMessageHandler(r, 5, 48, s.CreateChannelResponse)
	proto.RegisterMessageHandler(r, 5, 49, s.CREATESESSION)
	proto.RegisterMessageHandler(r, 5, 50, s.CSRBankItems)
	proto.RegisterMessageHandler(r, 5, 51, s.CSRBankItemsDone)
	proto.RegisterMessageHandler(r, 5, 52, s.CSREditCharacter)
	proto.RegisterMessageHandler(r, 5, 53, s.CSREditCharacterFailed)
	proto.RegisterMessageHandler(r, 5, 54, s.CSRFinishedHouse)
	proto.RegisterMessageHandler(r, 5, 55, s.CSRSearchList)
	proto.RegisterMessageHandler(r, 5, 56, s.CSRMailData)
	proto.RegisterMessageHandler(r, 5, 57, s.CSRReceiveGifts)
	proto.RegisterMessageHandler(r, 5, 58, s.DEBUGDELETEALLOBJECTS)
	proto.RegisterMessageHandler(r, 5, 59, s.DeleteObject)
	proto.RegisterMessageHandler(r, 5, 60, s.DeleteGift)
	proto.RegisterMessageHandler(r, 5, 61, s.DirectedChat)
	proto.RegisterMessageHandler(r, 5, 62, s.DirectedChatByNameResponse)
	proto.RegisterMessageHandler(r, 5, 63, s.DirectedChatFail)
	proto.RegisterMessageHandler(r, 5, 64, s.DirectedQuickChat)
	proto.RegisterMessageHandler(r, 5, 65, s.DirectedQuickChatExt)
	proto.RegisterMessageHandler(r, 5, 66, s.DisconnectAfk)
	proto.RegisterMessageHandler(r, 5, 67, s.DownloadBrowser)
	proto.RegisterMessageHandler(r, 5, 68, s.DownloadPackage)
	proto.RegisterMessageHandler(r, 5, 69, s.DownloadPackageElement)
	proto.RegisterMessageHandler(r, 5, 70, s.DynaModBehaviorUpdateMods)
	proto.RegisterMessageHandler(r, 5, 71, s.DynaModDump)
	proto.RegisterMessageHandler(r, 5, 72, s.EnterState)
	proto.RegisterMessageHandler(r, 5, 73, s.EquipItem)
	proto.RegisterMessageHandler(r, 5, 74, s.EquipmentBehaviorEquipItem)
	proto.RegisterMessageHandler(r, 5, 75, s.EquipmentBehaviorPublicEquipItem)
	proto.RegisterMessageHandler(r, 5, 76, s.EquipmentBehaviorPublicUnequipItem)
	proto.RegisterMessageHandler(r, 5, 77, s.EquipmentBehaviorUnequipItem)
	proto.RegisterMessageHandler(r, 5, 78, s.FeedInventoryItem)
	proto.RegisterMessageHandler(r, 5, 79, s.FINDSESSIONS)
	proto.RegisterMessageHandler(r, 5, 80, s.FINDSESSIONPLAYERS)
	proto.RegisterMessageHandler(r, 5, 81, s.GenericGame)
	proto.RegisterMessageHandler(r, 5, 82, s.GetLadder)
	proto.RegisterMessageHandler(r, 5, 83, s.GETRANKINGS)
	proto.RegisterMessageHandler(r, 5, 84, s.GiftRedeemed)
	proto.RegisterMessageHandler(r, 5, 85, s.GotoPlayer)
	proto.RegisterMessageHandler(r, 5, 86, s.GotoPlayerResponse)
	proto.RegisterMessageHandler(r, 5, 87, s.HarassmentReport)
	proto.RegisterMessageHandler(r, 5, 88, s.IgnoreAdd)
	proto.RegisterMessageHandler(r, 5, 89, s.IgnoreDrop)
	proto.RegisterMessageHandler(r, 5, 90, s.IgnoreList)
	proto.RegisterMessageHandler(r, 5, 91, s.InteractObject)
	proto.RegisterMessageHandler(r, 5, 92, s.InteractOption)
	proto.RegisterMessageHandler(r, 5, 93, s.INVENTORYBEHAVIORADDITEM)
	proto.RegisterMessageHandler(r, 5, 94, s.INVENTORYBEHAVIORREMOVEITEM)
	proto.RegisterMessageHandler(r, 5, 95, s.INVENTORYBEHAVIORTRADEITEM)
	proto.RegisterMessageHandler(r, 5, 96, s.InviteFriend)
	proto.RegisterMessageHandler(r, 5, 97, s.InviteResponse)
	proto.RegisterMessageHandler(r, 5, 98, s.JoinChannelResponse)
	proto.RegisterMessageHandler(r, 5, 99, s.JOINSESSION)
	proto.RegisterMessageHandler(r, 5, 100, s.Jump)
	proto.RegisterMessageHandler(r, 5, 101, s.KILLCLIENTPROCESS)
	proto.RegisterMessageHandler(r, 5, 102, s.LADDER)
	proto.RegisterMessageHandler(r, 5, 103, s.LeaveChannelResponse)
	proto.RegisterMessageHandler(r, 5, 104, s.LeaveHousingLot)
	proto.RegisterMessageHandler(r, 5, 105, s.LeaveServiceRange)
	proto.RegisterMessageHandler(r, 5, 106, s.LeaveState)
	proto.RegisterMessageHandler(r, 5, 107, s.LOADSAVEOBJECTS)
	proto.RegisterMessageHandler(r, 5, 108, s.LoginComplete)
	proto.RegisterMessageHandler(r, 5, 109, s.MailData)
	proto.RegisterMessageHandler(r, 5, 110, s.MarkLocation)
	proto.RegisterMessageHandler(r, 5, 111, s.MarkLocationResponse)
	proto.RegisterMessageHandler(r, 5, 112, s.MatchAward)
	proto.RegisterMessageHandler(r, 5, 113, s.MatchInvite)
	proto.RegisterMessageHandler(r, 5, 114, s.MatchMakerUpdate)
	proto.RegisterMessageHandler(r, 5, 115, s.MatchReady)
	proto.RegisterMessageHandler(r, 5, 116, s.MatchResult)
	proto.RegisterMessageHandler(r, 5, 117, s.MESSAGEPROCESS)
	proto.RegisterMessageHandler(r, 5, 118, s.MoveCorrection)
	proto.RegisterMessageHandler(r, 5, 119, s.MoveState)
	proto.RegisterMessageHandler(r, 5, 120, s.Mute)
	proto.RegisterMessageHandler(r, 5, 121, s.MuteRsp)
	proto.RegisterMessageHandler(r, 5, 122, s.NewObject)
	proto.RegisterMessageHandler(r, 5, 123, s.NewSysStats)
	proto.RegisterMessageHandler(r, 5, 124, s.NewTickCnt)
	proto.RegisterMessageHandler(r, 5, 125, s.NewTourneyRewards)
	proto.RegisterMessageHandler(r, 5, 126, s.NewMail)
	proto.RegisterMessageHandler(r, 5, 127, s.NotifyChannelInstance)
	proto.RegisterMessageHandler(r, 5, 128, s.NotifyGift)
	proto.RegisterMessageHandler(r, 5, 129, s.NotMuted)
	proto.RegisterMessageHandler(r, 5, 130, s.NotAfk)
	proto.RegisterMessageHandler(r, 5, 131, s.NPCSpeech)
	proto.RegisterMessageHandler(r, 5, 132, s.ObjectInfoQuery)
	proto.RegisterMessageHandler(r, 5, 133, s.PartyDisband)
	proto.RegisterMessageHandler(r, 5, 134, s.PartyJoinFailed)
	proto.RegisterMessageHandler(r, 5, 135, s.PartyJoinNotification)
	proto.RegisterMessageHandler(r, 5, 136, s.PartyLeave)
	proto.RegisterMessageHandler(r, 5, 137, s.PartyLeaveNotification)
	proto.RegisterMessageHandler(r, 5, 138, s.PartyLevelUp)
	proto.RegisterMessageHandler(r, 5, 139, s.PartyLevelUpUpdate)
	proto.RegisterMessageHandler(r, 5, 140, s.PartyMultiPlayerMountEquip)
	proto.RegisterMessageHandler(r, 5, 141, s.PartyMultiPlayerMountEquipUpdate)
	proto.RegisterMessageHandler(r, 5, 142, s.PartyMultiPlayerMountJoin)
	proto.RegisterMessageHandler(r, 5, 143, s.PartyMultiPlayerMountJoinUpdate)
	proto.RegisterMessageHandler(r, 5, 144, s.PartyRequestAccept)
	proto.RegisterMessageHandler(r, 5, 145, s.PartyRequestDecline)
	proto.RegisterMessageHandler(r, 5, 146, s.PartyRequestInvite)
	proto.RegisterMessageHandler(r, 5, 147, s.PartyRequestJoin)
	proto.RegisterMessageHandler(r, 5, 148, s.PartyRequestMemberZones)
	proto.RegisterMessageHandler(r, 5, 149, s.PartyRequestResponse)
	proto.RegisterMessageHandler(r, 5, 150, s.PartyRequestTimeout)
	proto.RegisterMessageHandler(r, 5, 151, s.PartySubmitMemberZones)
	proto.RegisterMessageHandler(r, 5, 152, s.PartyUpdate)
	proto.RegisterMessageHandler(r, 5, 153, s.PartyZoneRequest)
	proto.RegisterMessageHandler(r, 5, 154, s.PartyZoneRequestResponse)
	proto.RegisterMessageHandler(r, 5, 155, s.PickUpObject)
	proto.RegisterMessageHandler(r, 5, 156, s.PlaceObject)
	proto.RegisterMessageHandler(r, 5, 157, s.PlayCinematic)
	proto.RegisterMessageHandler(r, 5, 158, s.PlayerBlackballedAlert)
	proto.RegisterMessageHandler(r, 5, 159, s.PlayerReadyAck)
	proto.RegisterMessageHandler(r, 5, 160, s.PlaySound)
	proto.RegisterMessageHandler(r, 5, 161, s.PostZoneEventFromClient)
	proto.RegisterMessageHandler(r, 5, 162, s.PreviewIsland)
	proto.RegisterMessageHandler(r, 5, 163, s.PvPUpdateInfo)
	proto.RegisterMessageHandler(r, 5, 164, s.QueryLogout)
	proto.RegisterMessageHandler(r, 5, 165, s.RadialChat)
	proto.RegisterMessageHandler(r, 5, 166, s.RadialQuickChat)
	proto.RegisterMessageHandler(r, 5, 167, s.RadialQuickChatExt)
	proto.RegisterMessageHandler(r, 5, 168, s.RadialZoneClusterQuickChat)
	proto.RegisterMessageHandler(r, 5, 169, s.RANKING)
	proto.RegisterMessageHandler(r, 5, 170, s.RealmInfoQuery)
	proto.RegisterMessageHandler(r, 5, 171, s.RecallLocation)
	proto.RegisterMessageHandler(r, 5, 172, s.ReceiveGifts)
	proto.RegisterMessageHandler(r, 5, 173, s.ReceivePromotions)
	proto.RegisterMessageHandler(r, 5, 174, s.RedeemGift)
	proto.RegisterMessageHandler(r, 5, 175, s.RedeemMailGift)
	proto.RegisterMessageHandler(r, 5, 176, s.RedeemMailGiftResponse)
	proto.RegisterMessageHandler(r, 5, 177, s.ReleaseDelay)
	proto.RegisterMessageHandler(r, 5, 178, s.ReloadTemplateDir)
	proto.RegisterMessageHandler(r, 5, 179, s.RemovedShopper)
	proto.RegisterMessageHandler(r, 5, 180, s.RemoveEffect)
	proto.RegisterMessageHandler(r, 5, 181, s.RemoveItemRequest)
	proto.RegisterMessageHandler(r, 5, 182, s.RemoveObject)
	proto.RegisterMessageHandler(r, 5, 183, s.RemoveParticle)
	proto.RegisterMessageHandler(r, 5, 184, s.RemoveZoneTimer)
	proto.RegisterMessageHandler(r, 5, 185, s.ReportAdTakeover)
	proto.RegisterMessageHandler(r, 5, 186, s.ReqAskServer)
	proto.RegisterMessageHandler(r, 5, 187, s.ReqChatDiagnostics)
	proto.RegisterMessageHandler(r, 5, 188, s.RequestAdvanceChannelInstance)
	proto.RegisterMessageHandler(r, 5, 189, s.RequestChatCode)
	proto.RegisterMessageHandler(r, 5, 190, s.RequestCreateChannel)
	proto.RegisterMessageHandler(r, 5, 191, s.RequestDirectedChat)
	proto.RegisterMessageHandler(r, 5, 192, s.RequestDirectedChatByName)
	proto.RegisterMessageHandler(r, 5, 193, s.RequestDirectedQuickChat)
	proto.RegisterMessageHandler(r, 5, 194, s.RequestDirectedQuickChatExt)
	proto.RegisterMessageHandler(r, 5, 195, s.RequestJoinChannel)
	proto.RegisterMessageHandler(r, 5, 196, s.RequestJoinChannelByName)
	proto.RegisterMessageHandler(r, 5, 197, s.RequestLeaveChannel)
	proto.RegisterMessageHandler(r, 5, 198, s.RequestLeaveChannelByName)
	proto.RegisterMessageHandler(r, 5, 199, s.RequestMaxFriends)
	proto.RegisterMessageHandler(r, 5, 200, s.RequestRadialChat)
	proto.RegisterMessageHandler(r, 5, 201, s.RequestRadialFriendChat)
	proto.RegisterMessageHandler(r, 5, 202, s.RequestRadialFriendQuickChat)
	proto.RegisterMessageHandler(r, 5, 203, s.RequestRadialOwnerChat)
	proto.RegisterMessageHandler(r, 5, 204, s.RequestRadialQuickChat)
	proto.RegisterMessageHandler(r, 5, 205, s.RequestRadialQuickChatExt)
	proto.RegisterMessageHandler(r, 5, 206, s.RequestSession)
	proto.RegisterMessageHandler(r, 5, 207, s.RequestZoneClusterQuickChat)
	proto.RegisterMessageHandler(r, 5, 208, s.RequestGifts)
	proto.RegisterMessageHandler(r, 5, 209, s.RequestPromotions)
	proto.RegisterMessageHandler(r, 5, 210, s.RestoreCharRsp)
	proto.RegisterMessageHandler(r, 5, 211, s.RetrieveMail)
	proto.RegisterMessageHandler(r, 5, 212, s.RetryTeleport)
	proto.RegisterMessageHandler(r, 5, 213, s.Script)
	proto.RegisterMessageHandler(r, 5, 214, s.SelectBadge)
	proto.RegisterMessageHandler(r, 5, 215, s.SendChatCode)
	proto.RegisterMessageHandler(r, 5, 216, s.SendInteractOptions)
	proto.RegisterMessageHandler(r, 5, 217, s.SendText)
	proto.RegisterMessageHandler(r, 5, 218, s.ServerMove)
	proto.RegisterMessageHandler(r, 5, 219, s.ServerShutdown)
	proto.RegisterMessageHandler(r, 5, 220, s.ServerTeleport)
	proto.RegisterMessageHandler(r, 5, 221, s.ServerTransfer)
	proto.RegisterMessageHandler(r, 5, 222, s.ServerTutorialCommand)
	proto.RegisterMessageHandler(r, 5, 223, s.ServerError)
	proto.RegisterMessageHandler(r, 5, 224, s.SERVERPROCESSRUNNING)
	proto.RegisterMessageHandler(r, 5, 225, s.SESSION)
	proto.RegisterMessageHandler(r, 5, 226, s.SESSIONERROR)
	proto.RegisterMessageHandler(r, 5, 227, s.SESSIONPLAYER)
	proto.RegisterMessageHandler(r, 5, 228, s.SETHOUSECUSTOMIZATION)
	proto.RegisterMessageHandler(r, 5, 229, s.SplitQuantity)
	proto.RegisterMessageHandler(r, 5, 230, s.StartStagedCinematic)
	proto.RegisterMessageHandler(r, 5, 231, s.STARTCLIENTPROCESS)
	proto.RegisterMessageHandler(r, 5, 232, s.STARTSERVERPROCESS)
	proto.RegisterMessageHandler(r, 5, 233, s.SuboptimalBracketResponse)
	proto.RegisterMessageHandler(r, 5, 234, s.TeleportToGameZone)
	proto.RegisterMessageHandler(r, 5, 235, s.TournamentUpdate)
	proto.RegisterMessageHandler(r, 5, 236, s.TransferCharRsp)
	proto.RegisterMessageHandler(r, 5, 237, s.TransferInstance)
	proto.RegisterMessageHandler(r, 5, 238, s.TransferRealms)
	proto.RegisterMessageHandler(r, 5, 239, s.TrashInventoryItem)
	proto.RegisterMessageHandler(r, 5, 240, s.Tutorials)
	proto.RegisterMessageHandler(r, 5, 241, s.UpdateObject)
	proto.RegisterMessageHandler(r, 5, 242, s.UpdateQuantity)
	proto.RegisterMessageHandler(r, 5, 243, s.UpdateZoneCounter)
	proto.RegisterMessageHandler(r, 5, 244, s.UpdateZoneTimer)
	proto.RegisterMessageHandler(r, 5, 245, s.UseChatCode)
	proto.RegisterMessageHandler(r, 5, 246, s.CSRViewAccount)
	proto.RegisterMessageHandler(r, 5, 247, s.WizBang)
	proto.RegisterMessageHandler(r, 5, 248, s.ZombiePlayer)
	proto.RegisterMessageHandler(r, 5, 249, s.ZONEEVENTTIMEREXPIRED)
	proto.RegisterMessageHandler(r, 5, 250, s.ZoneTransfer)
	proto.RegisterMessageHandler(r, 5, 251, s.ZoneTransferAck)
	proto.RegisterMessageHandler(r, 5, 252, s.ZoneTransferNack)
	proto.RegisterMessageHandler(r, 5, 253, s.ZoneTransferRequest)
}

func NewGameClient(c *proto.Client) GameClient {
	return GameClient{c}
}

func (c GameClient) ADCLICKTHROUGH(m *ADCLICKTHROUGH) error {
	return c.c.WriteMessage(5, 1, m)
}

func (c GameClient) AddEffect(m *AddEffect) error {
	return c.c.WriteMessage(5, 2, m)
}

func (c GameClient) AddItemRequest(m *AddItemRequest) error {
	return c.c.WriteMessage(5, 3, m)
}

func (c GameClient) AddObject(m *AddObject) error {
	return c.c.WriteMessage(5, 4, m)
}

func (c GameClient) AddParticle(m *AddParticle) error {
	return c.c.WriteMessage(5, 5, m)
}

func (c GameClient) AddZoneTimer(m *AddZoneTimer) error {
	return c.c.WriteMessage(5, 6, m)
}

func (c GameClient) Attach(m *Attach) error {
	return c.c.WriteMessage(5, 7, m)
}

func (c GameClient) AttachFailed(m *AttachFailed) error {
	return c.c.WriteMessage(5, 8, m)
}

func (c GameClient) AuctionHouseUpdate(m *AuctionHouseUpdate) error {
	return c.c.WriteMessage(5, 9, m)
}

func (c GameClient) Badges(m *Badges) error {
	return c.c.WriteMessage(5, 10, m)
}

func (c GameClient) BanRsp(m *BanRsp) error {
	return c.c.WriteMessage(5, 11, m)
}

func (c GameClient) BestFriend(m *BestFriend) error {
	return c.c.WriteMessage(5, 12, m)
}

func (c GameClient) Blackball(m *Blackball) error {
	return c.c.WriteMessage(5, 13, m)
}

func (c GameClient) BuddyDrop(m *BuddyDrop) error {
	return c.c.WriteMessage(5, 14, m)
}

func (c GameClient) BuddyEntry(m *BuddyEntry) error {
	return c.c.WriteMessage(5, 15, m)
}

func (c GameClient) BuddyListComplete(m *BuddyListComplete) error {
	return c.c.WriteMessage(5, 16, m)
}

func (c GameClient) BuddyRequestAccept(m *BuddyRequestAccept) error {
	return c.c.WriteMessage(5, 17, m)
}

func (c GameClient) BuddyRequestAcceptFwd(m *BuddyRequestAcceptFwd) error {
	return c.c.WriteMessage(5, 18, m)
}

func (c GameClient) BuddyRequestAdd(m *BuddyRequestAdd) error {
	return c.c.WriteMessage(5, 19, m)
}

func (c GameClient) BuddyRequestAddFwd(m *BuddyRequestAddFwd) error {
	return c.c.WriteMessage(5, 20, m)
}

func (c GameClient) BuddyRequestDeny(m *BuddyRequestDeny) error {
	return c.c.WriteMessage(5, 21, m)
}

func (c GameClient) BuddyRequestDenyFwd(m *BuddyRequestDenyFwd) error {
	return c.c.WriteMessage(5, 22, m)
}

func (c GameClient) BuddyRequestDrop(m *BuddyRequestDrop) error {
	return c.c.WriteMessage(5, 23, m)
}

func (c GameClient) BuddyRequestError(m *BuddyRequestError) error {
	return c.c.WriteMessage(5, 24, m)
}

func (c GameClient) BuddyRequestList(m *BuddyRequestList) error {
	return c.c.WriteMessage(5, 25, m)
}

func (c GameClient) BuddyStats(m *BuddyStats) error {
	return c.c.WriteMessage(5, 26, m)
}

func (c GameClient) BuddyStatusUpdate(m *BuddyStatusUpdate) error {
	return c.c.WriteMessage(5, 27, m)
}

func (c GameClient) BugReport(m *BugReport) error {
	return c.c.WriteMessage(5, 28, m)
}

func (c GameClient) BugSubmitResponse(m *BugSubmitResponse) error {
	return c.c.WriteMessage(5, 29, m)
}

func (c GameClient) ChannelChat(m *ChannelChat) error {
	return c.c.WriteMessage(5, 30, m)
}

func (c GameClient) ChannelSubscription(m *ChannelSubscription) error {
	return c.c.WriteMessage(5, 31, m)
}

func (c GameClient) ChatDiagnostics(m *ChatDiagnostics) error {
	return c.c.WriteMessage(5, 32, m)
}

func (c GameClient) ChatError(m *ChatError) error {
	return c.c.WriteMessage(5, 33, m)
}

func (c GameClient) CheckSubscription(m *CheckSubscription) error {
	return c.c.WriteMessage(5, 34, m)
}

func (c GameClient) CheckMail(m *CheckMail) error {
	return c.c.WriteMessage(5, 35, m)
}

func (c GameClient) ClientMove(m *ClientMove) error {
	return c.c.WriteMessage(5, 36, m)
}

func (c GameClient) ClientMoveState(m *ClientMoveState) error {
	return c.c.WriteMessage(5, 37, m)
}

func (c GameClient) ClientNotifyText(m *ClientNotifyText) error {
	return c.c.WriteMessage(5, 38, m)
}

func (c GameClient) ClientTutorialEvent(m *ClientTutorialEvent) error {
	return c.c.WriteMessage(5, 39, m)
}

func (c GameClient) ClientDisconnect(m *ClientDisconnect) error {
	return c.c.WriteMessage(5, 40, m)
}

func (c GameClient) ClientError(m *ClientError) error {
	return c.c.WriteMessage(5, 41, m)
}

func (c GameClient) CLIENTPROCESSTERMINATED(m *CLIENTPROCESSTERMINATED) error {
	return c.c.WriteMessage(5, 42, m)
}

func (c GameClient) CombineInventoryItems(m *CombineInventoryItems) error {
	return c.c.WriteMessage(5, 43, m)
}

func (c GameClient) Command(m *Command) error {
	return c.c.WriteMessage(5, 44, m)
}

func (c GameClient) CommandResult(m *CommandResult) error {
	return c.c.WriteMessage(5, 45, m)
}

func (c GameClient) CompanionEffects(m *CompanionEffects) error {
	return c.c.WriteMessage(5, 46, m)
}

func (c GameClient) CoreEmote(m *CoreEmote) error {
	return c.c.WriteMessage(5, 47, m)
}

func (c GameClient) CreateChannelResponse(m *CreateChannelResponse) error {
	return c.c.WriteMessage(5, 48, m)
}

func (c GameClient) CREATESESSION(m *CREATESESSION) error {
	return c.c.WriteMessage(5, 49, m)
}

func (c GameClient) CSRBankItems(m *CSRBankItems) error {
	return c.c.WriteMessage(5, 50, m)
}

func (c GameClient) CSRBankItemsDone(m *CSRBankItemsDone) error {
	return c.c.WriteMessage(5, 51, m)
}

func (c GameClient) CSREditCharacter(m *CSREditCharacter) error {
	return c.c.WriteMessage(5, 52, m)
}

func (c GameClient) CSREditCharacterFailed(m *CSREditCharacterFailed) error {
	return c.c.WriteMessage(5, 53, m)
}

func (c GameClient) CSRFinishedHouse(m *CSRFinishedHouse) error {
	return c.c.WriteMessage(5, 54, m)
}

func (c GameClient) CSRSearchList(m *CSRSearchList) error {
	return c.c.WriteMessage(5, 55, m)
}

func (c GameClient) CSRMailData(m *CSRMailData) error {
	return c.c.WriteMessage(5, 56, m)
}

func (c GameClient) CSRReceiveGifts(m *CSRReceiveGifts) error {
	return c.c.WriteMessage(5, 57, m)
}

func (c GameClient) DEBUGDELETEALLOBJECTS(m *DEBUGDELETEALLOBJECTS) error {
	return c.c.WriteMessage(5, 58, m)
}

func (c GameClient) DeleteObject(m *DeleteObject) error {
	return c.c.WriteMessage(5, 59, m)
}

func (c GameClient) DeleteGift(m *DeleteGift) error {
	return c.c.WriteMessage(5, 60, m)
}

func (c GameClient) DirectedChat(m *DirectedChat) error {
	return c.c.WriteMessage(5, 61, m)
}

func (c GameClient) DirectedChatByNameResponse(m *DirectedChatByNameResponse) error {
	return c.c.WriteMessage(5, 62, m)
}

func (c GameClient) DirectedChatFail(m *DirectedChatFail) error {
	return c.c.WriteMessage(5, 63, m)
}

func (c GameClient) DirectedQuickChat(m *DirectedQuickChat) error {
	return c.c.WriteMessage(5, 64, m)
}

func (c GameClient) DirectedQuickChatExt(m *DirectedQuickChatExt) error {
	return c.c.WriteMessage(5, 65, m)
}

func (c GameClient) DisconnectAfk(m *DisconnectAfk) error {
	return c.c.WriteMessage(5, 66, m)
}

func (c GameClient) DownloadBrowser(m *DownloadBrowser) error {
	return c.c.WriteMessage(5, 67, m)
}

func (c GameClient) DownloadPackage(m *DownloadPackage) error {
	return c.c.WriteMessage(5, 68, m)
}

func (c GameClient) DownloadPackageElement(m *DownloadPackageElement) error {
	return c.c.WriteMessage(5, 69, m)
}

func (c GameClient) DynaModBehaviorUpdateMods(m *DynaModBehaviorUpdateMods) error {
	return c.c.WriteMessage(5, 70, m)
}

func (c GameClient) DynaModDump(m *DynaModDump) error {
	return c.c.WriteMessage(5, 71, m)
}

func (c GameClient) EnterState(m *EnterState) error {
	return c.c.WriteMessage(5, 72, m)
}

func (c GameClient) EquipItem(m *EquipItem) error {
	return c.c.WriteMessage(5, 73, m)
}

func (c GameClient) EquipmentBehaviorEquipItem(m *EquipmentBehaviorEquipItem) error {
	return c.c.WriteMessage(5, 74, m)
}

func (c GameClient) EquipmentBehaviorPublicEquipItem(m *EquipmentBehaviorPublicEquipItem) error {
	return c.c.WriteMessage(5, 75, m)
}

func (c GameClient) EquipmentBehaviorPublicUnequipItem(m *EquipmentBehaviorPublicUnequipItem) error {
	return c.c.WriteMessage(5, 76, m)
}

func (c GameClient) EquipmentBehaviorUnequipItem(m *EquipmentBehaviorUnequipItem) error {
	return c.c.WriteMessage(5, 77, m)
}

func (c GameClient) FeedInventoryItem(m *FeedInventoryItem) error {
	return c.c.WriteMessage(5, 78, m)
}

func (c GameClient) FINDSESSIONS(m *FINDSESSIONS) error {
	return c.c.WriteMessage(5, 79, m)
}

func (c GameClient) FINDSESSIONPLAYERS(m *FINDSESSIONPLAYERS) error {
	return c.c.WriteMessage(5, 80, m)
}

func (c GameClient) GenericGame(m *GenericGame) error {
	return c.c.WriteMessage(5, 81, m)
}

func (c GameClient) GetLadder(m *GetLadder) error {
	return c.c.WriteMessage(5, 82, m)
}

func (c GameClient) GETRANKINGS(m *GETRANKINGS) error {
	return c.c.WriteMessage(5, 83, m)
}

func (c GameClient) GiftRedeemed(m *GiftRedeemed) error {
	return c.c.WriteMessage(5, 84, m)
}

func (c GameClient) GotoPlayer(m *GotoPlayer) error {
	return c.c.WriteMessage(5, 85, m)
}

func (c GameClient) GotoPlayerResponse(m *GotoPlayerResponse) error {
	return c.c.WriteMessage(5, 86, m)
}

func (c GameClient) HarassmentReport(m *HarassmentReport) error {
	return c.c.WriteMessage(5, 87, m)
}

func (c GameClient) IgnoreAdd(m *IgnoreAdd) error {
	return c.c.WriteMessage(5, 88, m)
}

func (c GameClient) IgnoreDrop(m *IgnoreDrop) error {
	return c.c.WriteMessage(5, 89, m)
}

func (c GameClient) IgnoreList(m *IgnoreList) error {
	return c.c.WriteMessage(5, 90, m)
}

func (c GameClient) InteractObject(m *InteractObject) error {
	return c.c.WriteMessage(5, 91, m)
}

func (c GameClient) InteractOption(m *InteractOption) error {
	return c.c.WriteMessage(5, 92, m)
}

func (c GameClient) INVENTORYBEHAVIORADDITEM(m *INVENTORYBEHAVIORADDITEM) error {
	return c.c.WriteMessage(5, 93, m)
}

func (c GameClient) INVENTORYBEHAVIORREMOVEITEM(m *INVENTORYBEHAVIORREMOVEITEM) error {
	return c.c.WriteMessage(5, 94, m)
}

func (c GameClient) INVENTORYBEHAVIORTRADEITEM(m *INVENTORYBEHAVIORTRADEITEM) error {
	return c.c.WriteMessage(5, 95, m)
}

func (c GameClient) InviteFriend(m *InviteFriend) error {
	return c.c.WriteMessage(5, 96, m)
}

func (c GameClient) InviteResponse(m *InviteResponse) error {
	return c.c.WriteMessage(5, 97, m)
}

func (c GameClient) JoinChannelResponse(m *JoinChannelResponse) error {
	return c.c.WriteMessage(5, 98, m)
}

func (c GameClient) JOINSESSION(m *JOINSESSION) error {
	return c.c.WriteMessage(5, 99, m)
}

func (c GameClient) Jump(m *Jump) error {
	return c.c.WriteMessage(5, 100, m)
}

func (c GameClient) KILLCLIENTPROCESS(m *KILLCLIENTPROCESS) error {
	return c.c.WriteMessage(5, 101, m)
}

func (c GameClient) LADDER(m *LADDER) error {
	return c.c.WriteMessage(5, 102, m)
}

func (c GameClient) LeaveChannelResponse(m *LeaveChannelResponse) error {
	return c.c.WriteMessage(5, 103, m)
}

func (c GameClient) LeaveHousingLot(m *LeaveHousingLot) error {
	return c.c.WriteMessage(5, 104, m)
}

func (c GameClient) LeaveServiceRange(m *LeaveServiceRange) error {
	return c.c.WriteMessage(5, 105, m)
}

func (c GameClient) LeaveState(m *LeaveState) error {
	return c.c.WriteMessage(5, 106, m)
}

func (c GameClient) LOADSAVEOBJECTS(m *LOADSAVEOBJECTS) error {
	return c.c.WriteMessage(5, 107, m)
}

func (c GameClient) LoginComplete(m *LoginComplete) error {
	return c.c.WriteMessage(5, 108, m)
}

func (c GameClient) MailData(m *MailData) error {
	return c.c.WriteMessage(5, 109, m)
}

func (c GameClient) MarkLocation(m *MarkLocation) error {
	return c.c.WriteMessage(5, 110, m)
}

func (c GameClient) MarkLocationResponse(m *MarkLocationResponse) error {
	return c.c.WriteMessage(5, 111, m)
}

func (c GameClient) MatchAward(m *MatchAward) error {
	return c.c.WriteMessage(5, 112, m)
}

func (c GameClient) MatchInvite(m *MatchInvite) error {
	return c.c.WriteMessage(5, 113, m)
}

func (c GameClient) MatchMakerUpdate(m *MatchMakerUpdate) error {
	return c.c.WriteMessage(5, 114, m)
}

func (c GameClient) MatchReady(m *MatchReady) error {
	return c.c.WriteMessage(5, 115, m)
}

func (c GameClient) MatchResult(m *MatchResult) error {
	return c.c.WriteMessage(5, 116, m)
}

func (c GameClient) MESSAGEPROCESS(m *MESSAGEPROCESS) error {
	return c.c.WriteMessage(5, 117, m)
}

func (c GameClient) MoveCorrection(m *MoveCorrection) error {
	return c.c.WriteMessage(5, 118, m)
}

func (c GameClient) MoveState(m *MoveState) error {
	return c.c.WriteMessage(5, 119, m)
}

func (c GameClient) Mute(m *Mute) error {
	return c.c.WriteMessage(5, 120, m)
}

func (c GameClient) MuteRsp(m *MuteRsp) error {
	return c.c.WriteMessage(5, 121, m)
}

func (c GameClient) NewObject(m *NewObject) error {
	return c.c.WriteMessage(5, 122, m)
}

func (c GameClient) NewSysStats(m *NewSysStats) error {
	return c.c.WriteMessage(5, 123, m)
}

func (c GameClient) NewTickCnt(m *NewTickCnt) error {
	return c.c.WriteMessage(5, 124, m)
}

func (c GameClient) NewTourneyRewards(m *NewTourneyRewards) error {
	return c.c.WriteMessage(5, 125, m)
}

func (c GameClient) NewMail(m *NewMail) error {
	return c.c.WriteMessage(5, 126, m)
}

func (c GameClient) NotifyChannelInstance(m *NotifyChannelInstance) error {
	return c.c.WriteMessage(5, 127, m)
}

func (c GameClient) NotifyGift(m *NotifyGift) error {
	return c.c.WriteMessage(5, 128, m)
}

func (c GameClient) NotMuted(m *NotMuted) error {
	return c.c.WriteMessage(5, 129, m)
}

func (c GameClient) NotAfk(m *NotAfk) error {
	return c.c.WriteMessage(5, 130, m)
}

func (c GameClient) NPCSpeech(m *NPCSpeech) error {
	return c.c.WriteMessage(5, 131, m)
}

func (c GameClient) ObjectInfoQuery(m *ObjectInfoQuery) error {
	return c.c.WriteMessage(5, 132, m)
}

func (c GameClient) PartyDisband(m *PartyDisband) error {
	return c.c.WriteMessage(5, 133, m)
}

func (c GameClient) PartyJoinFailed(m *PartyJoinFailed) error {
	return c.c.WriteMessage(5, 134, m)
}

func (c GameClient) PartyJoinNotification(m *PartyJoinNotification) error {
	return c.c.WriteMessage(5, 135, m)
}

func (c GameClient) PartyLeave(m *PartyLeave) error {
	return c.c.WriteMessage(5, 136, m)
}

func (c GameClient) PartyLeaveNotification(m *PartyLeaveNotification) error {
	return c.c.WriteMessage(5, 137, m)
}

func (c GameClient) PartyLevelUp(m *PartyLevelUp) error {
	return c.c.WriteMessage(5, 138, m)
}

func (c GameClient) PartyLevelUpUpdate(m *PartyLevelUpUpdate) error {
	return c.c.WriteMessage(5, 139, m)
}

func (c GameClient) PartyMultiPlayerMountEquip(m *PartyMultiPlayerMountEquip) error {
	return c.c.WriteMessage(5, 140, m)
}

func (c GameClient) PartyMultiPlayerMountEquipUpdate(m *PartyMultiPlayerMountEquipUpdate) error {
	return c.c.WriteMessage(5, 141, m)
}

func (c GameClient) PartyMultiPlayerMountJoin(m *PartyMultiPlayerMountJoin) error {
	return c.c.WriteMessage(5, 142, m)
}

func (c GameClient) PartyMultiPlayerMountJoinUpdate(m *PartyMultiPlayerMountJoinUpdate) error {
	return c.c.WriteMessage(5, 143, m)
}

func (c GameClient) PartyRequestAccept(m *PartyRequestAccept) error {
	return c.c.WriteMessage(5, 144, m)
}

func (c GameClient) PartyRequestDecline(m *PartyRequestDecline) error {
	return c.c.WriteMessage(5, 145, m)
}

func (c GameClient) PartyRequestInvite(m *PartyRequestInvite) error {
	return c.c.WriteMessage(5, 146, m)
}

func (c GameClient) PartyRequestJoin(m *PartyRequestJoin) error {
	return c.c.WriteMessage(5, 147, m)
}

func (c GameClient) PartyRequestMemberZones(m *PartyRequestMemberZones) error {
	return c.c.WriteMessage(5, 148, m)
}

func (c GameClient) PartyRequestResponse(m *PartyRequestResponse) error {
	return c.c.WriteMessage(5, 149, m)
}

func (c GameClient) PartyRequestTimeout(m *PartyRequestTimeout) error {
	return c.c.WriteMessage(5, 150, m)
}

func (c GameClient) PartySubmitMemberZones(m *PartySubmitMemberZones) error {
	return c.c.WriteMessage(5, 151, m)
}

func (c GameClient) PartyUpdate(m *PartyUpdate) error {
	return c.c.WriteMessage(5, 152, m)
}

func (c GameClient) PartyZoneRequest(m *PartyZoneRequest) error {
	return c.c.WriteMessage(5, 153, m)
}

func (c GameClient) PartyZoneRequestResponse(m *PartyZoneRequestResponse) error {
	return c.c.WriteMessage(5, 154, m)
}

func (c GameClient) PickUpObject(m *PickUpObject) error {
	return c.c.WriteMessage(5, 155, m)
}

func (c GameClient) PlaceObject(m *PlaceObject) error {
	return c.c.WriteMessage(5, 156, m)
}

func (c GameClient) PlayCinematic(m *PlayCinematic) error {
	return c.c.WriteMessage(5, 157, m)
}

func (c GameClient) PlayerBlackballedAlert(m *PlayerBlackballedAlert) error {
	return c.c.WriteMessage(5, 158, m)
}

func (c GameClient) PlayerReadyAck(m *PlayerReadyAck) error {
	return c.c.WriteMessage(5, 159, m)
}

func (c GameClient) PlaySound(m *PlaySound) error {
	return c.c.WriteMessage(5, 160, m)
}

func (c GameClient) PostZoneEventFromClient(m *PostZoneEventFromClient) error {
	return c.c.WriteMessage(5, 161, m)
}

func (c GameClient) PreviewIsland(m *PreviewIsland) error {
	return c.c.WriteMessage(5, 162, m)
}

func (c GameClient) PvPUpdateInfo(m *PvPUpdateInfo) error {
	return c.c.WriteMessage(5, 163, m)
}

func (c GameClient) QueryLogout(m *QueryLogout) error {
	return c.c.WriteMessage(5, 164, m)
}

func (c GameClient) RadialChat(m *RadialChat) error {
	return c.c.WriteMessage(5, 165, m)
}

func (c GameClient) RadialQuickChat(m *RadialQuickChat) error {
	return c.c.WriteMessage(5, 166, m)
}

func (c GameClient) RadialQuickChatExt(m *RadialQuickChatExt) error {
	return c.c.WriteMessage(5, 167, m)
}

func (c GameClient) RadialZoneClusterQuickChat(m *RadialZoneClusterQuickChat) error {
	return c.c.WriteMessage(5, 168, m)
}

func (c GameClient) RANKING(m *RANKING) error {
	return c.c.WriteMessage(5, 169, m)
}

func (c GameClient) RealmInfoQuery(m *RealmInfoQuery) error {
	return c.c.WriteMessage(5, 170, m)
}

func (c GameClient) RecallLocation(m *RecallLocation) error {
	return c.c.WriteMessage(5, 171, m)
}

func (c GameClient) ReceiveGifts(m *ReceiveGifts) error {
	return c.c.WriteMessage(5, 172, m)
}

func (c GameClient) ReceivePromotions(m *ReceivePromotions) error {
	return c.c.WriteMessage(5, 173, m)
}

func (c GameClient) RedeemGift(m *RedeemGift) error {
	return c.c.WriteMessage(5, 174, m)
}

func (c GameClient) RedeemMailGift(m *RedeemMailGift) error {
	return c.c.WriteMessage(5, 175, m)
}

func (c GameClient) RedeemMailGiftResponse(m *RedeemMailGiftResponse) error {
	return c.c.WriteMessage(5, 176, m)
}

func (c GameClient) ReleaseDelay(m *ReleaseDelay) error {
	return c.c.WriteMessage(5, 177, m)
}

func (c GameClient) ReloadTemplateDir(m *ReloadTemplateDir) error {
	return c.c.WriteMessage(5, 178, m)
}

func (c GameClient) RemovedShopper(m *RemovedShopper) error {
	return c.c.WriteMessage(5, 179, m)
}

func (c GameClient) RemoveEffect(m *RemoveEffect) error {
	return c.c.WriteMessage(5, 180, m)
}

func (c GameClient) RemoveItemRequest(m *RemoveItemRequest) error {
	return c.c.WriteMessage(5, 181, m)
}

func (c GameClient) RemoveObject(m *RemoveObject) error {
	return c.c.WriteMessage(5, 182, m)
}

func (c GameClient) RemoveParticle(m *RemoveParticle) error {
	return c.c.WriteMessage(5, 183, m)
}

func (c GameClient) RemoveZoneTimer(m *RemoveZoneTimer) error {
	return c.c.WriteMessage(5, 184, m)
}

func (c GameClient) ReportAdTakeover(m *ReportAdTakeover) error {
	return c.c.WriteMessage(5, 185, m)
}

func (c GameClient) ReqAskServer(m *ReqAskServer) error {
	return c.c.WriteMessage(5, 186, m)
}

func (c GameClient) ReqChatDiagnostics(m *ReqChatDiagnostics) error {
	return c.c.WriteMessage(5, 187, m)
}

func (c GameClient) RequestAdvanceChannelInstance(m *RequestAdvanceChannelInstance) error {
	return c.c.WriteMessage(5, 188, m)
}

func (c GameClient) RequestChatCode(m *RequestChatCode) error {
	return c.c.WriteMessage(5, 189, m)
}

func (c GameClient) RequestCreateChannel(m *RequestCreateChannel) error {
	return c.c.WriteMessage(5, 190, m)
}

func (c GameClient) RequestDirectedChat(m *RequestDirectedChat) error {
	return c.c.WriteMessage(5, 191, m)
}

func (c GameClient) RequestDirectedChatByName(m *RequestDirectedChatByName) error {
	return c.c.WriteMessage(5, 192, m)
}

func (c GameClient) RequestDirectedQuickChat(m *RequestDirectedQuickChat) error {
	return c.c.WriteMessage(5, 193, m)
}

func (c GameClient) RequestDirectedQuickChatExt(m *RequestDirectedQuickChatExt) error {
	return c.c.WriteMessage(5, 194, m)
}

func (c GameClient) RequestJoinChannel(m *RequestJoinChannel) error {
	return c.c.WriteMessage(5, 195, m)
}

func (c GameClient) RequestJoinChannelByName(m *RequestJoinChannelByName) error {
	return c.c.WriteMessage(5, 196, m)
}

func (c GameClient) RequestLeaveChannel(m *RequestLeaveChannel) error {
	return c.c.WriteMessage(5, 197, m)
}

func (c GameClient) RequestLeaveChannelByName(m *RequestLeaveChannelByName) error {
	return c.c.WriteMessage(5, 198, m)
}

func (c GameClient) RequestMaxFriends(m *RequestMaxFriends) error {
	return c.c.WriteMessage(5, 199, m)
}

func (c GameClient) RequestRadialChat(m *RequestRadialChat) error {
	return c.c.WriteMessage(5, 200, m)
}

func (c GameClient) RequestRadialFriendChat(m *RequestRadialFriendChat) error {
	return c.c.WriteMessage(5, 201, m)
}

func (c GameClient) RequestRadialFriendQuickChat(m *RequestRadialFriendQuickChat) error {
	return c.c.WriteMessage(5, 202, m)
}

func (c GameClient) RequestRadialOwnerChat(m *RequestRadialOwnerChat) error {
	return c.c.WriteMessage(5, 203, m)
}

func (c GameClient) RequestRadialQuickChat(m *RequestRadialQuickChat) error {
	return c.c.WriteMessage(5, 204, m)
}

func (c GameClient) RequestRadialQuickChatExt(m *RequestRadialQuickChatExt) error {
	return c.c.WriteMessage(5, 205, m)
}

func (c GameClient) RequestSession(m *RequestSession) error {
	return c.c.WriteMessage(5, 206, m)
}

func (c GameClient) RequestZoneClusterQuickChat(m *RequestZoneClusterQuickChat) error {
	return c.c.WriteMessage(5, 207, m)
}

func (c GameClient) RequestGifts(m *RequestGifts) error {
	return c.c.WriteMessage(5, 208, m)
}

func (c GameClient) RequestPromotions(m *RequestPromotions) error {
	return c.c.WriteMessage(5, 209, m)
}

func (c GameClient) RestoreCharRsp(m *RestoreCharRsp) error {
	return c.c.WriteMessage(5, 210, m)
}

func (c GameClient) RetrieveMail(m *RetrieveMail) error {
	return c.c.WriteMessage(5, 211, m)
}

func (c GameClient) RetryTeleport(m *RetryTeleport) error {
	return c.c.WriteMessage(5, 212, m)
}

func (c GameClient) Script(m *Script) error {
	return c.c.WriteMessage(5, 213, m)
}

func (c GameClient) SelectBadge(m *SelectBadge) error {
	return c.c.WriteMessage(5, 214, m)
}

func (c GameClient) SendChatCode(m *SendChatCode) error {
	return c.c.WriteMessage(5, 215, m)
}

func (c GameClient) SendInteractOptions(m *SendInteractOptions) error {
	return c.c.WriteMessage(5, 216, m)
}

func (c GameClient) SendText(m *SendText) error {
	return c.c.WriteMessage(5, 217, m)
}

func (c GameClient) ServerMove(m *ServerMove) error {
	return c.c.WriteMessage(5, 218, m)
}

func (c GameClient) ServerShutdown(m *ServerShutdown) error {
	return c.c.WriteMessage(5, 219, m)
}

func (c GameClient) ServerTeleport(m *ServerTeleport) error {
	return c.c.WriteMessage(5, 220, m)
}

func (c GameClient) ServerTransfer(m *ServerTransfer) error {
	return c.c.WriteMessage(5, 221, m)
}

func (c GameClient) ServerTutorialCommand(m *ServerTutorialCommand) error {
	return c.c.WriteMessage(5, 222, m)
}

func (c GameClient) ServerError(m *ServerError) error {
	return c.c.WriteMessage(5, 223, m)
}

func (c GameClient) SERVERPROCESSRUNNING(m *SERVERPROCESSRUNNING) error {
	return c.c.WriteMessage(5, 224, m)
}

func (c GameClient) SESSION(m *SESSION) error {
	return c.c.WriteMessage(5, 225, m)
}

func (c GameClient) SESSIONERROR(m *SESSIONERROR) error {
	return c.c.WriteMessage(5, 226, m)
}

func (c GameClient) SESSIONPLAYER(m *SESSIONPLAYER) error {
	return c.c.WriteMessage(5, 227, m)
}

func (c GameClient) SETHOUSECUSTOMIZATION(m *SETHOUSECUSTOMIZATION) error {
	return c.c.WriteMessage(5, 228, m)
}

func (c GameClient) SplitQuantity(m *SplitQuantity) error {
	return c.c.WriteMessage(5, 229, m)
}

func (c GameClient) StartStagedCinematic(m *StartStagedCinematic) error {
	return c.c.WriteMessage(5, 230, m)
}

func (c GameClient) STARTCLIENTPROCESS(m *STARTCLIENTPROCESS) error {
	return c.c.WriteMessage(5, 231, m)
}

func (c GameClient) STARTSERVERPROCESS(m *STARTSERVERPROCESS) error {
	return c.c.WriteMessage(5, 232, m)
}

func (c GameClient) SuboptimalBracketResponse(m *SuboptimalBracketResponse) error {
	return c.c.WriteMessage(5, 233, m)
}

func (c GameClient) TeleportToGameZone(m *TeleportToGameZone) error {
	return c.c.WriteMessage(5, 234, m)
}

func (c GameClient) TournamentUpdate(m *TournamentUpdate) error {
	return c.c.WriteMessage(5, 235, m)
}

func (c GameClient) TransferCharRsp(m *TransferCharRsp) error {
	return c.c.WriteMessage(5, 236, m)
}

func (c GameClient) TransferInstance(m *TransferInstance) error {
	return c.c.WriteMessage(5, 237, m)
}

func (c GameClient) TransferRealms(m *TransferRealms) error {
	return c.c.WriteMessage(5, 238, m)
}

func (c GameClient) TrashInventoryItem(m *TrashInventoryItem) error {
	return c.c.WriteMessage(5, 239, m)
}

func (c GameClient) Tutorials(m *Tutorials) error {
	return c.c.WriteMessage(5, 240, m)
}

func (c GameClient) UpdateObject(m *UpdateObject) error {
	return c.c.WriteMessage(5, 241, m)
}

func (c GameClient) UpdateQuantity(m *UpdateQuantity) error {
	return c.c.WriteMessage(5, 242, m)
}

func (c GameClient) UpdateZoneCounter(m *UpdateZoneCounter) error {
	return c.c.WriteMessage(5, 243, m)
}

func (c GameClient) UpdateZoneTimer(m *UpdateZoneTimer) error {
	return c.c.WriteMessage(5, 244, m)
}

func (c GameClient) UseChatCode(m *UseChatCode) error {
	return c.c.WriteMessage(5, 245, m)
}

func (c GameClient) CSRViewAccount(m *CSRViewAccount) error {
	return c.c.WriteMessage(5, 246, m)
}

func (c GameClient) WizBang(m *WizBang) error {
	return c.c.WriteMessage(5, 247, m)
}

func (c GameClient) ZombiePlayer(m *ZombiePlayer) error {
	return c.c.WriteMessage(5, 248, m)
}

func (c GameClient) ZONEEVENTTIMEREXPIRED(m *ZONEEVENTTIMEREXPIRED) error {
	return c.c.WriteMessage(5, 249, m)
}

func (c GameClient) ZoneTransfer(m *ZoneTransfer) error {
	return c.c.WriteMessage(5, 250, m)
}

func (c GameClient) ZoneTransferAck(m *ZoneTransferAck) error {
	return c.c.WriteMessage(5, 251, m)
}

func (c GameClient) ZoneTransferNack(m *ZoneTransferNack) error {
	return c.c.WriteMessage(5, 252, m)
}

func (c GameClient) ZoneTransferRequest(m *ZoneTransferRequest) error {
	return c.c.WriteMessage(5, 253, m)
}

type ADCLICKTHROUGH struct {
	Partner string
	URL     string
}

func (s *ADCLICKTHROUGH) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Partner)+len(s.URL)))
	writeString_5(b, s.Partner)
	writeString_5(b, s.URL)
	return b.Bytes()
}

func (s *ADCLICKTHROUGH) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Partner, err = readString_5(b); err != nil {
		return err
	}
	if s.URL, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type AddEffect struct {
	GameObjectID uint64
	EffectData   string
}

func (s *AddEffect) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.EffectData)))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	writeString_5(b, s.EffectData)
	return b.Bytes()
}

func (s *AddEffect) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.EffectData, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type AddItemRequest struct {
	GlobalID       uint64
	ItemTemplateID uint64
	Quantity       int32
}

func (s *AddItemRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemTemplateID)
	binary.Write(b, binary.LittleEndian, s.Quantity)
	return b.Bytes()
}

func (s *AddItemRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type AddObject struct {
	GameObjectID uint64
	LocationX    float32
	LocationY    float32
	LocationZ    float32
	Direction    float32
	Name         string
	TemplateID   uint64
}

func (s *AddObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 34+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	binary.Write(b, binary.LittleEndian, s.LocationX)
	binary.Write(b, binary.LittleEndian, s.LocationY)
	binary.Write(b, binary.LittleEndian, s.LocationZ)
	binary.Write(b, binary.LittleEndian, s.Direction)
	writeString_5(b, s.Name)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	return b.Bytes()
}

func (s *AddObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type AddParticle struct {
	Asset     string
	NewName   string
	AttachTo  string
	Loop      uint8
	FloatText string
	ChatText  string
	ChatArgs  string
	Sound     string
	ParentID  uint64
}

func (s *AddParticle) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23+len(s.Asset)+len(s.NewName)+len(s.AttachTo)+len(s.FloatText)+len(s.ChatText)+len(s.ChatArgs)+len(s.Sound)))
	writeString_5(b, s.Asset)
	writeString_5(b, s.NewName)
	writeString_5(b, s.AttachTo)
	binary.Write(b, binary.LittleEndian, s.Loop)
	writeString_5(b, s.FloatText)
	writeString_5(b, s.ChatText)
	writeString_5(b, s.ChatArgs)
	writeString_5(b, s.Sound)
	binary.Write(b, binary.LittleEndian, s.ParentID)
	return b.Bytes()
}

func (s *AddParticle) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Asset, err = readString_5(b); err != nil {
		return err
	}
	if s.NewName, err = readString_5(b); err != nil {
		return err
	}
	if s.AttachTo, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Loop); err != nil {
		return err
	}
	if s.FloatText, err = readString_5(b); err != nil {
		return err
	}
	if s.ChatText, err = readString_5(b); err != nil {
		return err
	}
	if s.ChatArgs, err = readString_5(b); err != nil {
		return err
	}
	if s.Sound, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	return nil
}

type AddZoneTimer struct {
	TimerID       int32
	Title         string
	TimerUI       string
	CountdownTime float32
}

func (s *AddZoneTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.Title)+len(s.TimerUI)))
	binary.Write(b, binary.LittleEndian, s.TimerID)
	writeString_5(b, s.Title)
	writeString_5(b, s.TimerUI)
	binary.Write(b, binary.LittleEndian, s.CountdownTime)
	return b.Bytes()
}

func (s *AddZoneTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TimerID); err != nil {
		return err
	}
	if s.Title, err = readString_5(b); err != nil {
		return err
	}
	if s.TimerUI, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CountdownTime); err != nil {
		return err
	}
	return nil
}

type Attach struct {
	GameObjectID   uint64
	LoginKey       string
	UserID         uint64
	CharID         uint64
	ZoneName       string
	Location       string
	TargetPlayerID uint64
	ZoneID         uint64
	Slot           int32
	SessionID      uint64
	SessionSlot    int32
	PassKey        string
	Reattach       uint8
	Retry          uint8
	Locale         string
	MachineID      uint64
}

func (s *Attach) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 76+len(s.LoginKey)+len(s.ZoneName)+len(s.Location)+len(s.PassKey)+len(s.Locale)))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	writeString_5(b, s.LoginKey)
	binary.Write(b, binary.LittleEndian, s.UserID)
	binary.Write(b, binary.LittleEndian, s.CharID)
	writeString_5(b, s.ZoneName)
	writeString_5(b, s.Location)
	binary.Write(b, binary.LittleEndian, s.TargetPlayerID)
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.Slot)
	binary.Write(b, binary.LittleEndian, s.SessionID)
	binary.Write(b, binary.LittleEndian, s.SessionSlot)
	writeString_5(b, s.PassKey)
	binary.Write(b, binary.LittleEndian, s.Reattach)
	binary.Write(b, binary.LittleEndian, s.Retry)
	writeString_5(b, s.Locale)
	binary.Write(b, binary.LittleEndian, s.MachineID)
	return b.Bytes()
}

func (s *Attach) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.LoginKey, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharID); err != nil {
		return err
	}
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if s.Location, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetPlayerID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Slot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionSlot); err != nil {
		return err
	}
	if s.PassKey, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Reattach); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Retry); err != nil {
		return err
	}
	if s.Locale, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MachineID); err != nil {
		return err
	}
	return nil
}

type AttachFailed struct {
	Error        uint32
	Rejected     uint32
	NoDisconnect uint32
}

func (s *AttachFailed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.Error)
	binary.Write(b, binary.LittleEndian, s.Rejected)
	binary.Write(b, binary.LittleEndian, s.NoDisconnect)
	return b.Bytes()
}

func (s *AttachFailed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Rejected); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NoDisconnect); err != nil {
		return err
	}
	return nil
}

type AuctionHouseUpdate struct {
	UpdateInfo  string
	CharacterID uint64
}

func (s *AuctionHouseUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.UpdateInfo)))
	writeString_5(b, s.UpdateInfo)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	return b.Bytes()
}

func (s *AuctionHouseUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.UpdateInfo, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type Badges struct {
	CurrentBadge    uint32
	UpdateAll       int8
	TotalBadges     uint32
	Add             int8
	Remove          int8
	BadgeName       string
	BadgeInfo       string
	BadgeNameID     uint32
	BadgeFilterInfo string
	Display         uint8
}

func (s *Badges) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.BadgeName)+len(s.BadgeInfo)+len(s.BadgeFilterInfo)))
	binary.Write(b, binary.LittleEndian, s.CurrentBadge)
	binary.Write(b, binary.LittleEndian, s.UpdateAll)
	binary.Write(b, binary.LittleEndian, s.TotalBadges)
	binary.Write(b, binary.LittleEndian, s.Add)
	binary.Write(b, binary.LittleEndian, s.Remove)
	writeString_5(b, s.BadgeName)
	writeString_5(b, s.BadgeInfo)
	binary.Write(b, binary.LittleEndian, s.BadgeNameID)
	writeString_5(b, s.BadgeFilterInfo)
	binary.Write(b, binary.LittleEndian, s.Display)
	return b.Bytes()
}

func (s *Badges) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CurrentBadge); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpdateAll); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalBadges); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	if s.BadgeName, err = readString_5(b); err != nil {
		return err
	}
	if s.BadgeInfo, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BadgeNameID); err != nil {
		return err
	}
	if s.BadgeFilterInfo, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Display); err != nil {
		return err
	}
	return nil
}

type BanRsp struct {
	BannedID string
	BanTime  string
	BanType  string
	Success  uint8
}

func (s *BanRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.BannedID)+len(s.BanTime)+len(s.BanType)))
	writeString_5(b, s.BannedID)
	writeString_5(b, s.BanTime)
	writeString_5(b, s.BanType)
	binary.Write(b, binary.LittleEndian, s.Success)
	return b.Bytes()
}

func (s *BanRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.BannedID, err = readString_5(b); err != nil {
		return err
	}
	if s.BanTime, err = readString_5(b); err != nil {
		return err
	}
	if s.BanType, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type BestFriend struct {
	ListOwnerGID uint64
	BuddyID      uint64
	Forwarded    uint8
	FriendSymbol uint8
}

func (s *BestFriend) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.BuddyID)
	binary.Write(b, binary.LittleEndian, s.Forwarded)
	binary.Write(b, binary.LittleEndian, s.FriendSymbol)
	return b.Bytes()
}

func (s *BestFriend) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BuddyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendSymbol); err != nil {
		return err
	}
	return nil
}

type Blackball struct {
	TargetObjID    uint64
	HarassmentType string
	ChatLog        string
	IsMute         int8
	IsCharacterID  int8
}

func (s *Blackball) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.HarassmentType)+len(s.ChatLog)))
	binary.Write(b, binary.LittleEndian, s.TargetObjID)
	writeString_5(b, s.HarassmentType)
	writeString_5(b, s.ChatLog)
	binary.Write(b, binary.LittleEndian, s.IsMute)
	binary.Write(b, binary.LittleEndian, s.IsCharacterID)
	return b.Bytes()
}

func (s *Blackball) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetObjID); err != nil {
		return err
	}
	if s.HarassmentType, err = readString_5(b); err != nil {
		return err
	}
	if s.ChatLog, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsMute); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsCharacterID); err != nil {
		return err
	}
	return nil
}

type BuddyDrop struct {
	ListOwnerGID uint64
	EntryGID     uint64
}

func (s *BuddyDrop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	return b.Bytes()
}

func (s *BuddyDrop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	return nil
}

type BuddyEntry struct {
	ListOwnerGID     uint64
	EntryGID         uint64
	GameObjectID     uint64
	Name             string
	Status           uint8
	FriendInfo       uint32
	PasswordChat     uint8
	Permissions      uint32
	ZoneName         string
	RealmName        string
	Locale           uint32
	FriendDate       uint32
	FriendStatusDate uint32
	PreviousName     string
}

func (s *BuddyEntry) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 54+len(s.Name)+len(s.ZoneName)+len(s.RealmName)+len(s.PreviousName)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	writeString_5(b, s.Name)
	binary.Write(b, binary.LittleEndian, s.Status)
	binary.Write(b, binary.LittleEndian, s.FriendInfo)
	binary.Write(b, binary.LittleEndian, s.PasswordChat)
	binary.Write(b, binary.LittleEndian, s.Permissions)
	writeString_5(b, s.ZoneName)
	writeString_5(b, s.RealmName)
	binary.Write(b, binary.LittleEndian, s.Locale)
	binary.Write(b, binary.LittleEndian, s.FriendDate)
	binary.Write(b, binary.LittleEndian, s.FriendStatusDate)
	writeString_5(b, s.PreviousName)
	return b.Bytes()
}

func (s *BuddyEntry) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendInfo); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PasswordChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if s.RealmName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Locale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendDate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendStatusDate); err != nil {
		return err
	}
	if s.PreviousName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type BuddyListComplete struct {
	ListOwnerGID uint64
}

func (s *BuddyListComplete) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	return b.Bytes()
}

func (s *BuddyListComplete) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	return nil
}

type BuddyRequestAccept struct {
	ListOwnerGID     uint64
	EntryGID         uint64
	OwnerName        string
	EntryName        string
	SourceObjectID   uint64
	DestObjectID     uint64
	Error            uint32
	Permissions      uint32
	Forwarded        uint8
	EntryLocale      uint32
	FriendInfo       uint32
	FriendDate       uint32
	FriendStatusDate uint32
	PreviousName     string
}

func (s *BuddyRequestAccept) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 63+len(s.OwnerName)+len(s.EntryName)+len(s.PreviousName)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	writeString_5(b, s.OwnerName)
	writeString_5(b, s.EntryName)
	binary.Write(b, binary.LittleEndian, s.SourceObjectID)
	binary.Write(b, binary.LittleEndian, s.DestObjectID)
	binary.Write(b, binary.LittleEndian, s.Error)
	binary.Write(b, binary.LittleEndian, s.Permissions)
	binary.Write(b, binary.LittleEndian, s.Forwarded)
	binary.Write(b, binary.LittleEndian, s.EntryLocale)
	binary.Write(b, binary.LittleEndian, s.FriendInfo)
	binary.Write(b, binary.LittleEndian, s.FriendDate)
	binary.Write(b, binary.LittleEndian, s.FriendStatusDate)
	writeString_5(b, s.PreviousName)
	return b.Bytes()
}

func (s *BuddyRequestAccept) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if s.OwnerName, err = readString_5(b); err != nil {
		return err
	}
	if s.EntryName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DestObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryLocale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendInfo); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendDate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendStatusDate); err != nil {
		return err
	}
	if s.PreviousName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type BuddyRequestAcceptFwd struct {
	ListOwnerGID     uint64
	EntryGID         uint64
	OwnerName        string
	EntryName        string
	SourceObjectID   uint64
	DestObjectID     uint64
	Permissions      uint32
	EntryLocale      uint32
	FriendInfo       uint32
	FriendDate       uint32
	FriendStatusDate uint32
	PreviousName     string
}

func (s *BuddyRequestAcceptFwd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 58+len(s.OwnerName)+len(s.EntryName)+len(s.PreviousName)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	writeString_5(b, s.OwnerName)
	writeString_5(b, s.EntryName)
	binary.Write(b, binary.LittleEndian, s.SourceObjectID)
	binary.Write(b, binary.LittleEndian, s.DestObjectID)
	binary.Write(b, binary.LittleEndian, s.Permissions)
	binary.Write(b, binary.LittleEndian, s.EntryLocale)
	binary.Write(b, binary.LittleEndian, s.FriendInfo)
	binary.Write(b, binary.LittleEndian, s.FriendDate)
	binary.Write(b, binary.LittleEndian, s.FriendStatusDate)
	writeString_5(b, s.PreviousName)
	return b.Bytes()
}

func (s *BuddyRequestAcceptFwd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if s.OwnerName, err = readString_5(b); err != nil {
		return err
	}
	if s.EntryName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DestObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryLocale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendInfo); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendDate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendStatusDate); err != nil {
		return err
	}
	if s.PreviousName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type BuddyRequestAdd struct {
	ListOwnerGID uint64
	EntryGID     uint64
	OwnerName    string
	OwnerLevel   uint8
	OwnerSchool  string
	Remove       uint8
}

func (s *BuddyRequestAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.OwnerName)+len(s.OwnerSchool)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	writeString_5(b, s.OwnerName)
	binary.Write(b, binary.LittleEndian, s.OwnerLevel)
	writeString_5(b, s.OwnerSchool)
	binary.Write(b, binary.LittleEndian, s.Remove)
	return b.Bytes()
}

func (s *BuddyRequestAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if s.OwnerName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerLevel); err != nil {
		return err
	}
	if s.OwnerSchool, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	return nil
}

type BuddyRequestAddFwd struct {
	ListOwnerGID uint64
	EntryGID     uint64
	OwnerName    string
	OwnerLevel   uint8
	OwnerSchool  string
	Remove       uint8
}

func (s *BuddyRequestAddFwd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.OwnerName)+len(s.OwnerSchool)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	writeString_5(b, s.OwnerName)
	binary.Write(b, binary.LittleEndian, s.OwnerLevel)
	writeString_5(b, s.OwnerSchool)
	binary.Write(b, binary.LittleEndian, s.Remove)
	return b.Bytes()
}

func (s *BuddyRequestAddFwd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if s.OwnerName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerLevel); err != nil {
		return err
	}
	if s.OwnerSchool, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	return nil
}

type BuddyRequestDeny struct {
	ListOwnerGID uint64
	EntryGID     uint64
}

func (s *BuddyRequestDeny) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	return b.Bytes()
}

func (s *BuddyRequestDeny) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	return nil
}

type BuddyRequestDenyFwd struct {
	ListOwnerGID uint64
	EntryGID     uint64
}

func (s *BuddyRequestDenyFwd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	return b.Bytes()
}

func (s *BuddyRequestDenyFwd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	return nil
}

type BuddyRequestDrop struct {
	ListOwnerGID uint64
	EntryGID     uint64
	Forwarded    uint8
}

func (s *BuddyRequestDrop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	binary.Write(b, binary.LittleEndian, s.Forwarded)
	return b.Bytes()
}

func (s *BuddyRequestDrop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type BuddyRequestError struct {
	ListOwnerGID uint64
	EntryGID     uint64
	Error        uint8
}

func (s *BuddyRequestError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *BuddyRequestError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type BuddyRequestList struct {
	ListOwnerGID uint64
	Forwarded    uint8
}

func (s *BuddyRequestList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.Forwarded)
	return b.Bytes()
}

func (s *BuddyRequestList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type BuddyStats struct {
	BuddyID            uint64
	StatBlock          string
	PetStatBlock       string
	CharBlock          string
	EquipBlock         string
	EffectBlock        string
	WishlistBlock      string
	Level              uint32
	School             uint32
	ShowPVPOption      uint32
	Gender             int8
	StatBlockCRC       uint32
	PetStatBlockCRC    uint32
	CharBlockCRC       uint32
	EquipBlockCRC      uint32
	EffectBlockCRC     uint32
	WishlistBlockCRC   uint32
	SourceCharacterGID uint64
	TargetCharacterGID uint64
	PetJewelID         uint32
}

func (s *BuddyStats) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 77+len(s.StatBlock)+len(s.PetStatBlock)+len(s.CharBlock)+len(s.EquipBlock)+len(s.EffectBlock)+len(s.WishlistBlock)))
	binary.Write(b, binary.LittleEndian, s.BuddyID)
	writeString_5(b, s.StatBlock)
	writeString_5(b, s.PetStatBlock)
	writeString_5(b, s.CharBlock)
	writeString_5(b, s.EquipBlock)
	writeString_5(b, s.EffectBlock)
	writeString_5(b, s.WishlistBlock)
	binary.Write(b, binary.LittleEndian, s.Level)
	binary.Write(b, binary.LittleEndian, s.School)
	binary.Write(b, binary.LittleEndian, s.ShowPVPOption)
	binary.Write(b, binary.LittleEndian, s.Gender)
	binary.Write(b, binary.LittleEndian, s.StatBlockCRC)
	binary.Write(b, binary.LittleEndian, s.PetStatBlockCRC)
	binary.Write(b, binary.LittleEndian, s.CharBlockCRC)
	binary.Write(b, binary.LittleEndian, s.EquipBlockCRC)
	binary.Write(b, binary.LittleEndian, s.EffectBlockCRC)
	binary.Write(b, binary.LittleEndian, s.WishlistBlockCRC)
	binary.Write(b, binary.LittleEndian, s.SourceCharacterGID)
	binary.Write(b, binary.LittleEndian, s.TargetCharacterGID)
	binary.Write(b, binary.LittleEndian, s.PetJewelID)
	return b.Bytes()
}

func (s *BuddyStats) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.BuddyID); err != nil {
		return err
	}
	if s.StatBlock, err = readString_5(b); err != nil {
		return err
	}
	if s.PetStatBlock, err = readString_5(b); err != nil {
		return err
	}
	if s.CharBlock, err = readString_5(b); err != nil {
		return err
	}
	if s.EquipBlock, err = readString_5(b); err != nil {
		return err
	}
	if s.EffectBlock, err = readString_5(b); err != nil {
		return err
	}
	if s.WishlistBlock, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Level); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.School); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ShowPVPOption); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Gender); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StatBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetStatBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EquipBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EffectBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WishlistBlockCRC); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetJewelID); err != nil {
		return err
	}
	return nil
}

type BuddyStatusUpdate struct {
	ListOwnerGID     uint64
	EntryGID         uint64
	Status           uint8
	Permissions      uint32
	ZoneName         string
	Locale           uint32
	RealmName        string
	FriendInfo       uint32
	FriendDate       uint32
	FriendStatusDate uint32
	PreviousName     string
}

func (s *BuddyStatusUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 43+len(s.ZoneName)+len(s.RealmName)+len(s.PreviousName)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.EntryGID)
	binary.Write(b, binary.LittleEndian, s.Status)
	binary.Write(b, binary.LittleEndian, s.Permissions)
	writeString_5(b, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.Locale)
	writeString_5(b, s.RealmName)
	binary.Write(b, binary.LittleEndian, s.FriendInfo)
	binary.Write(b, binary.LittleEndian, s.FriendDate)
	binary.Write(b, binary.LittleEndian, s.FriendStatusDate)
	writeString_5(b, s.PreviousName)
	return b.Bytes()
}

func (s *BuddyStatusUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EntryGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Locale); err != nil {
		return err
	}
	if s.RealmName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendInfo); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendDate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendStatusDate); err != nil {
		return err
	}
	if s.PreviousName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type BugReport struct {
	Report string
}

func (s *BugReport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Report)))
	writeString_5(b, s.Report)
	return b.Bytes()
}

func (s *BugReport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Report, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type BugSubmitResponse struct {
	Success int8
	Type    int8
}

func (s *BugSubmitResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2))
	binary.Write(b, binary.LittleEndian, s.Success)
	binary.Write(b, binary.LittleEndian, s.Type)
	return b.Bytes()
}

func (s *BugSubmitResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	return nil
}

type ChannelChat struct {
	SourceName string
	SourceID   uint64
	Message    string
	TargetID   uint64
	Filter     uint8
	Flags      uint32
}

func (s *ChannelChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25+len(s.SourceName)+len(s.Message)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.TargetID)
	binary.Write(b, binary.LittleEndian, s.Filter)
	binary.Write(b, binary.LittleEndian, s.Flags)
	return b.Bytes()
}

func (s *ChannelChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	return nil
}

type ChannelSubscription struct {
	RecipientID uint64
	ChannelID   uint64
	ParentID    uint64
	ChannelName string
	ChannelType uint8
}

func (s *ChannelSubscription) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 27+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.RecipientID)
	binary.Write(b, binary.LittleEndian, s.ChannelID)
	binary.Write(b, binary.LittleEndian, s.ParentID)
	writeString_5(b, s.ChannelName)
	binary.Write(b, binary.LittleEndian, s.ChannelType)
	return b.Bytes()
}

func (s *ChannelSubscription) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RecipientID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if s.ChannelName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelType); err != nil {
		return err
	}
	return nil
}

type ChatDiagnostics struct {
	CharacterID uint64
	Data        string
}

func (s *ChatDiagnostics) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *ChatDiagnostics) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type ChatError struct {
	ListOwnerGID uint64
	CharacterID  uint64
	Error        uint32
}

func (s *ChatError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *ChatError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type CheckSubscription struct {
	Success uint8
}

func (s *CheckSubscription) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Success)
	return b.Bytes()
}

func (s *CheckSubscription) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type CheckMail struct {
	CharacterID uint64
}

func (s *CheckMail) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	return b.Bytes()
}

func (s *CheckMail) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type ClientMove struct {
	LocationX   uint16
	LocationY   uint16
	LocationZ   uint16
	Direction   uint8
	ZoneCounter uint8
}

func (s *ClientMove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.LocationX)
	binary.Write(b, binary.LittleEndian, s.LocationY)
	binary.Write(b, binary.LittleEndian, s.LocationZ)
	binary.Write(b, binary.LittleEndian, s.Direction)
	binary.Write(b, binary.LittleEndian, s.ZoneCounter)
	return b.Bytes()
}

func (s *ClientMove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneCounter); err != nil {
		return err
	}
	return nil
}

type ClientMoveState struct {
	NewState int8
}

func (s *ClientMoveState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.NewState)
	return b.Bytes()
}

func (s *ClientMoveState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.NewState); err != nil {
		return err
	}
	return nil
}

type ClientNotifyText struct {
	NotifyText string
	Type       int32
	Madlibs    string
	AddToChat  uint8
}

func (s *ClientNotifyText) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9+len(s.NotifyText)+len(s.Madlibs)))
	writeString_5(b, s.NotifyText)
	binary.Write(b, binary.LittleEndian, s.Type)
	writeString_5(b, s.Madlibs)
	binary.Write(b, binary.LittleEndian, s.AddToChat)
	return b.Bytes()
}

func (s *ClientNotifyText) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.NotifyText, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	if s.Madlibs, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AddToChat); err != nil {
		return err
	}
	return nil
}

type ClientTutorialEvent struct {
	Event string
}

func (s *ClientTutorialEvent) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Event)))
	writeString_5(b, s.Event)
	return b.Bytes()
}

func (s *ClientTutorialEvent) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Event, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type ClientDisconnect struct {
}

func (s *ClientDisconnect) Marshal() []byte {
	return []byte{}
}

func (s *ClientDisconnect) Unmarshal(data []byte) error {
	return nil
}

type ClientError struct {
	Function string
}

func (s *ClientError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Function)))
	writeString_5(b, s.Function)
	return b.Bytes()
}

func (s *ClientError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Function, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type CLIENTPROCESSTERMINATED struct {
	JobID uint32
}

func (s *CLIENTPROCESSTERMINATED) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.JobID)
	return b.Bytes()
}

func (s *CLIENTPROCESSTERMINATED) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	return nil
}

type CombineInventoryItems struct {
	GlobalID uint64
	ItemID1  uint64
	ItemID2  uint64
}

func (s *CombineInventoryItems) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID1)
	binary.Write(b, binary.LittleEndian, s.ItemID2)
	return b.Bytes()
}

func (s *CombineInventoryItems) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID2); err != nil {
		return err
	}
	return nil
}

type Command struct {
	Command     string
	ResultEvent string
	TimeLeft    int32
}

func (s *Command) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8+len(s.Command)+len(s.ResultEvent)))
	writeString_5(b, s.Command)
	writeString_5(b, s.ResultEvent)
	binary.Write(b, binary.LittleEndian, s.TimeLeft)
	return b.Bytes()
}

func (s *Command) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Command, err = readString_5(b); err != nil {
		return err
	}
	if s.ResultEvent, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TimeLeft); err != nil {
		return err
	}
	return nil
}

type CommandResult struct {
	Command     string
	ResultEvent string
	Results     string
}

func (s *CommandResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Command)+len(s.ResultEvent)+len(s.Results)))
	writeString_5(b, s.Command)
	writeString_5(b, s.ResultEvent)
	writeString_5(b, s.Results)
	return b.Bytes()
}

func (s *CommandResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Command, err = readString_5(b); err != nil {
		return err
	}
	if s.ResultEvent, err = readString_5(b); err != nil {
		return err
	}
	if s.Results, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type CompanionEffects struct {
	NPC            uint32
	EffectInfoList string
	Add            uint8
}

func (s *CompanionEffects) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.EffectInfoList)))
	binary.Write(b, binary.LittleEndian, s.NPC)
	writeString_5(b, s.EffectInfoList)
	binary.Write(b, binary.LittleEndian, s.Add)
	return b.Bytes()
}

func (s *CompanionEffects) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.NPC); err != nil {
		return err
	}
	if s.EffectInfoList, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	return nil
}

type CoreEmote struct {
	Name              string
	ExcludeOriginator uint8
	PhraseID          uint32
}

func (s *CoreEmote) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.Name)))
	writeString_5(b, s.Name)
	binary.Write(b, binary.LittleEndian, s.ExcludeOriginator)
	binary.Write(b, binary.LittleEndian, s.PhraseID)
	return b.Bytes()
}

func (s *CoreEmote) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ExcludeOriginator); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PhraseID); err != nil {
		return err
	}
	return nil
}

type CreateChannelResponse struct {
	SourceID    uint64
	ChannelID   uint64
	ChannelName string
	ErrorCode   uint8
}

func (s *CreateChannelResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.ChannelID)
	writeString_5(b, s.ChannelName)
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	return b.Bytes()
}

func (s *CreateChannelResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if s.ChannelName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	return nil
}

type CREATESESSION struct {
}

func (s *CREATESESSION) Marshal() []byte {
	return []byte{}
}

func (s *CREATESESSION) Unmarshal(data []byte) error {
	return nil
}

type CSRBankItems struct {
	GlobalID       uint64
	SharedBank     uint8
	SerializedItem string
}

func (s *CSRBankItems) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.SerializedItem)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.SharedBank)
	writeString_5(b, s.SerializedItem)
	return b.Bytes()
}

func (s *CSRBankItems) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SharedBank); err != nil {
		return err
	}
	if s.SerializedItem, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type CSRBankItemsDone struct {
	GlobalID   uint64
	SharedBank uint8
	Limit      int32
}

func (s *CSRBankItemsDone) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.SharedBank)
	binary.Write(b, binary.LittleEndian, s.Limit)
	return b.Bytes()
}

func (s *CSRBankItemsDone) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SharedBank); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Limit); err != nil {
		return err
	}
	return nil
}

type CSREditCharacter struct {
	ChunkNum         uint32
	CharacterID      uint64
	UserID           uint64
	UserName         string
	CurrentBan       string
	CurrentMute      string
	AcctAssoc        uint8
	Object           string
	CurrentQuests    string
	Registry         string
	AccessPasses     string
	BadgeList        string
	Edit             uint8
	AllowedToReport  uint8
	DynaMods         string
	CharacterSlots   int32
	SegmentedMessage uint8
	LastSegment      uint8
}

func (s *CSREditCharacter) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 47+len(s.UserName)+len(s.CurrentBan)+len(s.CurrentMute)+len(s.Object)+len(s.CurrentQuests)+len(s.Registry)+len(s.AccessPasses)+len(s.BadgeList)+len(s.DynaMods)))
	binary.Write(b, binary.LittleEndian, s.ChunkNum)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.UserID)
	writeString_5(b, s.UserName)
	writeString_5(b, s.CurrentBan)
	writeString_5(b, s.CurrentMute)
	binary.Write(b, binary.LittleEndian, s.AcctAssoc)
	writeString_5(b, s.Object)
	writeString_5(b, s.CurrentQuests)
	writeString_5(b, s.Registry)
	writeString_5(b, s.AccessPasses)
	writeString_5(b, s.BadgeList)
	binary.Write(b, binary.LittleEndian, s.Edit)
	binary.Write(b, binary.LittleEndian, s.AllowedToReport)
	writeString_5(b, s.DynaMods)
	binary.Write(b, binary.LittleEndian, s.CharacterSlots)
	binary.Write(b, binary.LittleEndian, s.SegmentedMessage)
	binary.Write(b, binary.LittleEndian, s.LastSegment)
	return b.Bytes()
}

func (s *CSREditCharacter) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ChunkNum); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserID); err != nil {
		return err
	}
	if s.UserName, err = readString_5(b); err != nil {
		return err
	}
	if s.CurrentBan, err = readString_5(b); err != nil {
		return err
	}
	if s.CurrentMute, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AcctAssoc); err != nil {
		return err
	}
	if s.Object, err = readString_5(b); err != nil {
		return err
	}
	if s.CurrentQuests, err = readString_5(b); err != nil {
		return err
	}
	if s.Registry, err = readString_5(b); err != nil {
		return err
	}
	if s.AccessPasses, err = readString_5(b); err != nil {
		return err
	}
	if s.BadgeList, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Edit); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowedToReport); err != nil {
		return err
	}
	if s.DynaMods, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterSlots); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SegmentedMessage); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LastSegment); err != nil {
		return err
	}
	return nil
}

type CSREditCharacterFailed struct {
	CharacterID uint64
}

func (s *CSREditCharacterFailed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	return b.Bytes()
}

func (s *CSREditCharacterFailed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type CSRFinishedHouse struct {
	OldGid    uint64
	NewGid    uint64
	Character uint64
	Error     uint8
}

func (s *CSRFinishedHouse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	binary.Write(b, binary.LittleEndian, s.OldGid)
	binary.Write(b, binary.LittleEndian, s.NewGid)
	binary.Write(b, binary.LittleEndian, s.Character)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *CSRFinishedHouse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.OldGid); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewGid); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Character); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type CSRSearchList struct {
	StartEnd uint8
	Data     string
}

func (s *CSRSearchList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.StartEnd)
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *CSRSearchList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.StartEnd); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type CSRMailData struct {
	Data string
}

func (s *CSRMailData) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *CSRMailData) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type CSRReceiveGifts struct {
	Success int32
	Data    string
}

func (s *CSRReceiveGifts) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Success)
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *CSRReceiveGifts) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type DEBUGDELETEALLOBJECTS struct {
}

func (s *DEBUGDELETEALLOBJECTS) Marshal() []byte {
	return []byte{}
}

func (s *DEBUGDELETEALLOBJECTS) Unmarshal(data []byte) error {
	return nil
}

type DeleteObject struct {
	GameObjectID uint64
	Data         string
}

func (s *DeleteObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *DeleteObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type DeleteGift struct {
	GiftID         string
	Success        int32
	IsPeriodicItem uint8
}

func (s *DeleteGift) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.GiftID)))
	writeString_5(b, s.GiftID)
	binary.Write(b, binary.LittleEndian, s.Success)
	binary.Write(b, binary.LittleEndian, s.IsPeriodicItem)
	return b.Bytes()
}

func (s *DeleteGift) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.GiftID, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsPeriodicItem); err != nil {
		return err
	}
	return nil
}

type DirectedChat struct {
	SourceName string
	SourceID   uint64
	Message    string
	TargetID   uint64
	Filter     uint8
}

func (s *DirectedChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21+len(s.SourceName)+len(s.Message)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.TargetID)
	binary.Write(b, binary.LittleEndian, s.Filter)
	return b.Bytes()
}

func (s *DirectedChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	return nil
}

type DirectedChatByNameResponse struct {
	TargetID   uint64
	TargetName string
}

func (s *DirectedChatByNameResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.TargetName)))
	binary.Write(b, binary.LittleEndian, s.TargetID)
	writeString_5(b, s.TargetName)
	return b.Bytes()
}

func (s *DirectedChatByNameResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if s.TargetName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type DirectedChatFail struct {
}

func (s *DirectedChatFail) Marshal() []byte {
	return []byte{}
}

func (s *DirectedChatFail) Unmarshal(data []byte) error {
	return nil
}

type DirectedQuickChat struct {
	SourceName string
	SourceID   uint64
	MessageID  uint32
	Filter     uint8
	Flags      uint32
}

func (s *DirectedQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.SourceName)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.MessageID)
	binary.Write(b, binary.LittleEndian, s.Filter)
	binary.Write(b, binary.LittleEndian, s.Flags)
	return b.Bytes()
}

func (s *DirectedQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	return nil
}

type DirectedQuickChatExt struct {
	SourceName string
	SourceID   uint64
	Message    string
	Filter     uint8
	Flags      uint32
}

func (s *DirectedQuickChatExt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17+len(s.SourceName)+len(s.Message)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.Filter)
	binary.Write(b, binary.LittleEndian, s.Flags)
	return b.Bytes()
}

func (s *DirectedQuickChatExt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	return nil
}

type DisconnectAfk struct {
	Warning int8
}

func (s *DisconnectAfk) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Warning)
	return b.Bytes()
}

func (s *DisconnectAfk) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Warning); err != nil {
		return err
	}
	return nil
}

type DownloadBrowser struct {
}

func (s *DownloadBrowser) Marshal() []byte {
	return []byte{}
}

func (s *DownloadBrowser) Unmarshal(data []byte) error {
	return nil
}

type DownloadPackage struct {
	Data string
}

func (s *DownloadPackage) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *DownloadPackage) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type DownloadPackageElement struct {
	Data string
}

func (s *DownloadPackageElement) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *DownloadPackageElement) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type DynaModBehaviorUpdateMods struct {
	GlobalID  uint64
	UpdateAll int8
	Add       int8
	Remove    int8
	AllMods   string
	NewMod    string
	Index     int32
}

func (s *DynaModBehaviorUpdateMods) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.AllMods)+len(s.NewMod)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.UpdateAll)
	binary.Write(b, binary.LittleEndian, s.Add)
	binary.Write(b, binary.LittleEndian, s.Remove)
	writeString_5(b, s.AllMods)
	writeString_5(b, s.NewMod)
	binary.Write(b, binary.LittleEndian, s.Index)
	return b.Bytes()
}

func (s *DynaModBehaviorUpdateMods) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpdateAll); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	if s.AllMods, err = readString_5(b); err != nil {
		return err
	}
	if s.NewMod, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index); err != nil {
		return err
	}
	return nil
}

type DynaModDump struct {
	Data     string
	Filename string
}

func (s *DynaModDump) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Data)+len(s.Filename)))
	writeString_5(b, s.Data)
	writeString_5(b, s.Filename)
	return b.Bytes()
}

func (s *DynaModDump) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	if s.Filename, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type EnterState struct {
	GameObjectID              uint64
	State                     uint32
	Data                      string
	IgnoreIfCurrentStateIsOff uint8
}

func (s *EnterState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 15+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	binary.Write(b, binary.LittleEndian, s.State)
	writeString_5(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.IgnoreIfCurrentStateIsOff)
	return b.Bytes()
}

func (s *EnterState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IgnoreIfCurrentStateIsOff); err != nil {
		return err
	}
	return nil
}

type EquipItem struct {
	IsEquip  int32
	ItemID   uint64
	SlotName string
}

func (s *EquipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.SlotName)))
	binary.Write(b, binary.LittleEndian, s.IsEquip)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	writeString_5(b, s.SlotName)
	return b.Bytes()
}

func (s *EquipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.IsEquip); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if s.SlotName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type EquipmentBehaviorEquipItem struct {
	GlobalID       uint64
	SlotName       string
	IsValid        int32
	SerializedItem string
}

func (s *EquipmentBehaviorEquipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.SlotName)+len(s.SerializedItem)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_5(b, s.SlotName)
	binary.Write(b, binary.LittleEndian, s.IsValid)
	writeString_5(b, s.SerializedItem)
	return b.Bytes()
}

func (s *EquipmentBehaviorEquipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.SlotName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsValid); err != nil {
		return err
	}
	if s.SerializedItem, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type EquipmentBehaviorPublicEquipItem struct {
	GlobalID       uint64
	SerializedInfo string
}

func (s *EquipmentBehaviorPublicEquipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.SerializedInfo)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_5(b, s.SerializedInfo)
	return b.Bytes()
}

func (s *EquipmentBehaviorPublicEquipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.SerializedInfo, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type EquipmentBehaviorPublicUnequipItem struct {
	GlobalID      uint64
	IndexToRemove uint8
}

func (s *EquipmentBehaviorPublicUnequipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.IndexToRemove)
	return b.Bytes()
}

func (s *EquipmentBehaviorPublicUnequipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IndexToRemove); err != nil {
		return err
	}
	return nil
}

type EquipmentBehaviorUnequipItem struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *EquipmentBehaviorUnequipItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	return b.Bytes()
}

func (s *EquipmentBehaviorUnequipItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type FeedInventoryItem struct {
	PetID       uint64
	FedObjectID uint64
}

func (s *FeedInventoryItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.PetID)
	binary.Write(b, binary.LittleEndian, s.FedObjectID)
	return b.Bytes()
}

func (s *FeedInventoryItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FedObjectID); err != nil {
		return err
	}
	return nil
}

type FINDSESSIONS struct {
}

func (s *FINDSESSIONS) Marshal() []byte {
	return []byte{}
}

func (s *FINDSESSIONS) Unmarshal(data []byte) error {
	return nil
}

type FINDSESSIONPLAYERS struct {
	ZoneID    uint64
	SessionID uint64
}

func (s *FINDSESSIONPLAYERS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.SessionID)
	return b.Bytes()
}

func (s *FINDSESSIONPLAYERS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	return nil
}

type GenericGame struct {
	A       int32
	B       int32
	X       int32
	Y       int32
	Z       int32
	W       int32
	Message string
}

func (s *GenericGame) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 26+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.A)
	binary.Write(b, binary.LittleEndian, s.B)
	binary.Write(b, binary.LittleEndian, s.X)
	binary.Write(b, binary.LittleEndian, s.Y)
	binary.Write(b, binary.LittleEndian, s.Z)
	binary.Write(b, binary.LittleEndian, s.W)
	writeString_5(b, s.Message)
	return b.Bytes()
}

func (s *GenericGame) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.A); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.B); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.X); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Y); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Z); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.W); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type GetLadder struct {
	NameBlob         string
	CharacterID      uint64
	TournamentNameID uint32
}

func (s *GetLadder) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.NameBlob)))
	writeString_5(b, s.NameBlob)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.TournamentNameID)
	return b.Bytes()
}

func (s *GetLadder) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.NameBlob, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	return nil
}

type GETRANKINGS struct {
	Game         string
	RankingCount int32
	Time         uint32
	GroupID      uint64
}

func (s *GETRANKINGS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.Game)))
	writeString_5(b, s.Game)
	binary.Write(b, binary.LittleEndian, s.RankingCount)
	binary.Write(b, binary.LittleEndian, s.Time)
	binary.Write(b, binary.LittleEndian, s.GroupID)
	return b.Bytes()
}

func (s *GETRANKINGS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RankingCount); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Time); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GroupID); err != nil {
		return err
	}
	return nil
}

type GiftRedeemed struct {
	Success              int32
	GiftID               string
	GID                  uint64
	Data                 string
	TemplateID           uint64
	ErrorCode            int32
	Quantity             int32
	HasMorePromoGifts    int8
	HasMoreCrownsRewards int8
	HasMorePeriodicItems int8
}

func (s *GiftRedeemed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 35+len(s.GiftID)+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Success)
	writeString_5(b, s.GiftID)
	binary.Write(b, binary.LittleEndian, s.GID)
	writeString_5(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	binary.Write(b, binary.LittleEndian, s.Quantity)
	binary.Write(b, binary.LittleEndian, s.HasMorePromoGifts)
	binary.Write(b, binary.LittleEndian, s.HasMoreCrownsRewards)
	binary.Write(b, binary.LittleEndian, s.HasMorePeriodicItems)
	return b.Bytes()
}

func (s *GiftRedeemed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.GiftID, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GID); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HasMorePromoGifts); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HasMoreCrownsRewards); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HasMorePeriodicItems); err != nil {
		return err
	}
	return nil
}

type GotoPlayer struct {
	TargetCharacterID uint64
	OriginatorID      uint64
	MustBeFriend      uint8
}

func (s *GotoPlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.TargetCharacterID)
	binary.Write(b, binary.LittleEndian, s.OriginatorID)
	binary.Write(b, binary.LittleEndian, s.MustBeFriend)
	return b.Bytes()
}

func (s *GotoPlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OriginatorID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MustBeFriend); err != nil {
		return err
	}
	return nil
}

type GotoPlayerResponse struct {
	TargetCharacterID uint64
	ZoneName          string
	ZoneID            uint64
	OriginatorID      uint64
	Error             uint32
}

func (s *GotoPlayerResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 30+len(s.ZoneName)))
	binary.Write(b, binary.LittleEndian, s.TargetCharacterID)
	writeString_5(b, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.OriginatorID)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *GotoPlayerResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OriginatorID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type HarassmentReport struct {
	Count       int32
	CountToMute int32
}

func (s *HarassmentReport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.Count)
	binary.Write(b, binary.LittleEndian, s.CountToMute)
	return b.Bytes()
}

func (s *HarassmentReport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CountToMute); err != nil {
		return err
	}
	return nil
}

type IgnoreAdd struct {
	ListOwnerGID  uint64
	CharacterGID  uint64
	GameObjectGID uint64
	CharacterName string
	Forwarded     uint8
}

func (s *IgnoreAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 27+len(s.CharacterName)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.CharacterGID)
	binary.Write(b, binary.LittleEndian, s.GameObjectGID)
	writeString_5(b, s.CharacterName)
	binary.Write(b, binary.LittleEndian, s.Forwarded)
	return b.Bytes()
}

func (s *IgnoreAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectGID); err != nil {
		return err
	}
	if s.CharacterName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type IgnoreDrop struct {
	ListOwnerGID  uint64
	CharacterGID  uint64
	GameObjectGID uint64
	Forwarded     uint8
}

func (s *IgnoreDrop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.CharacterGID)
	binary.Write(b, binary.LittleEndian, s.GameObjectGID)
	binary.Write(b, binary.LittleEndian, s.Forwarded)
	return b.Bytes()
}

func (s *IgnoreDrop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type IgnoreList struct {
	ListOwnerGID uint64
	ListData     string
	Add          uint8
}

func (s *IgnoreList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.ListData)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	writeString_5(b, s.ListData)
	binary.Write(b, binary.LittleEndian, s.Add)
	return b.Bytes()
}

func (s *IgnoreList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if s.ListData, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	return nil
}

type InteractObject struct {
	GlobalID   uint64
	TemplateID uint64
}

func (s *InteractObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	return b.Bytes()
}

func (s *InteractObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type InteractOption struct {
	ObjectID    uint64
	OptionIndex int32
}

func (s *InteractOption) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.OptionIndex)
	return b.Bytes()
}

func (s *InteractOption) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OptionIndex); err != nil {
		return err
	}
	return nil
}

type INVENTORYBEHAVIORADDITEM struct {
	GlobalID       uint64
	SerializedItem string
}

func (s *INVENTORYBEHAVIORADDITEM) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.SerializedItem)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_5(b, s.SerializedItem)
	return b.Bytes()
}

func (s *INVENTORYBEHAVIORADDITEM) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.SerializedItem, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type INVENTORYBEHAVIORREMOVEITEM struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *INVENTORYBEHAVIORREMOVEITEM) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	return b.Bytes()
}

func (s *INVENTORYBEHAVIORREMOVEITEM) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type INVENTORYBEHAVIORTRADEITEM struct {
	GlobalID uint64
	ItemID   uint64
	Trading  int32
}

func (s *INVENTORYBEHAVIORTRADEITEM) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	binary.Write(b, binary.LittleEndian, s.Trading)
	return b.Bytes()
}

func (s *INVENTORYBEHAVIORTRADEITEM) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Trading); err != nil {
		return err
	}
	return nil
}

type InviteFriend struct {
	PromoID       string
	YourName      string
	FriendName    string
	FriendEmail   string
	Locale        string
	SendInEnglish uint8
}

func (s *InviteFriend) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.PromoID)+len(s.YourName)+len(s.FriendName)+len(s.FriendEmail)+len(s.Locale)))
	writeString_5(b, s.PromoID)
	writeString_5(b, s.YourName)
	writeString_5(b, s.FriendName)
	writeString_5(b, s.FriendEmail)
	writeString_5(b, s.Locale)
	binary.Write(b, binary.LittleEndian, s.SendInEnglish)
	return b.Bytes()
}

func (s *InviteFriend) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PromoID, err = readString_5(b); err != nil {
		return err
	}
	if s.YourName, err = readString_5(b); err != nil {
		return err
	}
	if s.FriendName, err = readString_5(b); err != nil {
		return err
	}
	if s.FriendEmail, err = readString_5(b); err != nil {
		return err
	}
	if s.Locale, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SendInEnglish); err != nil {
		return err
	}
	return nil
}

type InviteResponse struct {
	Success   int32
	ErrorDesc string
}

func (s *InviteResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.ErrorDesc)))
	binary.Write(b, binary.LittleEndian, s.Success)
	writeString_5(b, s.ErrorDesc)
	return b.Bytes()
}

func (s *InviteResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.ErrorDesc, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type JoinChannelResponse struct {
	SourceID    uint64
	ParentID    uint64
	ChannelID   uint64
	ChannelName string
	ErrorCode   uint8
	ChannelType uint8
	RecipientID uint64
}

func (s *JoinChannelResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 36+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.ParentID)
	binary.Write(b, binary.LittleEndian, s.ChannelID)
	writeString_5(b, s.ChannelName)
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	binary.Write(b, binary.LittleEndian, s.ChannelType)
	binary.Write(b, binary.LittleEndian, s.RecipientID)
	return b.Bytes()
}

func (s *JoinChannelResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if s.ChannelName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RecipientID); err != nil {
		return err
	}
	return nil
}

type JOINSESSION struct {
	ZoneID    uint64
	SessionID uint64
}

func (s *JOINSESSION) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.SessionID)
	return b.Bytes()
}

func (s *JOINSESSION) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	return nil
}

type Jump struct {
	ExcludeOriginator uint8
}

func (s *Jump) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.ExcludeOriginator)
	return b.Bytes()
}

func (s *Jump) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ExcludeOriginator); err != nil {
		return err
	}
	return nil
}

type KILLCLIENTPROCESS struct {
	JobID uint32
}

func (s *KILLCLIENTPROCESS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.JobID)
	return b.Bytes()
}

func (s *KILLCLIENTPROCESS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	return nil
}

type LADDER struct {
	CharacterID    uint64
	LadderData     string
	TourneyCredits uint32
}

func (s *LADDER) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.LadderData)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_5(b, s.LadderData)
	binary.Write(b, binary.LittleEndian, s.TourneyCredits)
	return b.Bytes()
}

func (s *LADDER) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.LadderData, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TourneyCredits); err != nil {
		return err
	}
	return nil
}

type LeaveChannelResponse struct {
	SourceID    uint64
	ParentID    uint64
	ChannelID   uint64
	ChannelName string
	ChannelType uint8
	ErrorCode   uint8
	RecipientID uint64
}

func (s *LeaveChannelResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 36+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.ParentID)
	binary.Write(b, binary.LittleEndian, s.ChannelID)
	writeString_5(b, s.ChannelName)
	binary.Write(b, binary.LittleEndian, s.ChannelType)
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	binary.Write(b, binary.LittleEndian, s.RecipientID)
	return b.Bytes()
}

func (s *LeaveChannelResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if s.ChannelName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RecipientID); err != nil {
		return err
	}
	return nil
}

type LeaveHousingLot struct {
}

func (s *LeaveHousingLot) Marshal() []byte {
	return []byte{}
}

func (s *LeaveHousingLot) Unmarshal(data []byte) error {
	return nil
}

type LeaveServiceRange struct {
	MobileID uint64
}

func (s *LeaveServiceRange) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.MobileID)
	return b.Bytes()
}

func (s *LeaveServiceRange) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	return nil
}

type LeaveState struct {
	GameObjectID uint64
	State        uint32
}

func (s *LeaveState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	binary.Write(b, binary.LittleEndian, s.State)
	return b.Bytes()
}

func (s *LeaveState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	return nil
}

type LOADSAVEOBJECTS struct {
	Filename string
	Save     uint8
}

func (s *LOADSAVEOBJECTS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Filename)))
	writeString_5(b, s.Filename)
	binary.Write(b, binary.LittleEndian, s.Save)
	return b.Bytes()
}

func (s *LOADSAVEOBJECTS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Filename, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Save); err != nil {
		return err
	}
	return nil
}

type LoginComplete struct {
	ZoneName                     string
	Data                         string
	ServerTime                   uint32
	ZoneID                       uint64
	DynamicZoneID                uint32
	DynamicServerProcID          uint32
	Permissions                  uint32
	IsCSR                        int32
	ZoneServer                   string
	TestServer                   uint8
	AltMusicFile                 uint32
	ShowSubscriberIcon           uint8
	SubscriberCrownsPricePercent int32
	UseFriendFinder              int32
	RealmName                    string
	IsBossMarkZone               uint8
	CriticalObjects              string
	ZoneHasFriendlyPlayers       uint8
	HourOffset                   uint32
	DisableBeastmoonGroups       uint32
	PickUpAllEnabled             uint8
	SegmentedMessage             uint8
	LastSegment                  uint8
}

func (s *LoginComplete) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 65+len(s.ZoneName)+len(s.Data)+len(s.ZoneServer)+len(s.RealmName)+len(s.CriticalObjects)))
	writeString_5(b, s.ZoneName)
	writeString_5(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.ServerTime)
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.DynamicZoneID)
	binary.Write(b, binary.LittleEndian, s.DynamicServerProcID)
	binary.Write(b, binary.LittleEndian, s.Permissions)
	binary.Write(b, binary.LittleEndian, s.IsCSR)
	writeString_5(b, s.ZoneServer)
	binary.Write(b, binary.LittleEndian, s.TestServer)
	binary.Write(b, binary.LittleEndian, s.AltMusicFile)
	binary.Write(b, binary.LittleEndian, s.ShowSubscriberIcon)
	binary.Write(b, binary.LittleEndian, s.SubscriberCrownsPricePercent)
	binary.Write(b, binary.LittleEndian, s.UseFriendFinder)
	writeString_5(b, s.RealmName)
	binary.Write(b, binary.LittleEndian, s.IsBossMarkZone)
	writeString_5(b, s.CriticalObjects)
	binary.Write(b, binary.LittleEndian, s.ZoneHasFriendlyPlayers)
	binary.Write(b, binary.LittleEndian, s.HourOffset)
	binary.Write(b, binary.LittleEndian, s.DisableBeastmoonGroups)
	binary.Write(b, binary.LittleEndian, s.PickUpAllEnabled)
	binary.Write(b, binary.LittleEndian, s.SegmentedMessage)
	binary.Write(b, binary.LittleEndian, s.LastSegment)
	return b.Bytes()
}

func (s *LoginComplete) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ServerTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicServerProcID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Permissions); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsCSR); err != nil {
		return err
	}
	if s.ZoneServer, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TestServer); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AltMusicFile); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ShowSubscriberIcon); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SubscriberCrownsPricePercent); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseFriendFinder); err != nil {
		return err
	}
	if s.RealmName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsBossMarkZone); err != nil {
		return err
	}
	if s.CriticalObjects, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneHasFriendlyPlayers); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HourOffset); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DisableBeastmoonGroups); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PickUpAllEnabled); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SegmentedMessage); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LastSegment); err != nil {
		return err
	}
	return nil
}

type MailData struct {
	Data string
}

func (s *MailData) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *MailData) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type MarkLocation struct {
}

func (s *MarkLocation) Marshal() []byte {
	return []byte{}
}

func (s *MarkLocation) Unmarshal(data []byte) error {
	return nil
}

type MarkLocationResponse struct {
	Result            int8
	ZoneName          string
	ZoneDisplayNameId string
	ZoneType          int8
	InstanceId        uint64
	LocationX         float32
	LocationY         float32
	LocationZ         float32
	Direction         float32
	CommonsZoneId     string
	MarkType          string
}

func (s *MarkLocationResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 34+len(s.ZoneName)+len(s.ZoneDisplayNameId)+len(s.CommonsZoneId)+len(s.MarkType)))
	binary.Write(b, binary.LittleEndian, s.Result)
	writeString_5(b, s.ZoneName)
	writeString_5(b, s.ZoneDisplayNameId)
	binary.Write(b, binary.LittleEndian, s.ZoneType)
	binary.Write(b, binary.LittleEndian, s.InstanceId)
	binary.Write(b, binary.LittleEndian, s.LocationX)
	binary.Write(b, binary.LittleEndian, s.LocationY)
	binary.Write(b, binary.LittleEndian, s.LocationZ)
	binary.Write(b, binary.LittleEndian, s.Direction)
	writeString_5(b, s.CommonsZoneId)
	writeString_5(b, s.MarkType)
	return b.Bytes()
}

func (s *MarkLocationResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Result); err != nil {
		return err
	}
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if s.ZoneDisplayNameId, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.InstanceId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if s.CommonsZoneId, err = readString_5(b); err != nil {
		return err
	}
	if s.MarkType, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type MatchAward struct {
	CharacterID uint64
	AwardData   string
}

func (s *MatchAward) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.AwardData)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_5(b, s.AwardData)
	return b.Bytes()
}

func (s *MatchAward) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.AwardData, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type MatchInvite struct {
	CharacterID      uint64
	TournamentNameID uint32
	MatchActor       string
}

func (s *MatchInvite) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.MatchActor)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.TournamentNameID)
	writeString_5(b, s.MatchActor)
	return b.Bytes()
}

func (s *MatchInvite) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if s.MatchActor, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type MatchMakerUpdate struct {
	CharacterID      uint64
	MatchTeam        string
	MatchActor       string
	BracketInfo      string
	RegistrationInfo string
	UpdateMessage    string
	Status           uint8
}

func (s *MatchMakerUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.MatchTeam)+len(s.MatchActor)+len(s.BracketInfo)+len(s.RegistrationInfo)+len(s.UpdateMessage)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_5(b, s.MatchTeam)
	writeString_5(b, s.MatchActor)
	writeString_5(b, s.BracketInfo)
	writeString_5(b, s.RegistrationInfo)
	writeString_5(b, s.UpdateMessage)
	binary.Write(b, binary.LittleEndian, s.Status)
	return b.Bytes()
}

func (s *MatchMakerUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.MatchTeam, err = readString_5(b); err != nil {
		return err
	}
	if s.MatchActor, err = readString_5(b); err != nil {
		return err
	}
	if s.BracketInfo, err = readString_5(b); err != nil {
		return err
	}
	if s.RegistrationInfo, err = readString_5(b); err != nil {
		return err
	}
	if s.UpdateMessage, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type MatchReady struct {
	CharacterID      uint64
	ZoneID           uint64
	ZoneName         string
	TournamentNameID uint32
	MatchActor       string
}

func (s *MatchReady) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.ZoneName)+len(s.MatchActor)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	writeString_5(b, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.TournamentNameID)
	writeString_5(b, s.MatchActor)
	return b.Bytes()
}

func (s *MatchReady) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if s.MatchActor, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type MatchResult struct {
	CharacterID uint64
	ResultData  string
	AwardData   string
}

func (s *MatchResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.ResultData)+len(s.AwardData)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_5(b, s.ResultData)
	writeString_5(b, s.AwardData)
	return b.Bytes()
}

func (s *MatchResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.ResultData, err = readString_5(b); err != nil {
		return err
	}
	if s.AwardData, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type MESSAGEPROCESS struct {
	JobID   uint32
	Message string
}

func (s *MESSAGEPROCESS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.JobID)
	writeString_5(b, s.Message)
	return b.Bytes()
}

func (s *MESSAGEPROCESS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type MoveCorrection struct {
	LocationX float32
	LocationY float32
	LocationZ float32
	Direction float32
}

func (s *MoveCorrection) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.LocationX)
	binary.Write(b, binary.LittleEndian, s.LocationY)
	binary.Write(b, binary.LittleEndian, s.LocationZ)
	binary.Write(b, binary.LittleEndian, s.Direction)
	return b.Bytes()
}

func (s *MoveCorrection) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	return nil
}

type MoveState struct {
	GlobalID uint64
	NewState int8
}

func (s *MoveState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.NewState)
	return b.Bytes()
}

func (s *MoveState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewState); err != nil {
		return err
	}
	return nil
}

type Mute struct {
	MuteTime     string
	ForceMessage uint8
}

func (s *Mute) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.MuteTime)))
	writeString_5(b, s.MuteTime)
	binary.Write(b, binary.LittleEndian, s.ForceMessage)
	return b.Bytes()
}

func (s *Mute) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.MuteTime, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ForceMessage); err != nil {
		return err
	}
	return nil
}

type MuteRsp struct {
	MutedID  string
	MuteTime string
	MuteType string
	Success  uint8
}

func (s *MuteRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.MutedID)+len(s.MuteTime)+len(s.MuteType)))
	writeString_5(b, s.MutedID)
	writeString_5(b, s.MuteTime)
	writeString_5(b, s.MuteType)
	binary.Write(b, binary.LittleEndian, s.Success)
	return b.Bytes()
}

func (s *MuteRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.MutedID, err = readString_5(b); err != nil {
		return err
	}
	if s.MuteTime, err = readString_5(b); err != nil {
		return err
	}
	if s.MuteType, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type NewObject struct {
	Data string
}

func (s *NewObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *NewObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type NewSysStats struct {
	CpuUsage int32
	VMemUsed int32
	RMemUsed int32
}

func (s *NewSysStats) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.CpuUsage)
	binary.Write(b, binary.LittleEndian, s.VMemUsed)
	binary.Write(b, binary.LittleEndian, s.RMemUsed)
	return b.Bytes()
}

func (s *NewSysStats) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CpuUsage); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VMemUsed); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RMemUsed); err != nil {
		return err
	}
	return nil
}

type NewTickCnt struct {
	TickCnt int32
}

func (s *NewTickCnt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.TickCnt)
	return b.Bytes()
}

func (s *NewTickCnt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TickCnt); err != nil {
		return err
	}
	return nil
}

type NewTourneyRewards struct {
	Data             string
	BracketID        uint64
	TourneyNameSTKey string
}

func (s *NewTourneyRewards) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.Data)+len(s.TourneyNameSTKey)))
	writeString_5(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.BracketID)
	writeString_5(b, s.TourneyNameSTKey)
	return b.Bytes()
}

func (s *NewTourneyRewards) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BracketID); err != nil {
		return err
	}
	if s.TourneyNameSTKey, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type NewMail struct {
	CharacterID uint64
	MailType    int32
	AccountMail uint8
}

func (s *NewMail) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.MailType)
	binary.Write(b, binary.LittleEndian, s.AccountMail)
	return b.Bytes()
}

func (s *NewMail) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MailType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AccountMail); err != nil {
		return err
	}
	return nil
}

type NotifyChannelInstance struct {
	RecipientID uint64
	ParentID    uint64
	ID          uint64
	Name        string
	Create      uint8
}

func (s *NotifyChannelInstance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 27+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.RecipientID)
	binary.Write(b, binary.LittleEndian, s.ParentID)
	binary.Write(b, binary.LittleEndian, s.ID)
	writeString_5(b, s.Name)
	binary.Write(b, binary.LittleEndian, s.Create)
	return b.Bytes()
}

func (s *NotifyChannelInstance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RecipientID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ID); err != nil {
		return err
	}
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Create); err != nil {
		return err
	}
	return nil
}

type NotifyGift struct {
	Gift          int32
	CrownsRewards int32
	PeriodicItems int32
}

func (s *NotifyGift) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.Gift)
	binary.Write(b, binary.LittleEndian, s.CrownsRewards)
	binary.Write(b, binary.LittleEndian, s.PeriodicItems)
	return b.Bytes()
}

func (s *NotifyGift) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Gift); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CrownsRewards); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PeriodicItems); err != nil {
		return err
	}
	return nil
}

type NotMuted struct {
}

func (s *NotMuted) Marshal() []byte {
	return []byte{}
}

func (s *NotMuted) Unmarshal(data []byte) error {
	return nil
}

type NotAfk struct {
}

func (s *NotAfk) Marshal() []byte {
	return []byte{}
}

func (s *NotAfk) Unmarshal(data []byte) error {
	return nil
}

type NPCSpeech struct {
	SourceName    string
	SourceID      uint64
	TargetName    string
	TargetID      uint64
	Talk          string
	Sound         string
	WidthOverride int32
}

func (s *NPCSpeech) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28+len(s.SourceName)+len(s.TargetName)+len(s.Talk)+len(s.Sound)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.TargetName)
	binary.Write(b, binary.LittleEndian, s.TargetID)
	writeString_5(b, s.Talk)
	writeString_5(b, s.Sound)
	binary.Write(b, binary.LittleEndian, s.WidthOverride)
	return b.Bytes()
}

func (s *NPCSpeech) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.TargetName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if s.Talk, err = readString_5(b); err != nil {
		return err
	}
	if s.Sound, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WidthOverride); err != nil {
		return err
	}
	return nil
}

type ObjectInfoQuery struct {
	Info  string
	Part  int32
	Total int32
	Size  int32
}

func (s *ObjectInfoQuery) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Info)))
	writeString_5(b, s.Info)
	binary.Write(b, binary.LittleEndian, s.Part)
	binary.Write(b, binary.LittleEndian, s.Total)
	binary.Write(b, binary.LittleEndian, s.Size)
	return b.Bytes()
}

func (s *ObjectInfoQuery) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Info, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Part); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Total); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Size); err != nil {
		return err
	}
	return nil
}

type PartyDisband struct {
	DestinationCharacterID uint64
}

func (s *PartyDisband) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	return b.Bytes()
}

func (s *PartyDisband) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	return nil
}

type PartyJoinFailed struct {
	DestinationCharacterID uint64
	ErrorCode              int32
}

func (s *PartyJoinFailed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	return b.Bytes()
}

func (s *PartyJoinFailed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	return nil
}

type PartyJoinNotification struct {
	DestinationCharacterID uint64
	ChannelID              uint64
	PartyID                uint64
	PartyTotalSize         uint32
	FromAdventureParty     uint8
}

func (s *PartyJoinNotification) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 29))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	binary.Write(b, binary.LittleEndian, s.ChannelID)
	binary.Write(b, binary.LittleEndian, s.PartyID)
	binary.Write(b, binary.LittleEndian, s.PartyTotalSize)
	binary.Write(b, binary.LittleEndian, s.FromAdventureParty)
	return b.Bytes()
}

func (s *PartyJoinNotification) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyTotalSize); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	return nil
}

type PartyLeave struct {
	SourceCharacterID uint64
}

func (s *PartyLeave) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	return b.Bytes()
}

func (s *PartyLeave) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	return nil
}

type PartyLeaveNotification struct {
	DestinationCharacterID uint64
	CharacterID            uint64
	PartyTotalSize         uint32
	FromAdventureParty     uint8
}

func (s *PartyLeaveNotification) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.PartyTotalSize)
	binary.Write(b, binary.LittleEndian, s.FromAdventureParty)
	return b.Bytes()
}

func (s *PartyLeaveNotification) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyTotalSize); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	return nil
}

type PartyLevelUp struct {
	CharacterID uint64
	NewLevel    int32
}

func (s *PartyLevelUp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.NewLevel)
	return b.Bytes()
}

func (s *PartyLevelUp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewLevel); err != nil {
		return err
	}
	return nil
}

type PartyLevelUpUpdate struct {
	DestinationCharacterID uint64
	CharacterID            uint64
	NewLevel               int32
}

func (s *PartyLevelUpUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.NewLevel)
	return b.Bytes()
}

func (s *PartyLevelUpUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewLevel); err != nil {
		return err
	}
	return nil
}

type PartyMultiPlayerMountEquip struct {
	SourceCharacterID uint64
	MountTemplateID   uint64
}

func (s *PartyMultiPlayerMountEquip) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	binary.Write(b, binary.LittleEndian, s.MountTemplateID)
	return b.Bytes()
}

func (s *PartyMultiPlayerMountEquip) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountTemplateID); err != nil {
		return err
	}
	return nil
}

type PartyMultiPlayerMountEquipUpdate struct {
	DestinationCharacterID uint64
	SourceCharacterID      uint64
	MountTemplateID        uint64
}

func (s *PartyMultiPlayerMountEquipUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	binary.Write(b, binary.LittleEndian, s.MountTemplateID)
	return b.Bytes()
}

func (s *PartyMultiPlayerMountEquipUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountTemplateID); err != nil {
		return err
	}
	return nil
}

type PartyMultiPlayerMountJoin struct {
	SourceCharacterID     uint64
	MountOwnerCharacterID uint64
	MountTemplateID       uint64
}

func (s *PartyMultiPlayerMountJoin) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	binary.Write(b, binary.LittleEndian, s.MountOwnerCharacterID)
	binary.Write(b, binary.LittleEndian, s.MountTemplateID)
	return b.Bytes()
}

func (s *PartyMultiPlayerMountJoin) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountOwnerCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountTemplateID); err != nil {
		return err
	}
	return nil
}

type PartyMultiPlayerMountJoinUpdate struct {
	DestinationCharacterID uint64
	SourceCharacterID      uint64
	MountOwnerCharacterID  uint64
	MountTemplateID        uint64
}

func (s *PartyMultiPlayerMountJoinUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 32))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	binary.Write(b, binary.LittleEndian, s.MountOwnerCharacterID)
	binary.Write(b, binary.LittleEndian, s.MountTemplateID)
	return b.Bytes()
}

func (s *PartyMultiPlayerMountJoinUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountOwnerCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MountTemplateID); err != nil {
		return err
	}
	return nil
}

type PartyRequestAccept struct {
	SourceCharacterID uint64
	PartyID           uint64
}

func (s *PartyRequestAccept) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	binary.Write(b, binary.LittleEndian, s.PartyID)
	return b.Bytes()
}

func (s *PartyRequestAccept) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	return nil
}

type PartyRequestDecline struct {
	SourceCharacterID uint64
	PartyID           uint64
}

func (s *PartyRequestDecline) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	binary.Write(b, binary.LittleEndian, s.PartyID)
	return b.Bytes()
}

func (s *PartyRequestDecline) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	return nil
}

type PartyRequestInvite struct {
	SourceCharacterID  uint64
	SourceGlobalID     uint64
	TargetCharacterID  uint64
	TargetGlobalID     uint64
	FromAdventureParty uint8
}

func (s *PartyRequestInvite) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 33))
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	binary.Write(b, binary.LittleEndian, s.SourceGlobalID)
	binary.Write(b, binary.LittleEndian, s.TargetCharacterID)
	binary.Write(b, binary.LittleEndian, s.TargetGlobalID)
	binary.Write(b, binary.LittleEndian, s.FromAdventureParty)
	return b.Bytes()
}

func (s *PartyRequestInvite) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	return nil
}

type PartyRequestJoin struct {
	DestinationCharacterID uint64
	CharacterID            uint64
	GlobalID               uint64
	PlayerNameBlob         string
	PartyID                uint64
	FriendsOnly            int32
}

func (s *PartyRequestJoin) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 38+len(s.PlayerNameBlob)))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_5(b, s.PlayerNameBlob)
	binary.Write(b, binary.LittleEndian, s.PartyID)
	binary.Write(b, binary.LittleEndian, s.FriendsOnly)
	return b.Bytes()
}

func (s *PartyRequestJoin) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.PlayerNameBlob, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FriendsOnly); err != nil {
		return err
	}
	return nil
}

type PartyRequestMemberZones struct {
	PartyID           uint64
	SourceCharacterID uint64
}

func (s *PartyRequestMemberZones) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.PartyID)
	binary.Write(b, binary.LittleEndian, s.SourceCharacterID)
	return b.Bytes()
}

func (s *PartyRequestMemberZones) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceCharacterID); err != nil {
		return err
	}
	return nil
}

type PartyRequestResponse struct {
	DestinationCharacterID uint64
	TargetCharacterID      uint64
	TargetGlobalID         uint64
	ErrorCode              int32
	PlayerNameBlob         string
}

func (s *PartyRequestResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 30+len(s.PlayerNameBlob)))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	binary.Write(b, binary.LittleEndian, s.TargetCharacterID)
	binary.Write(b, binary.LittleEndian, s.TargetGlobalID)
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	writeString_5(b, s.PlayerNameBlob)
	return b.Bytes()
}

func (s *PartyRequestResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if s.PlayerNameBlob, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type PartyRequestTimeout struct {
	DestinationCharacterID uint64
}

func (s *PartyRequestTimeout) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	return b.Bytes()
}

func (s *PartyRequestTimeout) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	return nil
}

type PartySubmitMemberZones struct {
	PartyMemberZones       string
	DestinationCharacterID uint64
}

func (s *PartySubmitMemberZones) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.PartyMemberZones)))
	writeString_5(b, s.PartyMemberZones)
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	return b.Bytes()
}

func (s *PartySubmitMemberZones) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PartyMemberZones, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	return nil
}

type PartyUpdate struct {
	DestinationCharacterID uint64
	PlayerNameBlob         string
	CharacterID            uint64
	GlobalID               uint64
	SchoolID               uint32
	Level                  uint32
	ZoneDisplayName        string
	HasFilteredChat        uint8
	PartyTotalSize         uint32
	FromAdventureParty     uint8
	SigilSlot              uint32
	LeaderGID              uint64
	QuestGID               uint64
	GoalGID                uint64
}

func (s *PartyUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 70+len(s.PlayerNameBlob)+len(s.ZoneDisplayName)))
	binary.Write(b, binary.LittleEndian, s.DestinationCharacterID)
	writeString_5(b, s.PlayerNameBlob)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.SchoolID)
	binary.Write(b, binary.LittleEndian, s.Level)
	writeString_5(b, s.ZoneDisplayName)
	binary.Write(b, binary.LittleEndian, s.HasFilteredChat)
	binary.Write(b, binary.LittleEndian, s.PartyTotalSize)
	binary.Write(b, binary.LittleEndian, s.FromAdventureParty)
	binary.Write(b, binary.LittleEndian, s.SigilSlot)
	binary.Write(b, binary.LittleEndian, s.LeaderGID)
	binary.Write(b, binary.LittleEndian, s.QuestGID)
	binary.Write(b, binary.LittleEndian, s.GoalGID)
	return b.Bytes()
}

func (s *PartyUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DestinationCharacterID); err != nil {
		return err
	}
	if s.PlayerNameBlob, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SchoolID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Level); err != nil {
		return err
	}
	if s.ZoneDisplayName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HasFilteredChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyTotalSize); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SigilSlot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LeaderGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.QuestGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GoalGID); err != nil {
		return err
	}
	return nil
}

type PartyZoneRequest struct {
	CharacterID uint64
}

func (s *PartyZoneRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	return b.Bytes()
}

func (s *PartyZoneRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type PartyZoneRequestResponse struct {
	CharacterID        uint64
	PartyID            uint64
	PartyTotalSize     uint32
	FromAdventureParty uint8
}

func (s *PartyZoneRequestResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.PartyID)
	binary.Write(b, binary.LittleEndian, s.PartyTotalSize)
	binary.Write(b, binary.LittleEndian, s.FromAdventureParty)
	return b.Bytes()
}

func (s *PartyZoneRequestResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyTotalSize); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromAdventureParty); err != nil {
		return err
	}
	return nil
}

type PickUpObject struct {
	GameObjectID uint64
}

func (s *PickUpObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	return b.Bytes()
}

func (s *PickUpObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	return nil
}

type PlaceObject struct {
	GlobalID   uint64
	TemplateID uint64
}

func (s *PlaceObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	return b.Bytes()
}

func (s *PlaceObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type PlayCinematic struct {
	CinematicID        uint64
	TargetID           uint64
	Start_X            float32
	Start_Y            float32
	Start_Z            float32
	End_X              float32
	End_Y              float32
	End_Z              float32
	Asset              string
	DisableInteraction uint8
}

func (s *PlayCinematic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 43+len(s.Asset)))
	binary.Write(b, binary.LittleEndian, s.CinematicID)
	binary.Write(b, binary.LittleEndian, s.TargetID)
	binary.Write(b, binary.LittleEndian, s.Start_X)
	binary.Write(b, binary.LittleEndian, s.Start_Y)
	binary.Write(b, binary.LittleEndian, s.Start_Z)
	binary.Write(b, binary.LittleEndian, s.End_X)
	binary.Write(b, binary.LittleEndian, s.End_Y)
	binary.Write(b, binary.LittleEndian, s.End_Z)
	writeString_5(b, s.Asset)
	binary.Write(b, binary.LittleEndian, s.DisableInteraction)
	return b.Bytes()
}

func (s *PlayCinematic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CinematicID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_X); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_Y); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_Z); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.End_X); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.End_Y); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.End_Z); err != nil {
		return err
	}
	if s.Asset, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DisableInteraction); err != nil {
		return err
	}
	return nil
}

type PlayerBlackballedAlert struct {
	CharacterID uint64
	Muted       int8
}

func (s *PlayerBlackballedAlert) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.Muted)
	return b.Bytes()
}

func (s *PlayerBlackballedAlert) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Muted); err != nil {
		return err
	}
	return nil
}

type PlayerReadyAck struct {
	CharacterID      uint64
	TournamentNameID uint32
	MatchNameID      uint32
	BracketID        uint64
	Online           uint8
}

func (s *PlayerReadyAck) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.TournamentNameID)
	binary.Write(b, binary.LittleEndian, s.MatchNameID)
	binary.Write(b, binary.LittleEndian, s.BracketID)
	binary.Write(b, binary.LittleEndian, s.Online)
	return b.Bytes()
}

func (s *PlayerReadyAck) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MatchNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BracketID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Online); err != nil {
		return err
	}
	return nil
}

type PlaySound struct {
	SoundID           uint64
	ReinteractTime    float32
	SoundFilename     string
	StartDelay        float32
	PlayAtMusicVolume uint8
}

func (s *PlaySound) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.SoundFilename)))
	binary.Write(b, binary.LittleEndian, s.SoundID)
	binary.Write(b, binary.LittleEndian, s.ReinteractTime)
	writeString_5(b, s.SoundFilename)
	binary.Write(b, binary.LittleEndian, s.StartDelay)
	binary.Write(b, binary.LittleEndian, s.PlayAtMusicVolume)
	return b.Bytes()
}

func (s *PlaySound) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SoundID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ReinteractTime); err != nil {
		return err
	}
	if s.SoundFilename, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StartDelay); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayAtMusicVolume); err != nil {
		return err
	}
	return nil
}

type PostZoneEventFromClient struct {
	EventName string
}

func (s *PostZoneEventFromClient) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.EventName)))
	writeString_5(b, s.EventName)
	return b.Bytes()
}

func (s *PostZoneEventFromClient) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.EventName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type PreviewIsland struct {
	TemplateID uint32
}

func (s *PreviewIsland) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	return b.Bytes()
}

func (s *PreviewIsland) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type PvPUpdateInfo struct {
	TournamentInfo string
	CharacterID    uint64
	PromptMsg      uint8
	DiffType       uint32
	IsPvPQueue     uint8
}

func (s *PvPUpdateInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.TournamentInfo)))
	writeString_5(b, s.TournamentInfo)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.PromptMsg)
	binary.Write(b, binary.LittleEndian, s.DiffType)
	binary.Write(b, binary.LittleEndian, s.IsPvPQueue)
	return b.Bytes()
}

func (s *PvPUpdateInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.TournamentInfo, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PromptMsg); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DiffType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsPvPQueue); err != nil {
		return err
	}
	return nil
}

type QueryLogout struct {
	IsInstance uint8
}

func (s *QueryLogout) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.IsInstance)
	return b.Bytes()
}

func (s *QueryLogout) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.IsInstance); err != nil {
		return err
	}
	return nil
}

type RadialChat struct {
	SourceName string
	SourceID   uint64
	Message    string
	Filter     uint8
}

func (s *RadialChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13+len(s.SourceName)+len(s.Message)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.Filter)
	return b.Bytes()
}

func (s *RadialChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	return nil
}

type RadialQuickChat struct {
	SourceName string
	SourceID   uint64
	MessageID  uint32
	Filter     uint8
}

func (s *RadialQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 15+len(s.SourceName)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.MessageID)
	binary.Write(b, binary.LittleEndian, s.Filter)
	return b.Bytes()
}

func (s *RadialQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	return nil
}

type RadialQuickChatExt struct {
	SourceName string
	SourceID   uint64
	Message    string
	Filter     uint8
}

func (s *RadialQuickChatExt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13+len(s.SourceName)+len(s.Message)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.Filter)
	return b.Bytes()
}

func (s *RadialQuickChatExt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	return nil
}

type RadialZoneClusterQuickChat struct {
	SourceName string
	SourceID   uint64
	MessageID  uint32
	Filter     uint8
	IsOwner    uint8
}

func (s *RadialZoneClusterQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.SourceName)))
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.MessageID)
	binary.Write(b, binary.LittleEndian, s.Filter)
	binary.Write(b, binary.LittleEndian, s.IsOwner)
	return b.Bytes()
}

func (s *RadialZoneClusterQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsOwner); err != nil {
		return err
	}
	return nil
}

type RANKING struct {
	GameID      uint32
	Name        string
	CharacterID uint64
	Score       int32
	Rank        int32
}

func (s *RANKING) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.GameID)
	writeString_5(b, s.Name)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.Score)
	binary.Write(b, binary.LittleEndian, s.Rank)
	return b.Bytes()
}

func (s *RANKING) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameID); err != nil {
		return err
	}
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Score); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Rank); err != nil {
		return err
	}
	return nil
}

type RealmInfoQuery struct {
	RealmInfoList    string
	CurrentRealm     string
	InstanceInfoList string
	CurrentZone      string
}

func (s *RealmInfoQuery) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8+len(s.RealmInfoList)+len(s.CurrentRealm)+len(s.InstanceInfoList)+len(s.CurrentZone)))
	writeString_5(b, s.RealmInfoList)
	writeString_5(b, s.CurrentRealm)
	writeString_5(b, s.InstanceInfoList)
	writeString_5(b, s.CurrentZone)
	return b.Bytes()
}

func (s *RealmInfoQuery) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.RealmInfoList, err = readString_5(b); err != nil {
		return err
	}
	if s.CurrentRealm, err = readString_5(b); err != nil {
		return err
	}
	if s.InstanceInfoList, err = readString_5(b); err != nil {
		return err
	}
	if s.CurrentZone, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RecallLocation struct {
}

func (s *RecallLocation) Marshal() []byte {
	return []byte{}
}

func (s *RecallLocation) Unmarshal(data []byte) error {
	return nil
}

type ReceiveGifts struct {
	Success       int32
	Data          string
	CrownsRewards int32
	PeriodicItems int32
}

func (s *ReceiveGifts) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Success)
	writeString_5(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.CrownsRewards)
	binary.Write(b, binary.LittleEndian, s.PeriodicItems)
	return b.Bytes()
}

func (s *ReceiveGifts) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CrownsRewards); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PeriodicItems); err != nil {
		return err
	}
	return nil
}

type ReceivePromotions struct {
	Success int32
	Data    string
}

func (s *ReceivePromotions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Success)
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *ReceivePromotions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RedeemGift struct {
	GiftID               string
	BundleChoiceID       uint64
	PrimaryColorIndex    int32
	IsPeriodicItem       uint8
	RedeemElixirEquipNow uint32
}

func (s *RedeemGift) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.GiftID)))
	writeString_5(b, s.GiftID)
	binary.Write(b, binary.LittleEndian, s.BundleChoiceID)
	binary.Write(b, binary.LittleEndian, s.PrimaryColorIndex)
	binary.Write(b, binary.LittleEndian, s.IsPeriodicItem)
	binary.Write(b, binary.LittleEndian, s.RedeemElixirEquipNow)
	return b.Bytes()
}

func (s *RedeemGift) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.GiftID, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BundleChoiceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PrimaryColorIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsPeriodicItem); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RedeemElixirEquipNow); err != nil {
		return err
	}
	return nil
}

type RedeemMailGift struct {
	MailId            uint64
	PrimaryColorIndex int32
}

func (s *RedeemMailGift) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.MailId)
	binary.Write(b, binary.LittleEndian, s.PrimaryColorIndex)
	return b.Bytes()
}

func (s *RedeemMailGift) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MailId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PrimaryColorIndex); err != nil {
		return err
	}
	return nil
}

type RedeemMailGiftResponse struct {
	MailId     uint64
	ErrorCode  int32
	TemplateId uint64
}

func (s *RedeemMailGiftResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.MailId)
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	binary.Write(b, binary.LittleEndian, s.TemplateId)
	return b.Bytes()
}

func (s *RedeemMailGiftResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MailId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateId); err != nil {
		return err
	}
	return nil
}

type ReleaseDelay struct {
}

func (s *ReleaseDelay) Marshal() []byte {
	return []byte{}
}

func (s *ReleaseDelay) Unmarshal(data []byte) error {
	return nil
}

type ReloadTemplateDir struct {
	Directory string
	Recursive int8
}

func (s *ReloadTemplateDir) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Directory)))
	writeString_5(b, s.Directory)
	binary.Write(b, binary.LittleEndian, s.Recursive)
	return b.Bytes()
}

func (s *ReloadTemplateDir) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Directory, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Recursive); err != nil {
		return err
	}
	return nil
}

type RemovedShopper struct {
	StateName string
}

func (s *RemovedShopper) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.StateName)))
	writeString_5(b, s.StateName)
	return b.Bytes()
}

func (s *RemovedShopper) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.StateName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RemoveEffect struct {
	GameObjectID uint64
	EffectNameID uint32
	InternalID   int32
}

func (s *RemoveEffect) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	binary.Write(b, binary.LittleEndian, s.EffectNameID)
	binary.Write(b, binary.LittleEndian, s.InternalID)
	return b.Bytes()
}

func (s *RemoveEffect) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EffectNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.InternalID); err != nil {
		return err
	}
	return nil
}

type RemoveItemRequest struct {
	GlobalID       uint64
	ItemTemplateID uint64
	Quantity       int32
}

func (s *RemoveItemRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemTemplateID)
	binary.Write(b, binary.LittleEndian, s.Quantity)
	return b.Bytes()
}

func (s *RemoveItemRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type RemoveObject struct {
	GameObjectID uint64
}

func (s *RemoveObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	return b.Bytes()
}

func (s *RemoveObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	return nil
}

type RemoveParticle struct {
	NewName  string
	AttachTo string
	ParentID uint64
}

func (s *RemoveParticle) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.NewName)+len(s.AttachTo)))
	writeString_5(b, s.NewName)
	writeString_5(b, s.AttachTo)
	binary.Write(b, binary.LittleEndian, s.ParentID)
	return b.Bytes()
}

func (s *RemoveParticle) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.NewName, err = readString_5(b); err != nil {
		return err
	}
	if s.AttachTo, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	return nil
}

type RemoveZoneTimer struct {
	TimerID int32
}

func (s *RemoveZoneTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.TimerID)
	return b.Bytes()
}

func (s *RemoveZoneTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TimerID); err != nil {
		return err
	}
	return nil
}

type ReportAdTakeover struct {
	PARTNER string
	URL     string
}

func (s *ReportAdTakeover) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.PARTNER)+len(s.URL)))
	writeString_5(b, s.PARTNER)
	writeString_5(b, s.URL)
	return b.Bytes()
}

func (s *ReportAdTakeover) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PARTNER, err = readString_5(b); err != nil {
		return err
	}
	if s.URL, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type ReqAskServer struct {
	RequestID   uint32
	Requirement string
	Response    uint32
}

func (s *ReqAskServer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Requirement)))
	binary.Write(b, binary.LittleEndian, s.RequestID)
	writeString_5(b, s.Requirement)
	binary.Write(b, binary.LittleEndian, s.Response)
	return b.Bytes()
}

func (s *ReqAskServer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RequestID); err != nil {
		return err
	}
	if s.Requirement, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Response); err != nil {
		return err
	}
	return nil
}

type ReqChatDiagnostics struct {
	CharacterID uint64
	Data        string
}

func (s *ReqChatDiagnostics) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_5(b, s.Data)
	return b.Bytes()
}

func (s *ReqChatDiagnostics) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Data, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestAdvanceChannelInstance struct {
	SourceID  uint64
	ChannelID uint64
}

func (s *RequestAdvanceChannelInstance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.ChannelID)
	return b.Bytes()
}

func (s *RequestAdvanceChannelInstance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	return nil
}

type RequestChatCode struct {
	ListOwnerGID uint64
	Code         string
	CodeTime     int32
	SpecialCode  int32
	Forwarded    uint8
	NameBlob     string
}

func (s *RequestChatCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21+len(s.Code)+len(s.NameBlob)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	writeString_5(b, s.Code)
	binary.Write(b, binary.LittleEndian, s.CodeTime)
	binary.Write(b, binary.LittleEndian, s.SpecialCode)
	binary.Write(b, binary.LittleEndian, s.Forwarded)
	writeString_5(b, s.NameBlob)
	return b.Bytes()
}

func (s *RequestChatCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if s.Code, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CodeTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpecialCode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if s.NameBlob, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestCreateChannel struct {
	SourceID      uint64
	Name          string
	Password      string
	Flags         uint32
	ChatInfoFlags uint32
	UserLimit     int32
}

func (s *RequestCreateChannel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.Name)+len(s.Password)))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.Name)
	writeString_5(b, s.Password)
	binary.Write(b, binary.LittleEndian, s.Flags)
	binary.Write(b, binary.LittleEndian, s.ChatInfoFlags)
	binary.Write(b, binary.LittleEndian, s.UserLimit)
	return b.Bytes()
}

func (s *RequestCreateChannel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if s.Password, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChatInfoFlags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserLimit); err != nil {
		return err
	}
	return nil
}

type RequestDirectedChat struct {
	Message  string
	TargetID uint64
}

func (s *RequestDirectedChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Message)))
	writeString_5(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.TargetID)
	return b.Bytes()
}

func (s *RequestDirectedChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	return nil
}

type RequestDirectedChatByName struct {
	Message    string
	TargetName string
}

func (s *RequestDirectedChatByName) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Message)+len(s.TargetName)))
	writeString_5(b, s.Message)
	writeString_5(b, s.TargetName)
	return b.Bytes()
}

func (s *RequestDirectedChatByName) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if s.TargetName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestDirectedQuickChat struct {
	TargetID  uint64
	MessageID uint32
}

func (s *RequestDirectedQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.TargetID)
	binary.Write(b, binary.LittleEndian, s.MessageID)
	return b.Bytes()
}

func (s *RequestDirectedQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	return nil
}

type RequestDirectedQuickChatExt struct {
	TargetID uint64
	Message  string
}

func (s *RequestDirectedQuickChatExt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.TargetID)
	writeString_5(b, s.Message)
	return b.Bytes()
}

func (s *RequestDirectedQuickChatExt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestJoinChannel struct {
	SourceID  uint64
	ChannelID uint64
	Password  string
}

func (s *RequestJoinChannel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.Password)))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.ChannelID)
	writeString_5(b, s.Password)
	return b.Bytes()
}

func (s *RequestJoinChannel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	if s.Password, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestJoinChannelByName struct {
	SourceID    uint64
	ChannelName string
	Password    string
}

func (s *RequestJoinChannelByName) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.ChannelName)+len(s.Password)))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.ChannelName)
	writeString_5(b, s.Password)
	return b.Bytes()
}

func (s *RequestJoinChannelByName) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.ChannelName, err = readString_5(b); err != nil {
		return err
	}
	if s.Password, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestLeaveChannel struct {
	SourceID  uint64
	ChannelID uint64
}

func (s *RequestLeaveChannel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.ChannelID)
	return b.Bytes()
}

func (s *RequestLeaveChannel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChannelID); err != nil {
		return err
	}
	return nil
}

type RequestLeaveChannelByName struct {
	SourceID    uint64
	ChannelName string
}

func (s *RequestLeaveChannelByName) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.ChannelName)))
	binary.Write(b, binary.LittleEndian, s.SourceID)
	writeString_5(b, s.ChannelName)
	return b.Bytes()
}

func (s *RequestLeaveChannelByName) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if s.ChannelName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestMaxFriends struct {
	RequestingPlayerGID      uint64
	MaximumFriends           int32
	MaximumSubscriberFriends int32
}

func (s *RequestMaxFriends) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.RequestingPlayerGID)
	binary.Write(b, binary.LittleEndian, s.MaximumFriends)
	binary.Write(b, binary.LittleEndian, s.MaximumSubscriberFriends)
	return b.Bytes()
}

func (s *RequestMaxFriends) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RequestingPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaximumFriends); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaximumSubscriberFriends); err != nil {
		return err
	}
	return nil
}

type RequestRadialChat struct {
	Message string
}

func (s *RequestRadialChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Message)))
	writeString_5(b, s.Message)
	return b.Bytes()
}

func (s *RequestRadialChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestRadialFriendChat struct {
	PlayerGID  uint64
	Message    string
	SourceID   uint64
	Filter     uint8
	SourceName string
}

func (s *RequestRadialFriendChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21+len(s.Message)+len(s.SourceName)))
	binary.Write(b, binary.LittleEndian, s.PlayerGID)
	writeString_5(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.Filter)
	writeString_5(b, s.SourceName)
	return b.Bytes()
}

func (s *RequestRadialFriendChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestRadialFriendQuickChat struct {
	PlayerGID  uint64
	MessageID  uint32
	SourceID   uint64
	Filter     uint8
	SourceName string
}

func (s *RequestRadialFriendQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23+len(s.SourceName)))
	binary.Write(b, binary.LittleEndian, s.PlayerGID)
	binary.Write(b, binary.LittleEndian, s.MessageID)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.Filter)
	writeString_5(b, s.SourceName)
	return b.Bytes()
}

func (s *RequestRadialFriendQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestRadialOwnerChat struct {
	Message    string
	SourceID   uint64
	Filter     uint8
	SourceName string
	IsOwner    uint8
}

func (s *RequestRadialOwnerChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Message)+len(s.SourceName)))
	writeString_5(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.SourceID)
	binary.Write(b, binary.LittleEndian, s.Filter)
	writeString_5(b, s.SourceName)
	binary.Write(b, binary.LittleEndian, s.IsOwner)
	return b.Bytes()
}

func (s *RequestRadialOwnerChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SourceID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Filter); err != nil {
		return err
	}
	if s.SourceName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsOwner); err != nil {
		return err
	}
	return nil
}

type RequestRadialQuickChat struct {
	MessageID uint32
}

func (s *RequestRadialQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.MessageID)
	return b.Bytes()
}

func (s *RequestRadialQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	return nil
}

type RequestRadialQuickChatExt struct {
	Message string
}

func (s *RequestRadialQuickChatExt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Message)))
	writeString_5(b, s.Message)
	return b.Bytes()
}

func (s *RequestRadialQuickChatExt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestSession struct {
	Session   string
	Valid     uint8
	ID        int32
	CRC       uint32
	STEAMID   string
	Whitelist string
	Threshold uint32
}

func (s *RequestSession) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.Session)+len(s.STEAMID)+len(s.Whitelist)))
	writeString_5(b, s.Session)
	binary.Write(b, binary.LittleEndian, s.Valid)
	binary.Write(b, binary.LittleEndian, s.ID)
	binary.Write(b, binary.LittleEndian, s.CRC)
	writeString_5(b, s.STEAMID)
	writeString_5(b, s.Whitelist)
	binary.Write(b, binary.LittleEndian, s.Threshold)
	return b.Bytes()
}

func (s *RequestSession) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Session, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Valid); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CRC); err != nil {
		return err
	}
	if s.STEAMID, err = readString_5(b); err != nil {
		return err
	}
	if s.Whitelist, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Threshold); err != nil {
		return err
	}
	return nil
}

type RequestZoneClusterQuickChat struct {
	MessageID uint32
	IsOwner   uint8
}

func (s *RequestZoneClusterQuickChat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.MessageID)
	binary.Write(b, binary.LittleEndian, s.IsOwner)
	return b.Bytes()
}

func (s *RequestZoneClusterQuickChat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MessageID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsOwner); err != nil {
		return err
	}
	return nil
}

type RequestGifts struct {
	GiftType string
}

func (s *RequestGifts) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.GiftType)))
	writeString_5(b, s.GiftType)
	return b.Bytes()
}

func (s *RequestGifts) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.GiftType, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RequestPromotions struct {
	Locale string
}

func (s *RequestPromotions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Locale)))
	writeString_5(b, s.Locale)
	return b.Bytes()
}

func (s *RequestPromotions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Locale, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type RestoreCharRsp struct {
	Success uint8
}

func (s *RestoreCharRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Success)
	return b.Bytes()
}

func (s *RestoreCharRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type RetrieveMail struct {
}

func (s *RetrieveMail) Marshal() []byte {
	return []byte{}
}

func (s *RetrieveMail) Unmarshal(data []byte) error {
	return nil
}

type RetryTeleport struct {
}

func (s *RetryTeleport) Marshal() []byte {
	return []byte{}
}

func (s *RetryTeleport) Unmarshal(data []byte) error {
	return nil
}

type Script struct {
	ProcessID int32
	Message   string
}

func (s *Script) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.ProcessID)
	writeString_5(b, s.Message)
	return b.Bytes()
}

func (s *Script) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ProcessID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type SelectBadge struct {
	BadgeNameID uint32
	Error       uint32
}

func (s *SelectBadge) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.BadgeNameID)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *SelectBadge) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.BadgeNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type SendChatCode struct {
	ListOwnerGID uint64
	Code         string
	Error        uint32
	UseSuccess   uint64
	CreatorName  string
}

func (s *SendChatCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.Code)+len(s.CreatorName)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	writeString_5(b, s.Code)
	binary.Write(b, binary.LittleEndian, s.Error)
	binary.Write(b, binary.LittleEndian, s.UseSuccess)
	writeString_5(b, s.CreatorName)
	return b.Bytes()
}

func (s *SendChatCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if s.Code, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseSuccess); err != nil {
		return err
	}
	if s.CreatorName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type SendInteractOptions struct {
	MobileID uint64
	Options  string
}

func (s *SendInteractOptions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Options)))
	binary.Write(b, binary.LittleEndian, s.MobileID)
	writeString_5(b, s.Options)
	return b.Bytes()
}

func (s *SendInteractOptions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if s.Options, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type SendText struct {
	CharacterID uint64
	Message     string
}

func (s *SendText) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_5(b, s.Message)
	return b.Bytes()
}

func (s *SendText) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Message, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type ServerMove struct {
	LocationX uint16
	LocationY uint16
	LocationZ uint16
	Direction uint8
	MobileID  uint16
}

func (s *ServerMove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.LocationX)
	binary.Write(b, binary.LittleEndian, s.LocationY)
	binary.Write(b, binary.LittleEndian, s.LocationZ)
	binary.Write(b, binary.LittleEndian, s.Direction)
	binary.Write(b, binary.LittleEndian, s.MobileID)
	return b.Bytes()
}

func (s *ServerMove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	return nil
}

type ServerShutdown struct {
	Message uint32
}

func (s *ServerShutdown) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *ServerShutdown) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Message); err != nil {
		return err
	}
	return nil
}

type ServerTeleport struct {
	LocationX uint16
	LocationY uint16
	LocationZ uint16
	Direction uint8
	MobileID  uint16
}

func (s *ServerTeleport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.LocationX)
	binary.Write(b, binary.LittleEndian, s.LocationY)
	binary.Write(b, binary.LittleEndian, s.LocationZ)
	binary.Write(b, binary.LittleEndian, s.Direction)
	binary.Write(b, binary.LittleEndian, s.MobileID)
	return b.Bytes()
}

func (s *ServerTeleport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	return nil
}

type ServerTransfer struct {
	IP              string
	TCPPort         int32
	UDPPort         int32
	Key             int32
	UserID          uint64
	CharID          uint64
	ZoneName        string
	ZoneID          uint64
	Location        string
	Slot            int32
	SessionID       uint64
	SessionSlot     int32
	TargetPlayerID  uint64
	FallbackIP      string
	FallbackTCPPort int32
	FallbackUDPPort int32
	FallbackKey     int32
	FallbackZone    string
	FallbackZoneID  uint64
	TransitionID    uint32
}

func (s *ServerTransfer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 94+len(s.IP)+len(s.ZoneName)+len(s.Location)+len(s.FallbackIP)+len(s.FallbackZone)))
	writeString_5(b, s.IP)
	binary.Write(b, binary.LittleEndian, s.TCPPort)
	binary.Write(b, binary.LittleEndian, s.UDPPort)
	binary.Write(b, binary.LittleEndian, s.Key)
	binary.Write(b, binary.LittleEndian, s.UserID)
	binary.Write(b, binary.LittleEndian, s.CharID)
	writeString_5(b, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	writeString_5(b, s.Location)
	binary.Write(b, binary.LittleEndian, s.Slot)
	binary.Write(b, binary.LittleEndian, s.SessionID)
	binary.Write(b, binary.LittleEndian, s.SessionSlot)
	binary.Write(b, binary.LittleEndian, s.TargetPlayerID)
	writeString_5(b, s.FallbackIP)
	binary.Write(b, binary.LittleEndian, s.FallbackTCPPort)
	binary.Write(b, binary.LittleEndian, s.FallbackUDPPort)
	binary.Write(b, binary.LittleEndian, s.FallbackKey)
	writeString_5(b, s.FallbackZone)
	binary.Write(b, binary.LittleEndian, s.FallbackZoneID)
	binary.Write(b, binary.LittleEndian, s.TransitionID)
	return b.Bytes()
}

func (s *ServerTransfer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.IP, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TCPPort); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UDPPort); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Key); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharID); err != nil {
		return err
	}
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if s.Location, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Slot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionSlot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetPlayerID); err != nil {
		return err
	}
	if s.FallbackIP, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallbackTCPPort); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallbackUDPPort); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallbackKey); err != nil {
		return err
	}
	if s.FallbackZone, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallbackZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransitionID); err != nil {
		return err
	}
	return nil
}

type ServerTutorialCommand struct {
	QuestToAdd     string
	QuestToRemove  string
	GoalToComplete string
	EventToPost    string
	Action         string
	Value          int32
}

func (s *ServerTutorialCommand) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.QuestToAdd)+len(s.QuestToRemove)+len(s.GoalToComplete)+len(s.EventToPost)+len(s.Action)))
	writeString_5(b, s.QuestToAdd)
	writeString_5(b, s.QuestToRemove)
	writeString_5(b, s.GoalToComplete)
	writeString_5(b, s.EventToPost)
	writeString_5(b, s.Action)
	binary.Write(b, binary.LittleEndian, s.Value)
	return b.Bytes()
}

func (s *ServerTutorialCommand) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.QuestToAdd, err = readString_5(b); err != nil {
		return err
	}
	if s.QuestToRemove, err = readString_5(b); err != nil {
		return err
	}
	if s.GoalToComplete, err = readString_5(b); err != nil {
		return err
	}
	if s.EventToPost, err = readString_5(b); err != nil {
		return err
	}
	if s.Action, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Value); err != nil {
		return err
	}
	return nil
}

type ServerError struct {
	Error uint32
}

func (s *ServerError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *ServerError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type SERVERPROCESSRUNNING struct {
	PID   uint32
	JobID uint32
}

func (s *SERVERPROCESSRUNNING) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.PID)
	binary.Write(b, binary.LittleEndian, s.JobID)
	return b.Bytes()
}

func (s *SERVERPROCESSRUNNING) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	return nil
}

type SESSION struct {
	ZoneID      uint64
	SessionID   uint64
	Name        string
	Slots       int32
	ActiveSlots int32
	Zone        string
	Rules       string
}

func (s *SESSION) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 30+len(s.Name)+len(s.Zone)+len(s.Rules)))
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.SessionID)
	writeString_5(b, s.Name)
	binary.Write(b, binary.LittleEndian, s.Slots)
	binary.Write(b, binary.LittleEndian, s.ActiveSlots)
	writeString_5(b, s.Zone)
	writeString_5(b, s.Rules)
	return b.Bytes()
}

func (s *SESSION) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Slots); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ActiveSlots); err != nil {
		return err
	}
	if s.Zone, err = readString_5(b); err != nil {
		return err
	}
	if s.Rules, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type SESSIONERROR struct {
	ErrorCode int32
}

func (s *SESSIONERROR) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	return b.Bytes()
}

func (s *SESSIONERROR) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	return nil
}

type SESSIONPLAYER struct {
	Slot     int32
	CharID   uint64
	Name     string
	Ranking  string
	IsFriend int32
}

func (s *SESSIONPLAYER) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20+len(s.Name)+len(s.Ranking)))
	binary.Write(b, binary.LittleEndian, s.Slot)
	binary.Write(b, binary.LittleEndian, s.CharID)
	writeString_5(b, s.Name)
	writeString_5(b, s.Ranking)
	binary.Write(b, binary.LittleEndian, s.IsFriend)
	return b.Bytes()
}

func (s *SESSIONPLAYER) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Slot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharID); err != nil {
		return err
	}
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if s.Ranking, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsFriend); err != nil {
		return err
	}
	return nil
}

type SETHOUSECUSTOMIZATION struct {
	GameObjectID    uint64
	TagName         string
	TextureFilename string
}

func (s *SETHOUSECUSTOMIZATION) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.TagName)+len(s.TextureFilename)))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	writeString_5(b, s.TagName)
	writeString_5(b, s.TextureFilename)
	return b.Bytes()
}

func (s *SETHOUSECUSTOMIZATION) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if s.TagName, err = readString_5(b); err != nil {
		return err
	}
	if s.TextureFilename, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type SplitQuantity struct {
	GlobalID uint64
	ItemID   uint64
	Quantity int32
}

func (s *SplitQuantity) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	binary.Write(b, binary.LittleEndian, s.Quantity)
	return b.Bytes()
}

func (s *SplitQuantity) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type StartStagedCinematic struct {
	CinematicName    string
	InitialStageName string
	Start_X          float32
	Start_Y          float32
	Start_Z          float32
	Yaw              float32
	DuelID           uint64
	WinningTeamID    int8
}

func (s *StartStagedCinematic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 29+len(s.CinematicName)+len(s.InitialStageName)))
	writeString_5(b, s.CinematicName)
	writeString_5(b, s.InitialStageName)
	binary.Write(b, binary.LittleEndian, s.Start_X)
	binary.Write(b, binary.LittleEndian, s.Start_Y)
	binary.Write(b, binary.LittleEndian, s.Start_Z)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.WinningTeamID)
	return b.Bytes()
}

func (s *StartStagedCinematic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.CinematicName, err = readString_5(b); err != nil {
		return err
	}
	if s.InitialStageName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_X); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_Y); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start_Z); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WinningTeamID); err != nil {
		return err
	}
	return nil
}

type STARTCLIENTPROCESS struct {
	JobID      uint32
	ScriptName string
	OwnerGID   uint64
}

func (s *STARTCLIENTPROCESS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.ScriptName)))
	binary.Write(b, binary.LittleEndian, s.JobID)
	writeString_5(b, s.ScriptName)
	binary.Write(b, binary.LittleEndian, s.OwnerGID)
	return b.Bytes()
}

func (s *STARTCLIENTPROCESS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JobID); err != nil {
		return err
	}
	if s.ScriptName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerGID); err != nil {
		return err
	}
	return nil
}

type STARTSERVERPROCESS struct {
	PID        uint32
	ScriptName string
	OwnerGID   uint64
}

func (s *STARTSERVERPROCESS) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.ScriptName)))
	binary.Write(b, binary.LittleEndian, s.PID)
	writeString_5(b, s.ScriptName)
	binary.Write(b, binary.LittleEndian, s.OwnerGID)
	return b.Bytes()
}

func (s *STARTSERVERPROCESS) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PID); err != nil {
		return err
	}
	if s.ScriptName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerGID); err != nil {
		return err
	}
	return nil
}

type SuboptimalBracketResponse struct {
	Choice uint32
}

func (s *SuboptimalBracketResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.Choice)
	return b.Bytes()
}

func (s *SuboptimalBracketResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Choice); err != nil {
		return err
	}
	return nil
}

type TeleportToGameZone struct {
	CharacterID    uint64
	Game           string
	Track          string
	ZoneInstanceID uint64
}

func (s *TeleportToGameZone) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20+len(s.Game)+len(s.Track)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_5(b, s.Game)
	writeString_5(b, s.Track)
	binary.Write(b, binary.LittleEndian, s.ZoneInstanceID)
	return b.Bytes()
}

func (s *TeleportToGameZone) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Game, err = readString_5(b); err != nil {
		return err
	}
	if s.Track, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneInstanceID); err != nil {
		return err
	}
	return nil
}

type TournamentUpdate struct {
	Updates     string
	CharacterID uint64
}

func (s *TournamentUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Updates)))
	writeString_5(b, s.Updates)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	return b.Bytes()
}

func (s *TournamentUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Updates, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type TransferCharRsp struct {
	Success uint8
}

func (s *TransferCharRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Success)
	return b.Bytes()
}

func (s *TransferCharRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type TransferInstance struct {
	ZoneID uint64
	Error  uint32
}

func (s *TransferInstance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *TransferInstance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type TransferRealms struct {
	RealmName string
	Error     uint32
}

func (s *TransferRealms) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.RealmName)))
	writeString_5(b, s.RealmName)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *TransferRealms) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.RealmName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type TrashInventoryItem struct {
	GlobalID   uint64
	TemplateID uint64
}

func (s *TrashInventoryItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	return b.Bytes()
}

func (s *TrashInventoryItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type Tutorials struct {
	GlobalID     uint64
	Remove       int32
	TutorialInfo string
}

func (s *Tutorials) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.TutorialInfo)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Remove)
	writeString_5(b, s.TutorialInfo)
	return b.Bytes()
}

func (s *Tutorials) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remove); err != nil {
		return err
	}
	if s.TutorialInfo, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type UpdateObject struct {
	GameObjectID  uint64
	LocationX     float32
	LocationY     float32
	LocationZ     float32
	Direction     float32
	Name          string
	TemplateID    uint64
	StartDragging int32
}

func (s *UpdateObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 38+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	binary.Write(b, binary.LittleEndian, s.LocationX)
	binary.Write(b, binary.LittleEndian, s.LocationY)
	binary.Write(b, binary.LittleEndian, s.LocationZ)
	binary.Write(b, binary.LittleEndian, s.Direction)
	writeString_5(b, s.Name)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	binary.Write(b, binary.LittleEndian, s.StartDragging)
	return b.Bytes()
}

func (s *UpdateObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Direction); err != nil {
		return err
	}
	if s.Name, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StartDragging); err != nil {
		return err
	}
	return nil
}

type UpdateQuantity struct {
	GlobalID uint64
	Quantity int32
}

func (s *UpdateQuantity) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Quantity)
	return b.Bytes()
}

func (s *UpdateQuantity) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type UpdateZoneCounter struct {
	ZoneCounter uint8
}

func (s *UpdateZoneCounter) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.ZoneCounter)
	return b.Bytes()
}

func (s *UpdateZoneCounter) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneCounter); err != nil {
		return err
	}
	return nil
}

type UpdateZoneTimer struct {
	TimerID       int32
	Title         string
	TimerUI       string
	CountdownTime float32
}

func (s *UpdateZoneTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.Title)+len(s.TimerUI)))
	binary.Write(b, binary.LittleEndian, s.TimerID)
	writeString_5(b, s.Title)
	writeString_5(b, s.TimerUI)
	binary.Write(b, binary.LittleEndian, s.CountdownTime)
	return b.Bytes()
}

func (s *UpdateZoneTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TimerID); err != nil {
		return err
	}
	if s.Title, err = readString_5(b); err != nil {
		return err
	}
	if s.TimerUI, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CountdownTime); err != nil {
		return err
	}
	return nil
}

type UseChatCode struct {
	ListOwnerGID uint64
	BuddyID      uint64
	Code         string
	Forwarded    uint8
}

func (s *UseChatCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.Code)))
	binary.Write(b, binary.LittleEndian, s.ListOwnerGID)
	binary.Write(b, binary.LittleEndian, s.BuddyID)
	writeString_5(b, s.Code)
	binary.Write(b, binary.LittleEndian, s.Forwarded)
	return b.Bytes()
}

func (s *UseChatCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BuddyID); err != nil {
		return err
	}
	if s.Code, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	return nil
}

type CSRViewAccount struct {
	AccountName   string
	AccountID     uint64
	CharacterID   uint64
	CanFilterChat uint8
	CanOpenChat   uint8
	CanUseCodes   uint8
}

func (s *CSRViewAccount) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21+len(s.AccountName)))
	writeString_5(b, s.AccountName)
	binary.Write(b, binary.LittleEndian, s.AccountID)
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.CanFilterChat)
	binary.Write(b, binary.LittleEndian, s.CanOpenChat)
	binary.Write(b, binary.LittleEndian, s.CanUseCodes)
	return b.Bytes()
}

func (s *CSRViewAccount) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.AccountName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AccountID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CanFilterChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CanOpenChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CanUseCodes); err != nil {
		return err
	}
	return nil
}

type WizBang struct {
	GameObjectID uint64
	WizBangID    uint32
}

func (s *WizBang) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	binary.Write(b, binary.LittleEndian, s.WizBangID)
	return b.Bytes()
}

func (s *WizBang) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WizBangID); err != nil {
		return err
	}
	return nil
}

type ZombiePlayer struct {
	GlobalID  uint64
	Remaining float32
}

func (s *ZombiePlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Remaining)
	return b.Bytes()
}

func (s *ZombiePlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Remaining); err != nil {
		return err
	}
	return nil
}

type ZONEEVENTTIMEREXPIRED struct {
	TimerName string
	EventName string
}

func (s *ZONEEVENTTIMEREXPIRED) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.TimerName)+len(s.EventName)))
	writeString_5(b, s.TimerName)
	writeString_5(b, s.EventName)
	return b.Bytes()
}

func (s *ZONEEVENTTIMEREXPIRED) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.TimerName, err = readString_5(b); err != nil {
		return err
	}
	if s.EventName, err = readString_5(b); err != nil {
		return err
	}
	return nil
}

type ZoneTransfer struct {
	ZoneName            string
	ZoneID              uint64
	Slot                int32
	DynamicZoneID       uint32
	DynamicServerProcID uint32
	ZoneCounter         uint8
	TransitionID        uint32
	SessionID           uint64
	SessionSlot         int32
}

func (s *ZoneTransfer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 39+len(s.ZoneName)))
	writeString_5(b, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.Slot)
	binary.Write(b, binary.LittleEndian, s.DynamicZoneID)
	binary.Write(b, binary.LittleEndian, s.DynamicServerProcID)
	binary.Write(b, binary.LittleEndian, s.ZoneCounter)
	binary.Write(b, binary.LittleEndian, s.TransitionID)
	binary.Write(b, binary.LittleEndian, s.SessionID)
	binary.Write(b, binary.LittleEndian, s.SessionSlot)
	return b.Bytes()
}

func (s *ZoneTransfer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Slot); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicServerProcID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneCounter); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransitionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SessionSlot); err != nil {
		return err
	}
	return nil
}

type ZoneTransferAck struct {
}

func (s *ZoneTransferAck) Marshal() []byte {
	return []byte{}
}

func (s *ZoneTransferAck) Unmarshal(data []byte) error {
	return nil
}

type ZoneTransferNack struct {
}

func (s *ZoneTransferNack) Marshal() []byte {
	return []byte{}
}

func (s *ZoneTransferNack) Unmarshal(data []byte) error {
	return nil
}

type ZoneTransferRequest struct {
	ZoneName string
	SendAck  uint8
}

func (s *ZoneTransferRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.ZoneName)))
	writeString_5(b, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.SendAck)
	return b.Bytes()
}

func (s *ZoneTransferRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.ZoneName, err = readString_5(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SendAck); err != nil {
		return err
	}
	return nil
}

func writeString_5(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_5(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
