// Code generated by w101-client-go. DO NOT EDIT.
package soblocks

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/codegen"
	"github.com/cedws/w101-client-go/proto"
)

type service interface {
	SoblocksAdvanceOff(SoblocksAdvanceOff)
	SoblocksAdvanceOn(SoblocksAdvanceOn)
	SoblocksAttack(SoblocksAttack)
	SoblocksCountdown(SoblocksCountdown)
	SoblocksEndGame(SoblocksEndGame)
	SoblocksFreezeBlocks(SoblocksFreezeBlocks)
	SoblocksInfo(SoblocksInfo)
	SoblocksLevelUp(SoblocksLevelUp)
	SoblocksLoss(SoblocksLoss)
	SoblocksPause(SoblocksPause)
	SoblocksPauseOff(SoblocksPauseOff)
	SoblocksPauseOn(SoblocksPauseOn)
	SoblocksReady(SoblocksReady)
	SoblocksRequestRow(SoblocksRequestRow)
	SoblocksResetGame(SoblocksResetGame)
	SoblocksRockDrop(SoblocksRockDrop)
	SoblocksRowInfo(SoblocksRowInfo)
	SoblocksSelectGame(SoblocksSelectGame)
	SoblocksSendRow(SoblocksSendRow)
	SoblocksSetLevel(SoblocksSetLevel)
	SoblocksStartSwap(SoblocksStartSwap)
	SoblocksTimedDrop(SoblocksTimedDrop)
	SoblocksWin(SoblocksWin)
}

func (Service) SoblocksAdvanceOff(SoblocksAdvanceOff)     {}
func (Service) SoblocksAdvanceOn(SoblocksAdvanceOn)       {}
func (Service) SoblocksAttack(SoblocksAttack)             {}
func (Service) SoblocksCountdown(SoblocksCountdown)       {}
func (Service) SoblocksEndGame(SoblocksEndGame)           {}
func (Service) SoblocksFreezeBlocks(SoblocksFreezeBlocks) {}
func (Service) SoblocksInfo(SoblocksInfo)                 {}
func (Service) SoblocksLevelUp(SoblocksLevelUp)           {}
func (Service) SoblocksLoss(SoblocksLoss)                 {}
func (Service) SoblocksPause(SoblocksPause)               {}
func (Service) SoblocksPauseOff(SoblocksPauseOff)         {}
func (Service) SoblocksPauseOn(SoblocksPauseOn)           {}
func (Service) SoblocksReady(SoblocksReady)               {}
func (Service) SoblocksRequestRow(SoblocksRequestRow)     {}
func (Service) SoblocksResetGame(SoblocksResetGame)       {}
func (Service) SoblocksRockDrop(SoblocksRockDrop)         {}
func (Service) SoblocksRowInfo(SoblocksRowInfo)           {}
func (Service) SoblocksSelectGame(SoblocksSelectGame)     {}
func (Service) SoblocksSendRow(SoblocksSendRow)           {}
func (Service) SoblocksSetLevel(SoblocksSetLevel)         {}
func (Service) SoblocksStartSwap(SoblocksStartSwap)       {}
func (Service) SoblocksTimedDrop(SoblocksTimedDrop)       {}
func (Service) SoblocksWin(SoblocksWin)                   {}

func RegisterService(r *proto.MessageRouter, s service) {
	proto.RegisterMessageHandler(r, 25, 1, s.SoblocksAdvanceOff)
	proto.RegisterMessageHandler(r, 25, 2, s.SoblocksAdvanceOn)
	proto.RegisterMessageHandler(r, 25, 3, s.SoblocksAttack)
	proto.RegisterMessageHandler(r, 25, 4, s.SoblocksCountdown)
	proto.RegisterMessageHandler(r, 25, 5, s.SoblocksEndGame)
	proto.RegisterMessageHandler(r, 25, 6, s.SoblocksFreezeBlocks)
	proto.RegisterMessageHandler(r, 25, 7, s.SoblocksInfo)
	proto.RegisterMessageHandler(r, 25, 8, s.SoblocksLevelUp)
	proto.RegisterMessageHandler(r, 25, 9, s.SoblocksLoss)
	proto.RegisterMessageHandler(r, 25, 10, s.SoblocksPause)
	proto.RegisterMessageHandler(r, 25, 11, s.SoblocksPauseOff)
	proto.RegisterMessageHandler(r, 25, 12, s.SoblocksPauseOn)
	proto.RegisterMessageHandler(r, 25, 13, s.SoblocksReady)
	proto.RegisterMessageHandler(r, 25, 14, s.SoblocksRequestRow)
	proto.RegisterMessageHandler(r, 25, 15, s.SoblocksResetGame)
	proto.RegisterMessageHandler(r, 25, 16, s.SoblocksRockDrop)
	proto.RegisterMessageHandler(r, 25, 17, s.SoblocksRowInfo)
	proto.RegisterMessageHandler(r, 25, 18, s.SoblocksSelectGame)
	proto.RegisterMessageHandler(r, 25, 19, s.SoblocksSendRow)
	proto.RegisterMessageHandler(r, 25, 20, s.SoblocksSetLevel)
	proto.RegisterMessageHandler(r, 25, 21, s.SoblocksStartSwap)
	proto.RegisterMessageHandler(r, 25, 22, s.SoblocksTimedDrop)
	proto.RegisterMessageHandler(r, 25, 23, s.SoblocksWin)
}

func NewClient(c *proto.Client) Client {
	return Client{c}
}

func (c Client) SoblocksAdvanceOff(m *SoblocksAdvanceOff) error {
	return c.c.WriteMessage(25, 1, m)
}

func (c Client) SoblocksAdvanceOn(m *SoblocksAdvanceOn) error {
	return c.c.WriteMessage(25, 2, m)
}

func (c Client) SoblocksAttack(m *SoblocksAttack) error {
	return c.c.WriteMessage(25, 3, m)
}

func (c Client) SoblocksCountdown(m *SoblocksCountdown) error {
	return c.c.WriteMessage(25, 4, m)
}

func (c Client) SoblocksEndGame(m *SoblocksEndGame) error {
	return c.c.WriteMessage(25, 5, m)
}

func (c Client) SoblocksFreezeBlocks(m *SoblocksFreezeBlocks) error {
	return c.c.WriteMessage(25, 6, m)
}

func (c Client) SoblocksInfo(m *SoblocksInfo) error {
	return c.c.WriteMessage(25, 7, m)
}

func (c Client) SoblocksLevelUp(m *SoblocksLevelUp) error {
	return c.c.WriteMessage(25, 8, m)
}

func (c Client) SoblocksLoss(m *SoblocksLoss) error {
	return c.c.WriteMessage(25, 9, m)
}

func (c Client) SoblocksPause(m *SoblocksPause) error {
	return c.c.WriteMessage(25, 10, m)
}

func (c Client) SoblocksPauseOff(m *SoblocksPauseOff) error {
	return c.c.WriteMessage(25, 11, m)
}

func (c Client) SoblocksPauseOn(m *SoblocksPauseOn) error {
	return c.c.WriteMessage(25, 12, m)
}

func (c Client) SoblocksReady(m *SoblocksReady) error {
	return c.c.WriteMessage(25, 13, m)
}

func (c Client) SoblocksRequestRow(m *SoblocksRequestRow) error {
	return c.c.WriteMessage(25, 14, m)
}

func (c Client) SoblocksResetGame(m *SoblocksResetGame) error {
	return c.c.WriteMessage(25, 15, m)
}

func (c Client) SoblocksRockDrop(m *SoblocksRockDrop) error {
	return c.c.WriteMessage(25, 16, m)
}

func (c Client) SoblocksRowInfo(m *SoblocksRowInfo) error {
	return c.c.WriteMessage(25, 17, m)
}

func (c Client) SoblocksSelectGame(m *SoblocksSelectGame) error {
	return c.c.WriteMessage(25, 18, m)
}

func (c Client) SoblocksSendRow(m *SoblocksSendRow) error {
	return c.c.WriteMessage(25, 19, m)
}

func (c Client) SoblocksSetLevel(m *SoblocksSetLevel) error {
	return c.c.WriteMessage(25, 20, m)
}

func (c Client) SoblocksStartSwap(m *SoblocksStartSwap) error {
	return c.c.WriteMessage(25, 21, m)
}

func (c Client) SoblocksTimedDrop(m *SoblocksTimedDrop) error {
	return c.c.WriteMessage(25, 22, m)
}

func (c Client) SoblocksWin(m *SoblocksWin) error {
	return c.c.WriteMessage(25, 23, m)
}

type Service struct {
	service
}

type Client struct {
	c *proto.Client
}
type SoblocksAdvanceOff struct {
}

func (s *SoblocksAdvanceOff) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksAdvanceOff) Unmarshal(data []byte) error {
	return nil
}

type SoblocksAdvanceOn struct {
}

func (s *SoblocksAdvanceOn) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksAdvanceOn) Unmarshal(data []byte) error {
	return nil
}

type SoblocksAttack struct {
	Index1 int32
	Index2 int32
	Index3 int32
	Index4 int32
	Index5 int32
	Index6 int32
	Index7 int32
}

func (s *SoblocksAttack) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	return b.Bytes()
}

func (s *SoblocksAttack) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Index1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index3); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index4); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index5); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index6); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index7); err != nil {
		return err
	}
	return nil
}

type SoblocksCountdown struct {
	Number int32
}

func (s *SoblocksCountdown) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *SoblocksCountdown) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Number); err != nil {
		return err
	}
	return nil
}

type SoblocksEndGame struct {
	Score int32
}

func (s *SoblocksEndGame) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *SoblocksEndGame) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Score); err != nil {
		return err
	}
	return nil
}

type SoblocksFreezeBlocks struct {
	Amount int32
}

func (s *SoblocksFreezeBlocks) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *SoblocksFreezeBlocks) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Amount); err != nil {
		return err
	}
	return nil
}

type SoblocksInfo struct {
	Name string
}

func (s *SoblocksInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Name)))
	binary.Write(b, binary.LittleEndian, s.Name)
	return b.Bytes()
}

func (s *SoblocksInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Name, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SoblocksLevelUp struct {
}

func (s *SoblocksLevelUp) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksLevelUp) Unmarshal(data []byte) error {
	return nil
}

type SoblocksLoss struct {
}

func (s *SoblocksLoss) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksLoss) Unmarshal(data []byte) error {
	return nil
}

type SoblocksPause struct {
}

func (s *SoblocksPause) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksPause) Unmarshal(data []byte) error {
	return nil
}

type SoblocksPauseOff struct {
}

func (s *SoblocksPauseOff) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksPauseOff) Unmarshal(data []byte) error {
	return nil
}

type SoblocksPauseOn struct {
}

func (s *SoblocksPauseOn) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksPauseOn) Unmarshal(data []byte) error {
	return nil
}

type SoblocksReady struct {
}

func (s *SoblocksReady) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksReady) Unmarshal(data []byte) error {
	return nil
}

type SoblocksRequestRow struct {
}

func (s *SoblocksRequestRow) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksRequestRow) Unmarshal(data []byte) error {
	return nil
}

type SoblocksResetGame struct {
}

func (s *SoblocksResetGame) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksResetGame) Unmarshal(data []byte) error {
	return nil
}

type SoblocksRockDrop struct {
}

func (s *SoblocksRockDrop) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksRockDrop) Unmarshal(data []byte) error {
	return nil
}

type SoblocksRowInfo struct {
	Index1 int32
	Index2 int32
	Index3 int32
	Index4 int32
	Index5 int32
	Index6 int32
	Index7 int32
}

func (s *SoblocksRowInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	return b.Bytes()
}

func (s *SoblocksRowInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Index1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index3); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index4); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index5); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index6); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index7); err != nil {
		return err
	}
	return nil
}

type SoblocksSelectGame struct {
	GameType int32
}

func (s *SoblocksSelectGame) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *SoblocksSelectGame) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameType); err != nil {
		return err
	}
	return nil
}

type SoblocksSendRow struct {
	Index1 int32
	Index2 int32
	Index3 int32
	Index4 int32
	Index5 int32
	Index6 int32
	Index7 int32
}

func (s *SoblocksSendRow) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	return b.Bytes()
}

func (s *SoblocksSendRow) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Index1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index3); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index4); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index5); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index6); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index7); err != nil {
		return err
	}
	return nil
}

type SoblocksSetLevel struct {
	Speed       int32
	SpeedUp     int32
	FallSpeed   int32
	RemoveSpeed int32
	Bonus       int32
	ComboTime   int32
	MultiTime   int32
}

func (s *SoblocksSetLevel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	return b.Bytes()
}

func (s *SoblocksSetLevel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Speed); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpeedUp); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FallSpeed); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RemoveSpeed); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Bonus); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ComboTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MultiTime); err != nil {
		return err
	}
	return nil
}

type SoblocksStartSwap struct {
}

func (s *SoblocksStartSwap) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksStartSwap) Unmarshal(data []byte) error {
	return nil
}

type SoblocksTimedDrop struct {
	Index1 int32
	Index2 int32
	Index3 int32
	Index4 int32
	Index5 int32
	Index6 int32
	Index7 int32
}

func (s *SoblocksTimedDrop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	return b.Bytes()
}

func (s *SoblocksTimedDrop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Index1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index3); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index4); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index5); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index6); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Index7); err != nil {
		return err
	}
	return nil
}

type SoblocksWin struct {
}

func (s *SoblocksWin) Marshal() []byte {
	return []byte{}
}

func (s *SoblocksWin) Unmarshal(data []byte) error {
	return nil
}
