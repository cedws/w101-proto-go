// Code generated by w101-client-go. DO NOT EDIT.
package cantrips

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type cantripsService interface {
	BeneficialLuckUpdate(BeneficialLuckUpdate)
	CancelInvisibility(CancelInvisibility)
	CantripAffectedPlayer(CantripAffectedPlayer)
	CantripEndLoop(CantripEndLoop)
	CantripLevelUp(CantripLevelUp)
	CantripNoAggro(CantripNoAggro)
	CantripsSigilSpell(CantripsSigilSpell)
	CantripsResponse(CantripsResponse)
	CantripsResponseError(CantripsResponseError)
	CantripsSpellCast(CantripsSpellCast)
	CantripTutorialEffect(CantripTutorialEffect)
	CastEffect(CastEffect)
	CastRitual(CastRitual)
	ControlVisibility(ControlVisibility)
	EnterBeneficialObject(EnterBeneficialObject)
	ExitBeneficialObject(ExitBeneficialObject)
	UpdateCantripXP(UpdateCantripXP)
	UpdateRitualObject(UpdateRitualObject)
}

type CantripsService struct {
	cantripsService
}

type CantripsClient struct {
	c *proto.Client
}

func (l *CantripsService) BeneficialLuckUpdate(_ BeneficialLuckUpdate)   {}
func (l *CantripsService) CancelInvisibility(_ CancelInvisibility)       {}
func (l *CantripsService) CantripAffectedPlayer(_ CantripAffectedPlayer) {}
func (l *CantripsService) CantripEndLoop(_ CantripEndLoop)               {}
func (l *CantripsService) CantripLevelUp(_ CantripLevelUp)               {}
func (l *CantripsService) CantripNoAggro(_ CantripNoAggro)               {}
func (l *CantripsService) CantripsSigilSpell(_ CantripsSigilSpell)       {}
func (l *CantripsService) CantripsResponse(_ CantripsResponse)           {}
func (l *CantripsService) CantripsResponseError(_ CantripsResponseError) {}
func (l *CantripsService) CantripsSpellCast(_ CantripsSpellCast)         {}
func (l *CantripsService) CantripTutorialEffect(_ CantripTutorialEffect) {}
func (l *CantripsService) CastEffect(_ CastEffect)                       {}
func (l *CantripsService) CastRitual(_ CastRitual)                       {}
func (l *CantripsService) ControlVisibility(_ ControlVisibility)         {}
func (l *CantripsService) EnterBeneficialObject(_ EnterBeneficialObject) {}
func (l *CantripsService) ExitBeneficialObject(_ ExitBeneficialObject)   {}
func (l *CantripsService) UpdateCantripXP(_ UpdateCantripXP)             {}
func (l *CantripsService) UpdateRitualObject(_ UpdateRitualObject)       {}

func RegisterCantripsService(r *proto.MessageRouter, s cantripsService) {
	proto.RegisterMessageHandler(r, 57, 1, s.BeneficialLuckUpdate)
	proto.RegisterMessageHandler(r, 57, 2, s.CancelInvisibility)
	proto.RegisterMessageHandler(r, 57, 3, s.CantripAffectedPlayer)
	proto.RegisterMessageHandler(r, 57, 4, s.CantripEndLoop)
	proto.RegisterMessageHandler(r, 57, 5, s.CantripLevelUp)
	proto.RegisterMessageHandler(r, 57, 6, s.CantripNoAggro)
	proto.RegisterMessageHandler(r, 57, 7, s.CantripsSigilSpell)
	proto.RegisterMessageHandler(r, 57, 8, s.CantripsResponse)
	proto.RegisterMessageHandler(r, 57, 9, s.CantripsResponseError)
	proto.RegisterMessageHandler(r, 57, 10, s.CantripsSpellCast)
	proto.RegisterMessageHandler(r, 57, 11, s.CantripTutorialEffect)
	proto.RegisterMessageHandler(r, 57, 12, s.CastEffect)
	proto.RegisterMessageHandler(r, 57, 13, s.CastRitual)
	proto.RegisterMessageHandler(r, 57, 14, s.ControlVisibility)
	proto.RegisterMessageHandler(r, 57, 15, s.EnterBeneficialObject)
	proto.RegisterMessageHandler(r, 57, 16, s.ExitBeneficialObject)
	proto.RegisterMessageHandler(r, 57, 17, s.UpdateCantripXP)
	proto.RegisterMessageHandler(r, 57, 18, s.UpdateRitualObject)
}

func NewCantripsClient(c *proto.Client) CantripsClient {
	return CantripsClient{c}
}

func (c CantripsClient) BeneficialLuckUpdate(m *BeneficialLuckUpdate) error {
	return c.c.WriteMessage(57, 1, m)
}

func (c CantripsClient) CancelInvisibility(m *CancelInvisibility) error {
	return c.c.WriteMessage(57, 2, m)
}

func (c CantripsClient) CantripAffectedPlayer(m *CantripAffectedPlayer) error {
	return c.c.WriteMessage(57, 3, m)
}

func (c CantripsClient) CantripEndLoop(m *CantripEndLoop) error {
	return c.c.WriteMessage(57, 4, m)
}

func (c CantripsClient) CantripLevelUp(m *CantripLevelUp) error {
	return c.c.WriteMessage(57, 5, m)
}

func (c CantripsClient) CantripNoAggro(m *CantripNoAggro) error {
	return c.c.WriteMessage(57, 6, m)
}

func (c CantripsClient) CantripsSigilSpell(m *CantripsSigilSpell) error {
	return c.c.WriteMessage(57, 7, m)
}

func (c CantripsClient) CantripsResponse(m *CantripsResponse) error {
	return c.c.WriteMessage(57, 8, m)
}

func (c CantripsClient) CantripsResponseError(m *CantripsResponseError) error {
	return c.c.WriteMessage(57, 9, m)
}

func (c CantripsClient) CantripsSpellCast(m *CantripsSpellCast) error {
	return c.c.WriteMessage(57, 10, m)
}

func (c CantripsClient) CantripTutorialEffect(m *CantripTutorialEffect) error {
	return c.c.WriteMessage(57, 11, m)
}

func (c CantripsClient) CastEffect(m *CastEffect) error {
	return c.c.WriteMessage(57, 12, m)
}

func (c CantripsClient) CastRitual(m *CastRitual) error {
	return c.c.WriteMessage(57, 13, m)
}

func (c CantripsClient) ControlVisibility(m *ControlVisibility) error {
	return c.c.WriteMessage(57, 14, m)
}

func (c CantripsClient) EnterBeneficialObject(m *EnterBeneficialObject) error {
	return c.c.WriteMessage(57, 15, m)
}

func (c CantripsClient) ExitBeneficialObject(m *ExitBeneficialObject) error {
	return c.c.WriteMessage(57, 16, m)
}

func (c CantripsClient) UpdateCantripXP(m *UpdateCantripXP) error {
	return c.c.WriteMessage(57, 17, m)
}

func (c CantripsClient) UpdateRitualObject(m *UpdateRitualObject) error {
	return c.c.WriteMessage(57, 18, m)
}

type BeneficialLuckUpdate struct {
	GlobalID   uint64
	LuckOffset float32
}

func (s *BeneficialLuckUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.LuckOffset)
	return b.Bytes()
}

func (s *BeneficialLuckUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LuckOffset); err != nil {
		return err
	}
	return nil
}

type CancelInvisibility struct {
	GlobalID uint64
}

func (s *CancelInvisibility) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *CancelInvisibility) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type CantripAffectedPlayer struct {
	GameObjectID uint64
}

func (s *CantripAffectedPlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	return b.Bytes()
}

func (s *CantripAffectedPlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	return nil
}

type CantripEndLoop struct {
	GameObjectID uint64
}

func (s *CantripEndLoop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	return b.Bytes()
}

func (s *CantripEndLoop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	return nil
}

type CantripLevelUp struct {
	GlobalID uint64
	NewLevel int32
}

func (s *CantripLevelUp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.NewLevel)
	return b.Bytes()
}

func (s *CantripLevelUp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewLevel); err != nil {
		return err
	}
	return nil
}

type CantripNoAggro struct {
	GlobalID uint64
}

func (s *CantripNoAggro) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *CantripNoAggro) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type CantripsSigilSpell struct {
	CasterGID       uint64
	TargetObjectID  uint64
	TargetX         float32
	TargetY         float32
	TargetZ         float32
	SpellTemplateID uint32
}

func (s *CantripsSigilSpell) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 32))
	binary.Write(b, binary.LittleEndian, s.CasterGID)
	binary.Write(b, binary.LittleEndian, s.TargetObjectID)
	binary.Write(b, binary.LittleEndian, s.TargetX)
	binary.Write(b, binary.LittleEndian, s.TargetY)
	binary.Write(b, binary.LittleEndian, s.TargetZ)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	return b.Bytes()
}

func (s *CantripsSigilSpell) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CasterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	return nil
}

type CantripsResponse struct {
	EnergyUsed      uint32
	CooldownSeconds uint32
	OutOfEnergy     uint8
}

func (s *CantripsResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.EnergyUsed)
	binary.Write(b, binary.LittleEndian, s.CooldownSeconds)
	binary.Write(b, binary.LittleEndian, s.OutOfEnergy)
	return b.Bytes()
}

func (s *CantripsResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.EnergyUsed); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CooldownSeconds); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OutOfEnergy); err != nil {
		return err
	}
	return nil
}

type CantripsResponseError struct {
	ProblemType uint32
}

func (s *CantripsResponseError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.ProblemType)
	return b.Bytes()
}

func (s *CantripsResponseError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ProblemType); err != nil {
		return err
	}
	return nil
}

type CantripsSpellCast struct {
	SpellTemplateID uint32
	IsTreasureCard  uint8
}

func (s *CantripsSpellCast) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.IsTreasureCard)
	return b.Bytes()
}

func (s *CantripsSpellCast) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsTreasureCard); err != nil {
		return err
	}
	return nil
}

type CantripTutorialEffect struct {
	GlobalID uint64
}

func (s *CantripTutorialEffect) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *CantripTutorialEffect) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type CastEffect struct {
	GameObjectID    uint64
	SpellTemplateID int32
	AnimationKFM    string
	AnimationName   string
}

func (s *CastEffect) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.AnimationKFM)+len(s.AnimationName)))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	writeString_57(b, s.AnimationKFM)
	writeString_57(b, s.AnimationName)
	return b.Bytes()
}

func (s *CastEffect) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if s.AnimationKFM, err = readString_57(b); err != nil {
		return err
	}
	if s.AnimationName, err = readString_57(b); err != nil {
		return err
	}
	return nil
}

type CastRitual struct {
	CasterGID       uint64
	SpellTemplateID int32
	TargetObjectID  uint64
	TargetX         float32
	TargetY         float32
	TargetZ         float32
	SchoolID        uint32
	Phase           uint8
}

func (s *CastRitual) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 37))
	binary.Write(b, binary.LittleEndian, s.CasterGID)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.TargetObjectID)
	binary.Write(b, binary.LittleEndian, s.TargetX)
	binary.Write(b, binary.LittleEndian, s.TargetY)
	binary.Write(b, binary.LittleEndian, s.TargetZ)
	binary.Write(b, binary.LittleEndian, s.SchoolID)
	binary.Write(b, binary.LittleEndian, s.Phase)
	return b.Bytes()
}

func (s *CastRitual) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CasterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SchoolID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Phase); err != nil {
		return err
	}
	return nil
}

type ControlVisibility struct {
	GlobalID  uint64
	IsVisible uint8
}

func (s *ControlVisibility) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.IsVisible)
	return b.Bytes()
}

func (s *ControlVisibility) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsVisible); err != nil {
		return err
	}
	return nil
}

type EnterBeneficialObject struct {
	GlobalID    uint64
	BenefitType uint32
}

func (s *EnterBeneficialObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.BenefitType)
	return b.Bytes()
}

func (s *EnterBeneficialObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BenefitType); err != nil {
		return err
	}
	return nil
}

type ExitBeneficialObject struct {
	GlobalID    uint64
	BenefitType uint32
}

func (s *ExitBeneficialObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.BenefitType)
	return b.Bytes()
}

func (s *ExitBeneficialObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BenefitType); err != nil {
		return err
	}
	return nil
}

type UpdateCantripXP struct {
	GlobalID uint64
	XP       int32
	Level    int32
}

func (s *UpdateCantripXP) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.XP)
	binary.Write(b, binary.LittleEndian, s.Level)
	return b.Bytes()
}

func (s *UpdateCantripXP) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.XP); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Level); err != nil {
		return err
	}
	return nil
}

type UpdateRitualObject struct {
	CasterGID uint64
	ObjectGID uint64
	Uses      uint8
	Count     uint8
}

func (s *UpdateRitualObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18))
	binary.Write(b, binary.LittleEndian, s.CasterGID)
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.Uses)
	binary.Write(b, binary.LittleEndian, s.Count)
	return b.Bytes()
}

func (s *UpdateRitualObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CasterGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Uses); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	return nil
}

func writeString_57(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_57(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
