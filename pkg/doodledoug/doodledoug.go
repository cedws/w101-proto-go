// Code generated by w101-client-go. DO NOT EDIT.
package doodledoug

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type doodledougService interface {
	AllowLeavePvP(AllowLeavePvP)
	CombatActions(CombatActions)
	CombatAdd(CombatAdd)
	CombatAFK(CombatAFK)
	CombatCheat(CombatCheat)
	CombatDraw(CombatDraw)
	CombatFlee(CombatFlee)
	CombatHand(CombatHand)
	CombatHealth(CombatHealth)
	CombatLoaded(CombatLoaded)
	CombatMatchResult(CombatMatchResult)
	CombatMove(CombatMove)
	CombatMoveSelection(CombatMoveSelection)
	CombatPaused(CombatPaused)
	CombatPhase(CombatPhase)
	CombatPhaseForSpectators(CombatPhaseForSpectators)
	CombatPips(CombatPips)
	CombatRemove(CombatRemove)
	CombatRevealHanging(CombatRevealHanging)
	CombatStats(CombatStats)
	CombatUpFirst(CombatUpFirst)
	CombatVictory(CombatVictory)
	DISMISSSUMMON(DISMISSSUMMON)
	Duel(Duel)
	EndDuel(EndDuel)
	PetWillCast(PetWillCast)
	SetDuelTimer(SetDuelTimer)
	SetPlanningPhaseTimer(SetPlanningPhaseTimer)
	SetST(SetST)
	SetST2(SetST2)
	SetStatus(SetStatus)
	ShowCombatUI(ShowCombatUI)
	ShowPetCard(ShowPetCard)
	SIGILSPELL(SIGILSPELL)
	UpdateCombatParticipant(UpdateCombatParticipant)
	UpdateDuelTimer(UpdateDuelTimer)
}

type DoodledougService struct {
	doodledougService
}

type DoodledougClient struct {
	c *proto.Client
}

func (l *DoodledougService) AllowLeavePvP(_ AllowLeavePvP)                       {}
func (l *DoodledougService) CombatActions(_ CombatActions)                       {}
func (l *DoodledougService) CombatAdd(_ CombatAdd)                               {}
func (l *DoodledougService) CombatAFK(_ CombatAFK)                               {}
func (l *DoodledougService) CombatCheat(_ CombatCheat)                           {}
func (l *DoodledougService) CombatDraw(_ CombatDraw)                             {}
func (l *DoodledougService) CombatFlee(_ CombatFlee)                             {}
func (l *DoodledougService) CombatHand(_ CombatHand)                             {}
func (l *DoodledougService) CombatHealth(_ CombatHealth)                         {}
func (l *DoodledougService) CombatLoaded(_ CombatLoaded)                         {}
func (l *DoodledougService) CombatMatchResult(_ CombatMatchResult)               {}
func (l *DoodledougService) CombatMove(_ CombatMove)                             {}
func (l *DoodledougService) CombatMoveSelection(_ CombatMoveSelection)           {}
func (l *DoodledougService) CombatPaused(_ CombatPaused)                         {}
func (l *DoodledougService) CombatPhase(_ CombatPhase)                           {}
func (l *DoodledougService) CombatPhaseForSpectators(_ CombatPhaseForSpectators) {}
func (l *DoodledougService) CombatPips(_ CombatPips)                             {}
func (l *DoodledougService) CombatRemove(_ CombatRemove)                         {}
func (l *DoodledougService) CombatRevealHanging(_ CombatRevealHanging)           {}
func (l *DoodledougService) CombatStats(_ CombatStats)                           {}
func (l *DoodledougService) CombatUpFirst(_ CombatUpFirst)                       {}
func (l *DoodledougService) CombatVictory(_ CombatVictory)                       {}
func (l *DoodledougService) DISMISSSUMMON(_ DISMISSSUMMON)                       {}
func (l *DoodledougService) Duel(_ Duel)                                         {}
func (l *DoodledougService) EndDuel(_ EndDuel)                                   {}
func (l *DoodledougService) PetWillCast(_ PetWillCast)                           {}
func (l *DoodledougService) SetDuelTimer(_ SetDuelTimer)                         {}
func (l *DoodledougService) SetPlanningPhaseTimer(_ SetPlanningPhaseTimer)       {}
func (l *DoodledougService) SetST(_ SetST)                                       {}
func (l *DoodledougService) SetST2(_ SetST2)                                     {}
func (l *DoodledougService) SetStatus(_ SetStatus)                               {}
func (l *DoodledougService) ShowCombatUI(_ ShowCombatUI)                         {}
func (l *DoodledougService) ShowPetCard(_ ShowPetCard)                           {}
func (l *DoodledougService) SIGILSPELL(_ SIGILSPELL)                             {}
func (l *DoodledougService) UpdateCombatParticipant(_ UpdateCombatParticipant)   {}
func (l *DoodledougService) UpdateDuelTimer(_ UpdateDuelTimer)                   {}

func RegisterDoodledougService(r *proto.MessageRouter, s doodledougService) {
	proto.RegisterMessageHandler(r, 51, 1, s.AllowLeavePvP)
	proto.RegisterMessageHandler(r, 51, 2, s.CombatActions)
	proto.RegisterMessageHandler(r, 51, 3, s.CombatAdd)
	proto.RegisterMessageHandler(r, 51, 4, s.CombatAFK)
	proto.RegisterMessageHandler(r, 51, 5, s.CombatCheat)
	proto.RegisterMessageHandler(r, 51, 6, s.CombatDraw)
	proto.RegisterMessageHandler(r, 51, 7, s.CombatFlee)
	proto.RegisterMessageHandler(r, 51, 8, s.CombatHand)
	proto.RegisterMessageHandler(r, 51, 9, s.CombatHealth)
	proto.RegisterMessageHandler(r, 51, 10, s.CombatLoaded)
	proto.RegisterMessageHandler(r, 51, 11, s.CombatMatchResult)
	proto.RegisterMessageHandler(r, 51, 12, s.CombatMove)
	proto.RegisterMessageHandler(r, 51, 13, s.CombatMoveSelection)
	proto.RegisterMessageHandler(r, 51, 14, s.CombatPaused)
	proto.RegisterMessageHandler(r, 51, 15, s.CombatPhase)
	proto.RegisterMessageHandler(r, 51, 16, s.CombatPhaseForSpectators)
	proto.RegisterMessageHandler(r, 51, 17, s.CombatPips)
	proto.RegisterMessageHandler(r, 51, 18, s.CombatRemove)
	proto.RegisterMessageHandler(r, 51, 19, s.CombatRevealHanging)
	proto.RegisterMessageHandler(r, 51, 20, s.CombatStats)
	proto.RegisterMessageHandler(r, 51, 21, s.CombatUpFirst)
	proto.RegisterMessageHandler(r, 51, 22, s.CombatVictory)
	proto.RegisterMessageHandler(r, 51, 23, s.DISMISSSUMMON)
	proto.RegisterMessageHandler(r, 51, 24, s.Duel)
	proto.RegisterMessageHandler(r, 51, 25, s.EndDuel)
	proto.RegisterMessageHandler(r, 51, 26, s.PetWillCast)
	proto.RegisterMessageHandler(r, 51, 27, s.SetDuelTimer)
	proto.RegisterMessageHandler(r, 51, 28, s.SetPlanningPhaseTimer)
	proto.RegisterMessageHandler(r, 51, 29, s.SetST)
	proto.RegisterMessageHandler(r, 51, 30, s.SetST2)
	proto.RegisterMessageHandler(r, 51, 31, s.SetStatus)
	proto.RegisterMessageHandler(r, 51, 32, s.ShowCombatUI)
	proto.RegisterMessageHandler(r, 51, 33, s.ShowPetCard)
	proto.RegisterMessageHandler(r, 51, 34, s.SIGILSPELL)
	proto.RegisterMessageHandler(r, 51, 35, s.UpdateCombatParticipant)
	proto.RegisterMessageHandler(r, 51, 36, s.UpdateDuelTimer)
}

func NewDoodledougClient(c *proto.Client) DoodledougClient {
	return DoodledougClient{c}
}

func (c DoodledougClient) AllowLeavePvP(m *AllowLeavePvP) error {
	return c.c.WriteMessage(51, 1, m)
}

func (c DoodledougClient) CombatActions(m *CombatActions) error {
	return c.c.WriteMessage(51, 2, m)
}

func (c DoodledougClient) CombatAdd(m *CombatAdd) error {
	return c.c.WriteMessage(51, 3, m)
}

func (c DoodledougClient) CombatAFK(m *CombatAFK) error {
	return c.c.WriteMessage(51, 4, m)
}

func (c DoodledougClient) CombatCheat(m *CombatCheat) error {
	return c.c.WriteMessage(51, 5, m)
}

func (c DoodledougClient) CombatDraw(m *CombatDraw) error {
	return c.c.WriteMessage(51, 6, m)
}

func (c DoodledougClient) CombatFlee(m *CombatFlee) error {
	return c.c.WriteMessage(51, 7, m)
}

func (c DoodledougClient) CombatHand(m *CombatHand) error {
	return c.c.WriteMessage(51, 8, m)
}

func (c DoodledougClient) CombatHealth(m *CombatHealth) error {
	return c.c.WriteMessage(51, 9, m)
}

func (c DoodledougClient) CombatLoaded(m *CombatLoaded) error {
	return c.c.WriteMessage(51, 10, m)
}

func (c DoodledougClient) CombatMatchResult(m *CombatMatchResult) error {
	return c.c.WriteMessage(51, 11, m)
}

func (c DoodledougClient) CombatMove(m *CombatMove) error {
	return c.c.WriteMessage(51, 12, m)
}

func (c DoodledougClient) CombatMoveSelection(m *CombatMoveSelection) error {
	return c.c.WriteMessage(51, 13, m)
}

func (c DoodledougClient) CombatPaused(m *CombatPaused) error {
	return c.c.WriteMessage(51, 14, m)
}

func (c DoodledougClient) CombatPhase(m *CombatPhase) error {
	return c.c.WriteMessage(51, 15, m)
}

func (c DoodledougClient) CombatPhaseForSpectators(m *CombatPhaseForSpectators) error {
	return c.c.WriteMessage(51, 16, m)
}

func (c DoodledougClient) CombatPips(m *CombatPips) error {
	return c.c.WriteMessage(51, 17, m)
}

func (c DoodledougClient) CombatRemove(m *CombatRemove) error {
	return c.c.WriteMessage(51, 18, m)
}

func (c DoodledougClient) CombatRevealHanging(m *CombatRevealHanging) error {
	return c.c.WriteMessage(51, 19, m)
}

func (c DoodledougClient) CombatStats(m *CombatStats) error {
	return c.c.WriteMessage(51, 20, m)
}

func (c DoodledougClient) CombatUpFirst(m *CombatUpFirst) error {
	return c.c.WriteMessage(51, 21, m)
}

func (c DoodledougClient) CombatVictory(m *CombatVictory) error {
	return c.c.WriteMessage(51, 22, m)
}

func (c DoodledougClient) DISMISSSUMMON(m *DISMISSSUMMON) error {
	return c.c.WriteMessage(51, 23, m)
}

func (c DoodledougClient) Duel(m *Duel) error {
	return c.c.WriteMessage(51, 24, m)
}

func (c DoodledougClient) EndDuel(m *EndDuel) error {
	return c.c.WriteMessage(51, 25, m)
}

func (c DoodledougClient) PetWillCast(m *PetWillCast) error {
	return c.c.WriteMessage(51, 26, m)
}

func (c DoodledougClient) SetDuelTimer(m *SetDuelTimer) error {
	return c.c.WriteMessage(51, 27, m)
}

func (c DoodledougClient) SetPlanningPhaseTimer(m *SetPlanningPhaseTimer) error {
	return c.c.WriteMessage(51, 28, m)
}

func (c DoodledougClient) SetST(m *SetST) error {
	return c.c.WriteMessage(51, 29, m)
}

func (c DoodledougClient) SetST2(m *SetST2) error {
	return c.c.WriteMessage(51, 30, m)
}

func (c DoodledougClient) SetStatus(m *SetStatus) error {
	return c.c.WriteMessage(51, 31, m)
}

func (c DoodledougClient) ShowCombatUI(m *ShowCombatUI) error {
	return c.c.WriteMessage(51, 32, m)
}

func (c DoodledougClient) ShowPetCard(m *ShowPetCard) error {
	return c.c.WriteMessage(51, 33, m)
}

func (c DoodledougClient) SIGILSPELL(m *SIGILSPELL) error {
	return c.c.WriteMessage(51, 34, m)
}

func (c DoodledougClient) UpdateCombatParticipant(m *UpdateCombatParticipant) error {
	return c.c.WriteMessage(51, 35, m)
}

func (c DoodledougClient) UpdateDuelTimer(m *UpdateDuelTimer) error {
	return c.c.WriteMessage(51, 36, m)
}

type AllowLeavePvP struct {
}

func (s *AllowLeavePvP) Marshal() []byte {
	return []byte{}
}

func (s *AllowLeavePvP) Unmarshal(data []byte) error {
	return nil
}

type CombatActions struct {
	ActionData string
	DuelID     uint64
}

func (s *CombatActions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.ActionData)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	writeString_51(b, s.ActionData)
	return b.Bytes()
}

func (s *CombatActions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if s.ActionData, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type CombatAdd struct {
	ParticipantData string
	DuelID          uint64
}

func (s *CombatAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.ParticipantData)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	writeString_51(b, s.ParticipantData)
	return b.Bytes()
}

func (s *CombatAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if s.ParticipantData, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type CombatAFK struct {
	DuelID      uint64
	IsCombatAFK uint8
}

func (s *CombatAFK) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.IsCombatAFK)
	return b.Bytes()
}

func (s *CombatAFK) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsCombatAFK); err != nil {
		return err
	}
	return nil
}

type CombatCheat struct {
	CheatFlags    uint32
	MaycastChance float32
}

func (s *CombatCheat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.CheatFlags)
	binary.Write(b, binary.LittleEndian, s.MaycastChance)
	return b.Bytes()
}

func (s *CombatCheat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CheatFlags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaycastChance); err != nil {
		return err
	}
	return nil
}

type CombatDraw struct {
}

func (s *CombatDraw) Marshal() []byte {
	return []byte{}
}

func (s *CombatDraw) Unmarshal(data []byte) error {
	return nil
}

type CombatFlee struct {
	ParticipantID uint64
}

func (s *CombatFlee) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.ParticipantID)
	return b.Bytes()
}

func (s *CombatFlee) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ParticipantID); err != nil {
		return err
	}
	return nil
}

type CombatHand struct {
	HandData          string
	ParticipantID     uint64
	DeckCount         uint16
	TotalDeckCount    uint16
	TreasureCardCount uint16
}

func (s *CombatHand) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.HandData)))
	binary.Write(b, binary.LittleEndian, s.DeckCount)
	binary.Write(b, binary.LittleEndian, s.TotalDeckCount)
	binary.Write(b, binary.LittleEndian, s.TreasureCardCount)
	binary.Write(b, binary.LittleEndian, s.ParticipantID)
	writeString_51(b, s.HandData)
	return b.Bytes()
}

func (s *CombatHand) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DeckCount); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalDeckCount); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TreasureCardCount); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParticipantID); err != nil {
		return err
	}
	if s.HandData, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type CombatHealth struct {
	HealthData string
	DuelID     uint64
}

func (s *CombatHealth) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.HealthData)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	writeString_51(b, s.HealthData)
	return b.Bytes()
}

func (s *CombatHealth) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if s.HealthData, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type CombatLoaded struct {
	ParticipantList string
	DuelID          uint64
	RoundNum        int32
	FirstTeamToAct  int32
}

func (s *CombatLoaded) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.ParticipantList)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.RoundNum)
	binary.Write(b, binary.LittleEndian, s.FirstTeamToAct)
	writeString_51(b, s.ParticipantList)
	return b.Bytes()
}

func (s *CombatLoaded) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RoundNum); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FirstTeamToAct); err != nil {
		return err
	}
	if s.ParticipantList, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type CombatMatchResult struct {
	DuelID      uint64
	WinningTeam int32
}

func (s *CombatMatchResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.WinningTeam)
	return b.Bytes()
}

func (s *CombatMatchResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WinningTeam); err != nil {
		return err
	}
	return nil
}

type CombatMove struct {
	SpellTarget    uint32
	TimeLeft       int32
	MoveType       uint8
	SpellSelection uint8
}

func (s *CombatMove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10))
	binary.Write(b, binary.LittleEndian, s.MoveType)
	binary.Write(b, binary.LittleEndian, s.SpellSelection)
	binary.Write(b, binary.LittleEndian, s.SpellTarget)
	binary.Write(b, binary.LittleEndian, s.TimeLeft)
	return b.Bytes()
}

func (s *CombatMove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MoveType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellSelection); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTarget); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TimeLeft); err != nil {
		return err
	}
	return nil
}

type CombatMoveSelection struct {
	DuelID           uint64
	ParticipantID    uint64
	SpellID          int32
	SpellTargetIndex uint32
	EnchantmentID    int32
	MoveType         uint8
	IsItemCard       uint8
	IsTreasureCard   uint8
	IsBattleCard     uint8
}

func (s *CombatMoveSelection) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 32))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.ParticipantID)
	binary.Write(b, binary.LittleEndian, s.MoveType)
	binary.Write(b, binary.LittleEndian, s.SpellID)
	binary.Write(b, binary.LittleEndian, s.SpellTargetIndex)
	binary.Write(b, binary.LittleEndian, s.EnchantmentID)
	binary.Write(b, binary.LittleEndian, s.IsItemCard)
	binary.Write(b, binary.LittleEndian, s.IsTreasureCard)
	binary.Write(b, binary.LittleEndian, s.IsBattleCard)
	return b.Bytes()
}

func (s *CombatMoveSelection) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParticipantID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MoveType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTargetIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsItemCard); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsTreasureCard); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsBattleCard); err != nil {
		return err
	}
	return nil
}

type CombatPaused struct {
	Paused int8
}

func (s *CombatPaused) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Paused)
	return b.Bytes()
}

func (s *CombatPaused) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Paused); err != nil {
		return err
	}
	return nil
}

type CombatPhase struct {
	Data     string
	DuelID   uint64
	PlayerID uint64
	NewPhase uint8
}

func (s *CombatPhase) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.NewPhase)
	writeString_51(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.PlayerID)
	return b.Bytes()
}

func (s *CombatPhase) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewPhase); err != nil {
		return err
	}
	if s.Data, err = readString_51(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerID); err != nil {
		return err
	}
	return nil
}

type CombatPhaseForSpectators struct {
	ParticipantName6 string
	ParticipantName3 string
	ParticipantName2 string
	ParticipantName1 string
	ParticipantName7 string
	ParticipantName8 string
	ParticipantName5 string
	ParticipantName4 string
	DuelID           uint64
	Subcircles       uint32
	TeamName0        uint32
	TeamName1        uint32
	Time             uint8
	NewPhase         uint8
}

func (s *CombatPhaseForSpectators) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 38+len(s.ParticipantName1)+len(s.ParticipantName2)+len(s.ParticipantName3)+len(s.ParticipantName4)+len(s.ParticipantName5)+len(s.ParticipantName6)+len(s.ParticipantName7)+len(s.ParticipantName8)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.NewPhase)
	binary.Write(b, binary.LittleEndian, s.Time)
	writeString_51(b, s.ParticipantName1)
	writeString_51(b, s.ParticipantName2)
	writeString_51(b, s.ParticipantName3)
	writeString_51(b, s.ParticipantName4)
	writeString_51(b, s.ParticipantName5)
	writeString_51(b, s.ParticipantName6)
	writeString_51(b, s.ParticipantName7)
	writeString_51(b, s.ParticipantName8)
	binary.Write(b, binary.LittleEndian, s.Subcircles)
	binary.Write(b, binary.LittleEndian, s.TeamName0)
	binary.Write(b, binary.LittleEndian, s.TeamName1)
	return b.Bytes()
}

func (s *CombatPhaseForSpectators) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewPhase); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Time); err != nil {
		return err
	}
	if s.ParticipantName1, err = readString_51(b); err != nil {
		return err
	}
	if s.ParticipantName2, err = readString_51(b); err != nil {
		return err
	}
	if s.ParticipantName3, err = readString_51(b); err != nil {
		return err
	}
	if s.ParticipantName4, err = readString_51(b); err != nil {
		return err
	}
	if s.ParticipantName5, err = readString_51(b); err != nil {
		return err
	}
	if s.ParticipantName6, err = readString_51(b); err != nil {
		return err
	}
	if s.ParticipantName7, err = readString_51(b); err != nil {
		return err
	}
	if s.ParticipantName8, err = readString_51(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Subcircles); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TeamName0); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TeamName1); err != nil {
		return err
	}
	return nil
}

type CombatPips struct {
	PipData string
	DuelID  uint64
}

func (s *CombatPips) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.PipData)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	writeString_51(b, s.PipData)
	return b.Bytes()
}

func (s *CombatPips) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if s.PipData, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type CombatRemove struct {
	DuelID        uint64
	ParticipantID uint64
}

func (s *CombatRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.ParticipantID)
	return b.Bytes()
}

func (s *CombatRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ParticipantID); err != nil {
		return err
	}
	return nil
}

type CombatRevealHanging struct {
	ParticipantID   uint64
	CloakEffectType int32
	SpellTemplateID int32
	EffectType      int32
	EffectAmount    int32
	DamageType      int32
	ActNum          uint8
}

func (s *CombatRevealHanging) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 29))
	binary.Write(b, binary.LittleEndian, s.ParticipantID)
	binary.Write(b, binary.LittleEndian, s.CloakEffectType)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.EffectType)
	binary.Write(b, binary.LittleEndian, s.EffectAmount)
	binary.Write(b, binary.LittleEndian, s.DamageType)
	binary.Write(b, binary.LittleEndian, s.ActNum)
	return b.Bytes()
}

func (s *CombatRevealHanging) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ParticipantID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CloakEffectType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EffectType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EffectAmount); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DamageType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ActNum); err != nil {
		return err
	}
	return nil
}

type CombatStats struct {
	StatsData string
	DuelID    uint64
	PartID    uint64
}

func (s *CombatStats) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.StatsData)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.PartID)
	writeString_51(b, s.StatsData)
	return b.Bytes()
}

func (s *CombatStats) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartID); err != nil {
		return err
	}
	if s.StatsData, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type CombatUpFirst struct {
	DuelID         uint64
	PlayerID       uint64
	FirstTeamToAct int32
	RoundNum       uint16
	UpFirst        uint8
}

func (s *CombatUpFirst) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.UpFirst)
	binary.Write(b, binary.LittleEndian, s.RoundNum)
	binary.Write(b, binary.LittleEndian, s.PlayerID)
	binary.Write(b, binary.LittleEndian, s.FirstTeamToAct)
	return b.Bytes()
}

func (s *CombatUpFirst) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpFirst); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RoundNum); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FirstTeamToAct); err != nil {
		return err
	}
	return nil
}

type CombatVictory struct {
}

func (s *CombatVictory) Marshal() []byte {
	return []byte{}
}

func (s *CombatVictory) Unmarshal(data []byte) error {
	return nil
}

type DISMISSSUMMON struct {
	Subcircle uint32
}

func (s *DISMISSSUMMON) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.Subcircle)
	return b.Bytes()
}

func (s *DISMISSSUMMON) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Subcircle); err != nil {
		return err
	}
	return nil
}

type Duel struct {
	Data string
}

func (s *Duel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_51(b, s.Data)
	return b.Bytes()
}

func (s *Duel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type EndDuel struct {
	DuelID uint64
}

func (s *EndDuel) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	return b.Bytes()
}

func (s *EndDuel) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	return nil
}

type PetWillCast struct {
	PetCastingSpell string
	Target          int32
}

func (s *PetWillCast) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.PetCastingSpell)))
	writeString_51(b, s.PetCastingSpell)
	binary.Write(b, binary.LittleEndian, s.Target)
	return b.Bytes()
}

func (s *PetWillCast) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PetCastingSpell, err = readString_51(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Target); err != nil {
		return err
	}
	return nil
}

type SetDuelTimer struct {
	DuelID       uint64
	DurationTime uint32
	RedTime      uint32
	YellowTime   uint32
	MinTurnTime  uint32
}

func (s *SetDuelTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.DurationTime)
	binary.Write(b, binary.LittleEndian, s.RedTime)
	binary.Write(b, binary.LittleEndian, s.YellowTime)
	binary.Write(b, binary.LittleEndian, s.MinTurnTime)
	return b.Bytes()
}

func (s *SetDuelTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DurationTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RedTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.YellowTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MinTurnTime); err != nil {
		return err
	}
	return nil
}

type SetPlanningPhaseTimer struct {
	TimeData string
	DuelID   uint64
	Time     int32
}

func (s *SetPlanningPhaseTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.TimeData)))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.Time)
	writeString_51(b, s.TimeData)
	return b.Bytes()
}

func (s *SetPlanningPhaseTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Time); err != nil {
		return err
	}
	if s.TimeData, err = readString_51(b); err != nil {
		return err
	}
	return nil
}

type SetST struct {
	DuelID uint64
	Type   int32
	Arg1   float32
	Arg2   float32
	Arg3   float32
}

func (s *SetST) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.Type)
	binary.Write(b, binary.LittleEndian, s.Arg1)
	binary.Write(b, binary.LittleEndian, s.Arg2)
	binary.Write(b, binary.LittleEndian, s.Arg3)
	return b.Bytes()
}

func (s *SetST) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Arg1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Arg2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Arg3); err != nil {
		return err
	}
	return nil
}

type SetST2 struct {
	DuelID      uint64
	PlayerID    uint64
	SpellDamage int32
	StatDmg     float32
	StatRes     float32
	StatPierce  float32
}

func (s *SetST2) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 32))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.PlayerID)
	binary.Write(b, binary.LittleEndian, s.SpellDamage)
	binary.Write(b, binary.LittleEndian, s.StatDmg)
	binary.Write(b, binary.LittleEndian, s.StatRes)
	binary.Write(b, binary.LittleEndian, s.StatPierce)
	return b.Bytes()
}

func (s *SetST2) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellDamage); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StatDmg); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StatRes); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StatPierce); err != nil {
		return err
	}
	return nil
}

type SetStatus struct {
	DuelID uint64
	Player uint64
	Status uint8
}

func (s *SetStatus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.Player)
	binary.Write(b, binary.LittleEndian, s.Status)
	return b.Bytes()
}

func (s *SetStatus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Player); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type ShowCombatUI struct {
	DuelID            uint64
	AltTurn           int32
	AltTurnTeam       int32
	DynamicTurnFlags  uint32
	DynamicSubcircles uint32
}

func (s *ShowCombatUI) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.AltTurn)
	binary.Write(b, binary.LittleEndian, s.AltTurnTeam)
	binary.Write(b, binary.LittleEndian, s.DynamicTurnFlags)
	binary.Write(b, binary.LittleEndian, s.DynamicSubcircles)
	return b.Bytes()
}

func (s *ShowCombatUI) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AltTurn); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AltTurnTeam); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicTurnFlags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DynamicSubcircles); err != nil {
		return err
	}
	return nil
}

type ShowPetCard struct {
	PetData           string
	Cooldown          int32
	RequirementFailed int32
	MyTurn            uint8
}

func (s *ShowPetCard) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.PetData)))
	writeString_51(b, s.PetData)
	binary.Write(b, binary.LittleEndian, s.Cooldown)
	binary.Write(b, binary.LittleEndian, s.RequirementFailed)
	binary.Write(b, binary.LittleEndian, s.MyTurn)
	return b.Bytes()
}

func (s *ShowPetCard) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PetData, err = readString_51(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Cooldown); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RequirementFailed); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MyTurn); err != nil {
		return err
	}
	return nil
}

type SIGILSPELL struct {
	DuelID     uint64
	Subcircles uint32
	SpellID    int32
}

func (s *SIGILSPELL) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.Subcircles)
	binary.Write(b, binary.LittleEndian, s.SpellID)
	return b.Bytes()
}

func (s *SIGILSPELL) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Subcircles); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	return nil
}

type UpdateCombatParticipant struct {
	ObjectID         uint64
	HidePVPEnemyChat uint8
}

func (s *UpdateCombatParticipant) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.HidePVPEnemyChat)
	return b.Bytes()
}

func (s *UpdateCombatParticipant) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HidePVPEnemyChat); err != nil {
		return err
	}
	return nil
}

type UpdateDuelTimer struct {
	DuelID        uint64
	RemainingTime uint32
}

func (s *UpdateDuelTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.DuelID)
	binary.Write(b, binary.LittleEndian, s.RemainingTime)
	return b.Bytes()
}

func (s *UpdateDuelTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RemainingTime); err != nil {
		return err
	}
	return nil
}

func writeString_51(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_51(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
