// Code generated by w101-client-go. DO NOT EDIT.
package wizardhousing

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type wizardhousingService interface {
	AddFishToAquarium(AddFishToAquarium)
	AddInstanceFish(AddInstanceFish)
	AddToTreasureCardPoster(AddToTreasureCardPoster)
	AuditAtticResults(AuditAtticResults)
	BeginFishingCast(BeginFishingCast)
	BlockPetSpawn(BlockPetSpawn)
	BuyIslandSpaceConfirm(BuyIslandSpaceConfirm)
	CastleGamesRequest(CastleGamesRequest)
	CastleGamesRequestGameData(CastleGamesRequestGameData)
	CastleGamesTeleportRejected(CastleGamesTeleportRejected)
	CastleMagicCantrip(CastleMagicCantrip)
	CastleMagicChangeAction(CastleMagicChangeAction)
	CastleMagicClear(CastleMagicClear)
	CastleMagicCurrentState(CastleMagicCurrentState)
	CastleMagicOrb(CastleMagicOrb)
	CastleMagicRequestAllowMounts(CastleMagicRequestAllowMounts)
	CastleMagicRequestAllowPVP(CastleMagicRequestAllowPVP)
	CastleMagicRequestPlayerTeleport(CastleMagicRequestPlayerTeleport)
	CastleMagicRequestPVPState(CastleMagicRequestPVPState)
	CastleMagicRequestRandom(CastleMagicRequestRandom)
	CastleMagicRequestUse(CastleMagicRequestUse)
	CastleMagicTutorial(CastleMagicTutorial)
	CastleMagicUpdateState(CastleMagicUpdateState)
	CastleToursAdd(CastleToursAdd)
	CastleToursAddFavorite(CastleToursAddFavorite)
	CastleToursAddResult(CastleToursAddResult)
	CastleToursCSRResults(CastleToursCSRResults)
	CastleToursDeleteCharacter(CastleToursDeleteCharacter)
	CastleToursEnableRatingDisplay(CastleToursEnableRatingDisplay)
	CastleToursFavoriteInfo(CastleToursFavoriteInfo)
	CastleToursFavoriteInfo2(CastleToursFavoriteInfo2)
	CastleToursLeaderboardResponse(CastleToursLeaderboardResponse)
	CastleToursPlayerBanned(CastleToursPlayerBanned)
	CastleToursPostRateHouse(CastleToursPostRateHouse)
	CastleToursPreAdd(CastleToursPreAdd)
	CastleToursRatingDisplay(CastleToursRatingDisplay)
	CastleToursRemove(CastleToursRemove)
	CastleToursRemoveFavorite(CastleToursRemoveFavorite)
	CastleToursRemoveResult(CastleToursRemoveResult)
	CastleToursRequest(CastleToursRequest)
	CastleToursRequestFriends(CastleToursRequestFriends)
	CastleToursRequestLeaderboard(CastleToursRequestLeaderboard)
	CastleToursRequestMyCastleData(CastleToursRequestMyCastleData)
	CastleToursRequestMyCastles(CastleToursRequestMyCastles)
	CastleToursSendRating(CastleToursSendRating)
	CastleToursTeleportPlayer(CastleToursTeleportPlayer)
	CastleToursTeleportRejected(CastleToursTeleportRejected)
	CastleToursVisitCastle(CastleToursVisitCastle)
	CatchFish(CatchFish)
	CatchOfTheDayOpen(CatchOfTheDayOpen)
	CatchSuccess(CatchSuccess)
	ChangeBreadCrumbRequest(ChangeBreadCrumbRequest)
	CreateTestIsland(CreateTestIsland)
	DailyPvPOpen(DailyPvPOpen)
	DailyQuestCompleted(DailyQuestCompleted)
	DailyQuestCSRData(DailyQuestCSRData)
	DailyQuestExplore(DailyQuestExplore)
	DailyQuestOpen(DailyQuestOpen)
	DeleteEquippedHousingItem(DeleteEquippedHousingItem)
	DeleteFish(DeleteFish)
	DeleteFromAttic(DeleteFromAttic)
	DeleteMusicLoop(DeleteMusicLoop)
	DisplayCatchFish(DisplayCatchFish)
	DisplayCaughtFish(DisplayCaughtFish)
	DisposableDungeonNoOwner(DisposableDungeonNoOwner)
	DailyPvPUpdate(DailyPvPUpdate)
	DailyQuestUpdate(DailyQuestUpdate)
	EmptyLotCheck(EmptyLotCheck)
	EndFishingCast(EndFishingCast)
	EnterTournamentFish(EnterTournamentFish)
	EnterTournamentFishResult(EnterTournamentFishResult)
	EquipHouseMusic(EquipHouseMusic)
	EquipMannequinItem(EquipMannequinItem)
	FishEscaped(FishEscaped)
	FishingCSRResults(FishingCSRResults)
	FishingSpellCast(FishingSpellCast)
	FishTournamentLeaderBoardOpen(FishTournamentLeaderBoardOpen)
	FishTournamentLeaderBoardRequest(FishTournamentLeaderBoardRequest)
	FishTournamentOpen(FishTournamentOpen)
	GardeningCastSpell(GardeningCastSpell)
	GardeningCommand(GardeningCommand)
	GardeningCommandResponse(GardeningCommandResponse)
	GardeningCSRResults(GardeningCSRResults)
	GardeningHarvestPlant(GardeningHarvestPlant)
	GardeningHarvestPlantSecondSpring(GardeningHarvestPlantSecondSpring)
	GardeningSpellFizzle(GardeningSpellFizzle)
	GardeningSpellInspect(GardeningSpellInspect)
	GardenLevelUp(GardenLevelUp)
	HideHousingObject(HideHousingObject)
	HousingGameRequestPoweruplocations(HousingGameRequestPoweruplocations)
	HousingGameStatusUpdate(HousingGameStatusUpdate)
	HousingGameUsePowerup(HousingGameUsePowerup)
	HousingObjectNoPickup(HousingObjectNoPickup)
	HousingObjectProximity(HousingObjectProximity)
	HousingZonePlayer(HousingZonePlayer)
	HousingZonePlayerList(HousingZonePlayerList)
	InteractiveMusicError(InteractiveMusicError)
	InteractiveMusicInUse(InteractiveMusicInUse)
	InteractiveMusicInUse2(InteractiveMusicInUse2)
	IslandSpaceBuyRequest(IslandSpaceBuyRequest)
	IslandSpaceShopOpen(IslandSpaceShopOpen)
	MissFish(MissFish)
	MonsterMagicAddMonster(MonsterMagicAddMonster)
	MonsterMagicEraseMonster(MonsterMagicEraseMonster)
	MoveFromAttic(MoveFromAttic)
	MoveGearFromGearVault(MoveGearFromGearVault)
	MoveGearToGearVault(MoveGearToGearVault)
	MoveJewelFromJewelVault(MoveJewelFromJewelVault)
	MoveJewelToJewelVault(MoveJewelToJewelVault)
	MoveSeedFromGardeningShed(MoveSeedFromGardeningShed)
	MoveSeedToGardeningShed(MoveSeedToGardeningShed)
	MoveTCFromTCVault(MoveTCFromTCVault)
	MoveTCToTCVault(MoveTCToTCVault)
	MoveToAttic(MoveToAttic)
	NoFishSpace(NoFishSpace)
	PatchAddAttic(PatchAddAttic)
	PatchAddHousingObject(PatchAddHousingObject)
	PatchAquarium(PatchAquarium)
	PatchCastleMagic(PatchCastleMagic)
	PatchDeleteAttic(PatchDeleteAttic)
	PatchDeleteHousingObject(PatchDeleteHousingObject)
	PatchEquipHousingObject(PatchEquipHousingObject)
	PatchGardening(PatchGardening)
	PatchHouse(PatchHouse)
	PatchHousingBreadCrumb(PatchHousingBreadCrumb)
	PatchHousingGardeningShed(PatchHousingGardeningShed)
	PatchHousingGearVault(PatchHousingGearVault)
	PatchHousingJewelVault(PatchHousingJewelVault)
	PatchHousingMusicObject(PatchHousingMusicObject)
	PatchHousingSignObject(PatchHousingSignObject)
	PatchHousingTeleporterObject(PatchHousingTeleporterObject)
	PatchHousingTrain(PatchHousingTrain)
	PatchMonsterArena(PatchMonsterArena)
	PatchMusicLoop(PatchMusicLoop)
	PatchRemoveTextureRemap(PatchRemoveTextureRemap)
	PatchTextureRemap(PatchTextureRemap)
	PatchTintHousingObject(PatchTintHousingObject)
	PatchTreasureCardPoster(PatchTreasureCardPoster)
	PatchTreasureCardVault(PatchTreasureCardVault)
	PatchUpdateHousingObject(PatchUpdateHousingObject)
	PatchExtendedTile(PatchExtendedTile)
	PetTomeScanAttic(PetTomeScanAttic)
	PickUpAll(PickUpAll)
	PickUpHousingTexture(PickUpHousingTexture)
	PlaceHousingFish(PlaceHousingFish)
	PlaceHousingObject(PlaceHousingObject)
	PlayerTeleportingToFriend(PlayerTeleportingToFriend)
	PlayInteractiveMusic(PlayInteractiveMusic)
	PlayInteractiveMusic2(PlayInteractiveMusic2)
	PlayInteractiveMusicLoop(PlayInteractiveMusicLoop)
	PlayInteractiveMusicLooping(PlayInteractiveMusicLooping)
	PlayInteractiveMusicLooping2(PlayInteractiveMusicLooping2)
	PlayTrainSound(PlayTrainSound)
	RemoveFishFromAquarium(RemoveFishFromAquarium)
	RemoveHouseMusic(RemoveHouseMusic)
	ReportHouse(ReportHouse)
	AddRequestAllFish(AddRequestAllFish)
	RequestAttic(RequestAttic)
	RequestCatchSuccess(RequestCatchSuccess)
	RequestDeedZone(RequestDeedZone)
	AddRequestFishHistory(AddRequestFishHistory)
	RequestHouseOwnerCharacterID(RequestHouseOwnerCharacterID)
	RequestHouseTransferList(RequestHouseTransferList)
	RequestHousingZone(RequestHousingZone)
	RequestHousingZoneTeleport(RequestHousingZoneTeleport)
	RequestInteractiveMusic(RequestInteractiveMusic)
	RequestIslandSwitch(RequestIslandSwitch)
	RequestRestoreState(RequestRestoreState)
	RequestSendAway(RequestSendAway)
	RequestTeleporterHousingConfirm(RequestTeleporterHousingConfirm)
	RequestTeleporterHousingZone(RequestTeleporterHousingZone)
	RequestTransition(RequestTransition)
	RequestBlobs(RequestBlobs)
	Respec(Respec)
	SelectHouseMusic(SelectHouseMusic)
	SelectMusicStyle(SelectMusicStyle)
	SellFishOpen(SellFishOpen)
	SellFishRequest(SellFishRequest)
	SendHousingObjectStates(SendHousingObjectStates)
	SendHousingTextureInfo(SendHousingTextureInfo)
	SendBlob(SendBlob)
	SetAtticID(SetAtticID)
	SetFishingPlayers(SetFishingPlayers)
	SetHouseSign(SetHouseSign)
	SetHouseTeleporter(SetHouseTeleporter)
	SetHousingGameState(SetHousingGameState)
	SetHousingPalette(SetHousingPalette)
	SetInstanceFish(SetInstanceFish)
	InvisibleToFriends(InvisibleToFriends)
	SetMusicLoop(SetMusicLoop)
	SetNextTrain(SetNextTrain)
	SetTileWallpaper(SetTileWallpaper)
	ShowFishingCast(ShowFishingCast)
	StartHousingGame(StartHousingGame)
	StartTrain(StartTrain)
	StopInteractiveMusicLoop(StopInteractiveMusicLoop)
	SwitchGotoCommons(SwitchGotoCommons)
	TeleportedToDeletedLot(TeleportedToDeletedLot)
	TeleportToStart(TeleportToStart)
	UpdateAtticCount(UpdateAtticCount)
	UpdateGardeningXP(UpdateGardeningXP)
	UpdateHousingObject(UpdateHousingObject)
	UpdateHousingPet(UpdateHousingPet)
	UpdateIslandSpace(UpdateIslandSpace)
	UpdateMaximumHousingItems(UpdateMaximumHousingItems)
	UpdateTrain(UpdateTrain)
}

type WizardhousingService struct {
	wizardhousingService
}

type WizardhousingClient struct {
	c *proto.Client
}

func (l *WizardhousingService) AddFishToAquarium(_ AddFishToAquarium)                               {}
func (l *WizardhousingService) AddInstanceFish(_ AddInstanceFish)                                   {}
func (l *WizardhousingService) AddToTreasureCardPoster(_ AddToTreasureCardPoster)                   {}
func (l *WizardhousingService) AuditAtticResults(_ AuditAtticResults)                               {}
func (l *WizardhousingService) BeginFishingCast(_ BeginFishingCast)                                 {}
func (l *WizardhousingService) BlockPetSpawn(_ BlockPetSpawn)                                       {}
func (l *WizardhousingService) BuyIslandSpaceConfirm(_ BuyIslandSpaceConfirm)                       {}
func (l *WizardhousingService) CastleGamesRequest(_ CastleGamesRequest)                             {}
func (l *WizardhousingService) CastleGamesRequestGameData(_ CastleGamesRequestGameData)             {}
func (l *WizardhousingService) CastleGamesTeleportRejected(_ CastleGamesTeleportRejected)           {}
func (l *WizardhousingService) CastleMagicCantrip(_ CastleMagicCantrip)                             {}
func (l *WizardhousingService) CastleMagicChangeAction(_ CastleMagicChangeAction)                   {}
func (l *WizardhousingService) CastleMagicClear(_ CastleMagicClear)                                 {}
func (l *WizardhousingService) CastleMagicCurrentState(_ CastleMagicCurrentState)                   {}
func (l *WizardhousingService) CastleMagicOrb(_ CastleMagicOrb)                                     {}
func (l *WizardhousingService) CastleMagicRequestAllowMounts(_ CastleMagicRequestAllowMounts)       {}
func (l *WizardhousingService) CastleMagicRequestAllowPVP(_ CastleMagicRequestAllowPVP)             {}
func (l *WizardhousingService) CastleMagicRequestPlayerTeleport(_ CastleMagicRequestPlayerTeleport) {}
func (l *WizardhousingService) CastleMagicRequestPVPState(_ CastleMagicRequestPVPState)             {}
func (l *WizardhousingService) CastleMagicRequestRandom(_ CastleMagicRequestRandom)                 {}
func (l *WizardhousingService) CastleMagicRequestUse(_ CastleMagicRequestUse)                       {}
func (l *WizardhousingService) CastleMagicTutorial(_ CastleMagicTutorial)                           {}
func (l *WizardhousingService) CastleMagicUpdateState(_ CastleMagicUpdateState)                     {}
func (l *WizardhousingService) CastleToursAdd(_ CastleToursAdd)                                     {}
func (l *WizardhousingService) CastleToursAddFavorite(_ CastleToursAddFavorite)                     {}
func (l *WizardhousingService) CastleToursAddResult(_ CastleToursAddResult)                         {}
func (l *WizardhousingService) CastleToursCSRResults(_ CastleToursCSRResults)                       {}
func (l *WizardhousingService) CastleToursDeleteCharacter(_ CastleToursDeleteCharacter)             {}
func (l *WizardhousingService) CastleToursEnableRatingDisplay(_ CastleToursEnableRatingDisplay)     {}
func (l *WizardhousingService) CastleToursFavoriteInfo(_ CastleToursFavoriteInfo)                   {}
func (l *WizardhousingService) CastleToursFavoriteInfo2(_ CastleToursFavoriteInfo2)                 {}
func (l *WizardhousingService) CastleToursLeaderboardResponse(_ CastleToursLeaderboardResponse)     {}
func (l *WizardhousingService) CastleToursPlayerBanned(_ CastleToursPlayerBanned)                   {}
func (l *WizardhousingService) CastleToursPostRateHouse(_ CastleToursPostRateHouse)                 {}
func (l *WizardhousingService) CastleToursPreAdd(_ CastleToursPreAdd)                               {}
func (l *WizardhousingService) CastleToursRatingDisplay(_ CastleToursRatingDisplay)                 {}
func (l *WizardhousingService) CastleToursRemove(_ CastleToursRemove)                               {}
func (l *WizardhousingService) CastleToursRemoveFavorite(_ CastleToursRemoveFavorite)               {}
func (l *WizardhousingService) CastleToursRemoveResult(_ CastleToursRemoveResult)                   {}
func (l *WizardhousingService) CastleToursRequest(_ CastleToursRequest)                             {}
func (l *WizardhousingService) CastleToursRequestFriends(_ CastleToursRequestFriends)               {}
func (l *WizardhousingService) CastleToursRequestLeaderboard(_ CastleToursRequestLeaderboard)       {}
func (l *WizardhousingService) CastleToursRequestMyCastleData(_ CastleToursRequestMyCastleData)     {}
func (l *WizardhousingService) CastleToursRequestMyCastles(_ CastleToursRequestMyCastles)           {}
func (l *WizardhousingService) CastleToursSendRating(_ CastleToursSendRating)                       {}
func (l *WizardhousingService) CastleToursTeleportPlayer(_ CastleToursTeleportPlayer)               {}
func (l *WizardhousingService) CastleToursTeleportRejected(_ CastleToursTeleportRejected)           {}
func (l *WizardhousingService) CastleToursVisitCastle(_ CastleToursVisitCastle)                     {}
func (l *WizardhousingService) CatchFish(_ CatchFish)                                               {}
func (l *WizardhousingService) CatchOfTheDayOpen(_ CatchOfTheDayOpen)                               {}
func (l *WizardhousingService) CatchSuccess(_ CatchSuccess)                                         {}
func (l *WizardhousingService) ChangeBreadCrumbRequest(_ ChangeBreadCrumbRequest)                   {}
func (l *WizardhousingService) CreateTestIsland(_ CreateTestIsland)                                 {}
func (l *WizardhousingService) DailyPvPOpen(_ DailyPvPOpen)                                         {}
func (l *WizardhousingService) DailyQuestCompleted(_ DailyQuestCompleted)                           {}
func (l *WizardhousingService) DailyQuestCSRData(_ DailyQuestCSRData)                               {}
func (l *WizardhousingService) DailyQuestExplore(_ DailyQuestExplore)                               {}
func (l *WizardhousingService) DailyQuestOpen(_ DailyQuestOpen)                                     {}
func (l *WizardhousingService) DeleteEquippedHousingItem(_ DeleteEquippedHousingItem)               {}
func (l *WizardhousingService) DeleteFish(_ DeleteFish)                                             {}
func (l *WizardhousingService) DeleteFromAttic(_ DeleteFromAttic)                                   {}
func (l *WizardhousingService) DeleteMusicLoop(_ DeleteMusicLoop)                                   {}
func (l *WizardhousingService) DisplayCatchFish(_ DisplayCatchFish)                                 {}
func (l *WizardhousingService) DisplayCaughtFish(_ DisplayCaughtFish)                               {}
func (l *WizardhousingService) DisposableDungeonNoOwner(_ DisposableDungeonNoOwner)                 {}
func (l *WizardhousingService) DailyPvPUpdate(_ DailyPvPUpdate)                                     {}
func (l *WizardhousingService) DailyQuestUpdate(_ DailyQuestUpdate)                                 {}
func (l *WizardhousingService) EmptyLotCheck(_ EmptyLotCheck)                                       {}
func (l *WizardhousingService) EndFishingCast(_ EndFishingCast)                                     {}
func (l *WizardhousingService) EnterTournamentFish(_ EnterTournamentFish)                           {}
func (l *WizardhousingService) EnterTournamentFishResult(_ EnterTournamentFishResult)               {}
func (l *WizardhousingService) EquipHouseMusic(_ EquipHouseMusic)                                   {}
func (l *WizardhousingService) EquipMannequinItem(_ EquipMannequinItem)                             {}
func (l *WizardhousingService) FishEscaped(_ FishEscaped)                                           {}
func (l *WizardhousingService) FishingCSRResults(_ FishingCSRResults)                               {}
func (l *WizardhousingService) FishingSpellCast(_ FishingSpellCast)                                 {}
func (l *WizardhousingService) FishTournamentLeaderBoardOpen(_ FishTournamentLeaderBoardOpen)       {}
func (l *WizardhousingService) FishTournamentLeaderBoardRequest(_ FishTournamentLeaderBoardRequest) {}
func (l *WizardhousingService) FishTournamentOpen(_ FishTournamentOpen)                             {}
func (l *WizardhousingService) GardeningCastSpell(_ GardeningCastSpell)                             {}
func (l *WizardhousingService) GardeningCommand(_ GardeningCommand)                                 {}
func (l *WizardhousingService) GardeningCommandResponse(_ GardeningCommandResponse)                 {}
func (l *WizardhousingService) GardeningCSRResults(_ GardeningCSRResults)                           {}
func (l *WizardhousingService) GardeningHarvestPlant(_ GardeningHarvestPlant)                       {}
func (l *WizardhousingService) GardeningHarvestPlantSecondSpring(_ GardeningHarvestPlantSecondSpring) {
}
func (l *WizardhousingService) GardeningSpellFizzle(_ GardeningSpellFizzle)   {}
func (l *WizardhousingService) GardeningSpellInspect(_ GardeningSpellInspect) {}
func (l *WizardhousingService) GardenLevelUp(_ GardenLevelUp)                 {}
func (l *WizardhousingService) HideHousingObject(_ HideHousingObject)         {}
func (l *WizardhousingService) HousingGameRequestPoweruplocations(_ HousingGameRequestPoweruplocations) {
}
func (l *WizardhousingService) HousingGameStatusUpdate(_ HousingGameStatusUpdate)                 {}
func (l *WizardhousingService) HousingGameUsePowerup(_ HousingGameUsePowerup)                     {}
func (l *WizardhousingService) HousingObjectNoPickup(_ HousingObjectNoPickup)                     {}
func (l *WizardhousingService) HousingObjectProximity(_ HousingObjectProximity)                   {}
func (l *WizardhousingService) HousingZonePlayer(_ HousingZonePlayer)                             {}
func (l *WizardhousingService) HousingZonePlayerList(_ HousingZonePlayerList)                     {}
func (l *WizardhousingService) InteractiveMusicError(_ InteractiveMusicError)                     {}
func (l *WizardhousingService) InteractiveMusicInUse(_ InteractiveMusicInUse)                     {}
func (l *WizardhousingService) InteractiveMusicInUse2(_ InteractiveMusicInUse2)                   {}
func (l *WizardhousingService) IslandSpaceBuyRequest(_ IslandSpaceBuyRequest)                     {}
func (l *WizardhousingService) IslandSpaceShopOpen(_ IslandSpaceShopOpen)                         {}
func (l *WizardhousingService) MissFish(_ MissFish)                                               {}
func (l *WizardhousingService) MonsterMagicAddMonster(_ MonsterMagicAddMonster)                   {}
func (l *WizardhousingService) MonsterMagicEraseMonster(_ MonsterMagicEraseMonster)               {}
func (l *WizardhousingService) MoveFromAttic(_ MoveFromAttic)                                     {}
func (l *WizardhousingService) MoveGearFromGearVault(_ MoveGearFromGearVault)                     {}
func (l *WizardhousingService) MoveGearToGearVault(_ MoveGearToGearVault)                         {}
func (l *WizardhousingService) MoveJewelFromJewelVault(_ MoveJewelFromJewelVault)                 {}
func (l *WizardhousingService) MoveJewelToJewelVault(_ MoveJewelToJewelVault)                     {}
func (l *WizardhousingService) MoveSeedFromGardeningShed(_ MoveSeedFromGardeningShed)             {}
func (l *WizardhousingService) MoveSeedToGardeningShed(_ MoveSeedToGardeningShed)                 {}
func (l *WizardhousingService) MoveTCFromTCVault(_ MoveTCFromTCVault)                             {}
func (l *WizardhousingService) MoveTCToTCVault(_ MoveTCToTCVault)                                 {}
func (l *WizardhousingService) MoveToAttic(_ MoveToAttic)                                         {}
func (l *WizardhousingService) NoFishSpace(_ NoFishSpace)                                         {}
func (l *WizardhousingService) PatchAddAttic(_ PatchAddAttic)                                     {}
func (l *WizardhousingService) PatchAddHousingObject(_ PatchAddHousingObject)                     {}
func (l *WizardhousingService) PatchAquarium(_ PatchAquarium)                                     {}
func (l *WizardhousingService) PatchCastleMagic(_ PatchCastleMagic)                               {}
func (l *WizardhousingService) PatchDeleteAttic(_ PatchDeleteAttic)                               {}
func (l *WizardhousingService) PatchDeleteHousingObject(_ PatchDeleteHousingObject)               {}
func (l *WizardhousingService) PatchEquipHousingObject(_ PatchEquipHousingObject)                 {}
func (l *WizardhousingService) PatchGardening(_ PatchGardening)                                   {}
func (l *WizardhousingService) PatchHouse(_ PatchHouse)                                           {}
func (l *WizardhousingService) PatchHousingBreadCrumb(_ PatchHousingBreadCrumb)                   {}
func (l *WizardhousingService) PatchHousingGardeningShed(_ PatchHousingGardeningShed)             {}
func (l *WizardhousingService) PatchHousingGearVault(_ PatchHousingGearVault)                     {}
func (l *WizardhousingService) PatchHousingJewelVault(_ PatchHousingJewelVault)                   {}
func (l *WizardhousingService) PatchHousingMusicObject(_ PatchHousingMusicObject)                 {}
func (l *WizardhousingService) PatchHousingSignObject(_ PatchHousingSignObject)                   {}
func (l *WizardhousingService) PatchHousingTeleporterObject(_ PatchHousingTeleporterObject)       {}
func (l *WizardhousingService) PatchHousingTrain(_ PatchHousingTrain)                             {}
func (l *WizardhousingService) PatchMonsterArena(_ PatchMonsterArena)                             {}
func (l *WizardhousingService) PatchMusicLoop(_ PatchMusicLoop)                                   {}
func (l *WizardhousingService) PatchRemoveTextureRemap(_ PatchRemoveTextureRemap)                 {}
func (l *WizardhousingService) PatchTextureRemap(_ PatchTextureRemap)                             {}
func (l *WizardhousingService) PatchTintHousingObject(_ PatchTintHousingObject)                   {}
func (l *WizardhousingService) PatchTreasureCardPoster(_ PatchTreasureCardPoster)                 {}
func (l *WizardhousingService) PatchTreasureCardVault(_ PatchTreasureCardVault)                   {}
func (l *WizardhousingService) PatchUpdateHousingObject(_ PatchUpdateHousingObject)               {}
func (l *WizardhousingService) PatchExtendedTile(_ PatchExtendedTile)                             {}
func (l *WizardhousingService) PetTomeScanAttic(_ PetTomeScanAttic)                               {}
func (l *WizardhousingService) PickUpAll(_ PickUpAll)                                             {}
func (l *WizardhousingService) PickUpHousingTexture(_ PickUpHousingTexture)                       {}
func (l *WizardhousingService) PlaceHousingFish(_ PlaceHousingFish)                               {}
func (l *WizardhousingService) PlaceHousingObject(_ PlaceHousingObject)                           {}
func (l *WizardhousingService) PlayerTeleportingToFriend(_ PlayerTeleportingToFriend)             {}
func (l *WizardhousingService) PlayInteractiveMusic(_ PlayInteractiveMusic)                       {}
func (l *WizardhousingService) PlayInteractiveMusic2(_ PlayInteractiveMusic2)                     {}
func (l *WizardhousingService) PlayInteractiveMusicLoop(_ PlayInteractiveMusicLoop)               {}
func (l *WizardhousingService) PlayInteractiveMusicLooping(_ PlayInteractiveMusicLooping)         {}
func (l *WizardhousingService) PlayInteractiveMusicLooping2(_ PlayInteractiveMusicLooping2)       {}
func (l *WizardhousingService) PlayTrainSound(_ PlayTrainSound)                                   {}
func (l *WizardhousingService) RemoveFishFromAquarium(_ RemoveFishFromAquarium)                   {}
func (l *WizardhousingService) RemoveHouseMusic(_ RemoveHouseMusic)                               {}
func (l *WizardhousingService) ReportHouse(_ ReportHouse)                                         {}
func (l *WizardhousingService) AddRequestAllFish(_ AddRequestAllFish)                             {}
func (l *WizardhousingService) RequestAttic(_ RequestAttic)                                       {}
func (l *WizardhousingService) RequestCatchSuccess(_ RequestCatchSuccess)                         {}
func (l *WizardhousingService) RequestDeedZone(_ RequestDeedZone)                                 {}
func (l *WizardhousingService) AddRequestFishHistory(_ AddRequestFishHistory)                     {}
func (l *WizardhousingService) RequestHouseOwnerCharacterID(_ RequestHouseOwnerCharacterID)       {}
func (l *WizardhousingService) RequestHouseTransferList(_ RequestHouseTransferList)               {}
func (l *WizardhousingService) RequestHousingZone(_ RequestHousingZone)                           {}
func (l *WizardhousingService) RequestHousingZoneTeleport(_ RequestHousingZoneTeleport)           {}
func (l *WizardhousingService) RequestInteractiveMusic(_ RequestInteractiveMusic)                 {}
func (l *WizardhousingService) RequestIslandSwitch(_ RequestIslandSwitch)                         {}
func (l *WizardhousingService) RequestRestoreState(_ RequestRestoreState)                         {}
func (l *WizardhousingService) RequestSendAway(_ RequestSendAway)                                 {}
func (l *WizardhousingService) RequestTeleporterHousingConfirm(_ RequestTeleporterHousingConfirm) {}
func (l *WizardhousingService) RequestTeleporterHousingZone(_ RequestTeleporterHousingZone)       {}
func (l *WizardhousingService) RequestTransition(_ RequestTransition)                             {}
func (l *WizardhousingService) RequestBlobs(_ RequestBlobs)                                       {}
func (l *WizardhousingService) Respec(_ Respec)                                                   {}
func (l *WizardhousingService) SelectHouseMusic(_ SelectHouseMusic)                               {}
func (l *WizardhousingService) SelectMusicStyle(_ SelectMusicStyle)                               {}
func (l *WizardhousingService) SellFishOpen(_ SellFishOpen)                                       {}
func (l *WizardhousingService) SellFishRequest(_ SellFishRequest)                                 {}
func (l *WizardhousingService) SendHousingObjectStates(_ SendHousingObjectStates)                 {}
func (l *WizardhousingService) SendHousingTextureInfo(_ SendHousingTextureInfo)                   {}
func (l *WizardhousingService) SendBlob(_ SendBlob)                                               {}
func (l *WizardhousingService) SetAtticID(_ SetAtticID)                                           {}
func (l *WizardhousingService) SetFishingPlayers(_ SetFishingPlayers)                             {}
func (l *WizardhousingService) SetHouseSign(_ SetHouseSign)                                       {}
func (l *WizardhousingService) SetHouseTeleporter(_ SetHouseTeleporter)                           {}
func (l *WizardhousingService) SetHousingGameState(_ SetHousingGameState)                         {}
func (l *WizardhousingService) SetHousingPalette(_ SetHousingPalette)                             {}
func (l *WizardhousingService) SetInstanceFish(_ SetInstanceFish)                                 {}
func (l *WizardhousingService) InvisibleToFriends(_ InvisibleToFriends)                           {}
func (l *WizardhousingService) SetMusicLoop(_ SetMusicLoop)                                       {}
func (l *WizardhousingService) SetNextTrain(_ SetNextTrain)                                       {}
func (l *WizardhousingService) SetTileWallpaper(_ SetTileWallpaper)                               {}
func (l *WizardhousingService) ShowFishingCast(_ ShowFishingCast)                                 {}
func (l *WizardhousingService) StartHousingGame(_ StartHousingGame)                               {}
func (l *WizardhousingService) StartTrain(_ StartTrain)                                           {}
func (l *WizardhousingService) StopInteractiveMusicLoop(_ StopInteractiveMusicLoop)               {}
func (l *WizardhousingService) SwitchGotoCommons(_ SwitchGotoCommons)                             {}
func (l *WizardhousingService) TeleportedToDeletedLot(_ TeleportedToDeletedLot)                   {}
func (l *WizardhousingService) TeleportToStart(_ TeleportToStart)                                 {}
func (l *WizardhousingService) UpdateAtticCount(_ UpdateAtticCount)                               {}
func (l *WizardhousingService) UpdateGardeningXP(_ UpdateGardeningXP)                             {}
func (l *WizardhousingService) UpdateHousingObject(_ UpdateHousingObject)                         {}
func (l *WizardhousingService) UpdateHousingPet(_ UpdateHousingPet)                               {}
func (l *WizardhousingService) UpdateIslandSpace(_ UpdateIslandSpace)                             {}
func (l *WizardhousingService) UpdateMaximumHousingItems(_ UpdateMaximumHousingItems)             {}
func (l *WizardhousingService) UpdateTrain(_ UpdateTrain)                                         {}

func RegisterWizardhousingService(r *proto.MessageRouter, s wizardhousingService) {
	proto.RegisterMessageHandler(r, 50, 1, s.AddFishToAquarium)
	proto.RegisterMessageHandler(r, 50, 2, s.AddInstanceFish)
	proto.RegisterMessageHandler(r, 50, 3, s.AddToTreasureCardPoster)
	proto.RegisterMessageHandler(r, 50, 4, s.AuditAtticResults)
	proto.RegisterMessageHandler(r, 50, 5, s.BeginFishingCast)
	proto.RegisterMessageHandler(r, 50, 6, s.BlockPetSpawn)
	proto.RegisterMessageHandler(r, 50, 7, s.BuyIslandSpaceConfirm)
	proto.RegisterMessageHandler(r, 50, 8, s.CastleGamesRequest)
	proto.RegisterMessageHandler(r, 50, 9, s.CastleGamesRequestGameData)
	proto.RegisterMessageHandler(r, 50, 10, s.CastleGamesTeleportRejected)
	proto.RegisterMessageHandler(r, 50, 11, s.CastleMagicCantrip)
	proto.RegisterMessageHandler(r, 50, 12, s.CastleMagicChangeAction)
	proto.RegisterMessageHandler(r, 50, 13, s.CastleMagicClear)
	proto.RegisterMessageHandler(r, 50, 14, s.CastleMagicCurrentState)
	proto.RegisterMessageHandler(r, 50, 15, s.CastleMagicOrb)
	proto.RegisterMessageHandler(r, 50, 16, s.CastleMagicRequestAllowMounts)
	proto.RegisterMessageHandler(r, 50, 17, s.CastleMagicRequestAllowPVP)
	proto.RegisterMessageHandler(r, 50, 18, s.CastleMagicRequestPlayerTeleport)
	proto.RegisterMessageHandler(r, 50, 19, s.CastleMagicRequestPVPState)
	proto.RegisterMessageHandler(r, 50, 20, s.CastleMagicRequestRandom)
	proto.RegisterMessageHandler(r, 50, 21, s.CastleMagicRequestUse)
	proto.RegisterMessageHandler(r, 50, 22, s.CastleMagicTutorial)
	proto.RegisterMessageHandler(r, 50, 23, s.CastleMagicUpdateState)
	proto.RegisterMessageHandler(r, 50, 24, s.CastleToursAdd)
	proto.RegisterMessageHandler(r, 50, 25, s.CastleToursAddFavorite)
	proto.RegisterMessageHandler(r, 50, 26, s.CastleToursAddResult)
	proto.RegisterMessageHandler(r, 50, 27, s.CastleToursCSRResults)
	proto.RegisterMessageHandler(r, 50, 28, s.CastleToursDeleteCharacter)
	proto.RegisterMessageHandler(r, 50, 29, s.CastleToursEnableRatingDisplay)
	proto.RegisterMessageHandler(r, 50, 30, s.CastleToursFavoriteInfo)
	proto.RegisterMessageHandler(r, 50, 31, s.CastleToursFavoriteInfo2)
	proto.RegisterMessageHandler(r, 50, 32, s.CastleToursLeaderboardResponse)
	proto.RegisterMessageHandler(r, 50, 33, s.CastleToursPlayerBanned)
	proto.RegisterMessageHandler(r, 50, 34, s.CastleToursPostRateHouse)
	proto.RegisterMessageHandler(r, 50, 35, s.CastleToursPreAdd)
	proto.RegisterMessageHandler(r, 50, 36, s.CastleToursRatingDisplay)
	proto.RegisterMessageHandler(r, 50, 37, s.CastleToursRemove)
	proto.RegisterMessageHandler(r, 50, 38, s.CastleToursRemoveFavorite)
	proto.RegisterMessageHandler(r, 50, 39, s.CastleToursRemoveResult)
	proto.RegisterMessageHandler(r, 50, 40, s.CastleToursRequest)
	proto.RegisterMessageHandler(r, 50, 41, s.CastleToursRequestFriends)
	proto.RegisterMessageHandler(r, 50, 42, s.CastleToursRequestLeaderboard)
	proto.RegisterMessageHandler(r, 50, 43, s.CastleToursRequestMyCastleData)
	proto.RegisterMessageHandler(r, 50, 44, s.CastleToursRequestMyCastles)
	proto.RegisterMessageHandler(r, 50, 45, s.CastleToursSendRating)
	proto.RegisterMessageHandler(r, 50, 46, s.CastleToursTeleportPlayer)
	proto.RegisterMessageHandler(r, 50, 47, s.CastleToursTeleportRejected)
	proto.RegisterMessageHandler(r, 50, 48, s.CastleToursVisitCastle)
	proto.RegisterMessageHandler(r, 50, 49, s.CatchFish)
	proto.RegisterMessageHandler(r, 50, 50, s.CatchOfTheDayOpen)
	proto.RegisterMessageHandler(r, 50, 51, s.CatchSuccess)
	proto.RegisterMessageHandler(r, 50, 52, s.ChangeBreadCrumbRequest)
	proto.RegisterMessageHandler(r, 50, 53, s.CreateTestIsland)
	proto.RegisterMessageHandler(r, 50, 54, s.DailyPvPOpen)
	proto.RegisterMessageHandler(r, 50, 55, s.DailyQuestCompleted)
	proto.RegisterMessageHandler(r, 50, 56, s.DailyQuestCSRData)
	proto.RegisterMessageHandler(r, 50, 57, s.DailyQuestExplore)
	proto.RegisterMessageHandler(r, 50, 58, s.DailyQuestOpen)
	proto.RegisterMessageHandler(r, 50, 59, s.DeleteEquippedHousingItem)
	proto.RegisterMessageHandler(r, 50, 60, s.DeleteFish)
	proto.RegisterMessageHandler(r, 50, 61, s.DeleteFromAttic)
	proto.RegisterMessageHandler(r, 50, 62, s.DeleteMusicLoop)
	proto.RegisterMessageHandler(r, 50, 63, s.DisplayCatchFish)
	proto.RegisterMessageHandler(r, 50, 64, s.DisplayCaughtFish)
	proto.RegisterMessageHandler(r, 50, 65, s.DisposableDungeonNoOwner)
	proto.RegisterMessageHandler(r, 50, 66, s.DailyPvPUpdate)
	proto.RegisterMessageHandler(r, 50, 67, s.DailyQuestUpdate)
	proto.RegisterMessageHandler(r, 50, 68, s.EmptyLotCheck)
	proto.RegisterMessageHandler(r, 50, 69, s.EndFishingCast)
	proto.RegisterMessageHandler(r, 50, 70, s.EnterTournamentFish)
	proto.RegisterMessageHandler(r, 50, 71, s.EnterTournamentFishResult)
	proto.RegisterMessageHandler(r, 50, 72, s.EquipHouseMusic)
	proto.RegisterMessageHandler(r, 50, 73, s.EquipMannequinItem)
	proto.RegisterMessageHandler(r, 50, 74, s.FishEscaped)
	proto.RegisterMessageHandler(r, 50, 75, s.FishingCSRResults)
	proto.RegisterMessageHandler(r, 50, 76, s.FishingSpellCast)
	proto.RegisterMessageHandler(r, 50, 77, s.FishTournamentLeaderBoardOpen)
	proto.RegisterMessageHandler(r, 50, 78, s.FishTournamentLeaderBoardRequest)
	proto.RegisterMessageHandler(r, 50, 79, s.FishTournamentOpen)
	proto.RegisterMessageHandler(r, 50, 80, s.GardeningCastSpell)
	proto.RegisterMessageHandler(r, 50, 81, s.GardeningCommand)
	proto.RegisterMessageHandler(r, 50, 82, s.GardeningCommandResponse)
	proto.RegisterMessageHandler(r, 50, 83, s.GardeningCSRResults)
	proto.RegisterMessageHandler(r, 50, 84, s.GardeningHarvestPlant)
	proto.RegisterMessageHandler(r, 50, 85, s.GardeningHarvestPlantSecondSpring)
	proto.RegisterMessageHandler(r, 50, 86, s.GardeningSpellFizzle)
	proto.RegisterMessageHandler(r, 50, 87, s.GardeningSpellInspect)
	proto.RegisterMessageHandler(r, 50, 88, s.GardenLevelUp)
	proto.RegisterMessageHandler(r, 50, 89, s.HideHousingObject)
	proto.RegisterMessageHandler(r, 50, 90, s.HousingGameRequestPoweruplocations)
	proto.RegisterMessageHandler(r, 50, 91, s.HousingGameStatusUpdate)
	proto.RegisterMessageHandler(r, 50, 92, s.HousingGameUsePowerup)
	proto.RegisterMessageHandler(r, 50, 93, s.HousingObjectNoPickup)
	proto.RegisterMessageHandler(r, 50, 94, s.HousingObjectProximity)
	proto.RegisterMessageHandler(r, 50, 95, s.HousingZonePlayer)
	proto.RegisterMessageHandler(r, 50, 96, s.HousingZonePlayerList)
	proto.RegisterMessageHandler(r, 50, 97, s.InteractiveMusicError)
	proto.RegisterMessageHandler(r, 50, 98, s.InteractiveMusicInUse)
	proto.RegisterMessageHandler(r, 50, 99, s.InteractiveMusicInUse2)
	proto.RegisterMessageHandler(r, 50, 100, s.IslandSpaceBuyRequest)
	proto.RegisterMessageHandler(r, 50, 101, s.IslandSpaceShopOpen)
	proto.RegisterMessageHandler(r, 50, 102, s.MissFish)
	proto.RegisterMessageHandler(r, 50, 103, s.MonsterMagicAddMonster)
	proto.RegisterMessageHandler(r, 50, 104, s.MonsterMagicEraseMonster)
	proto.RegisterMessageHandler(r, 50, 105, s.MoveFromAttic)
	proto.RegisterMessageHandler(r, 50, 106, s.MoveGearFromGearVault)
	proto.RegisterMessageHandler(r, 50, 107, s.MoveGearToGearVault)
	proto.RegisterMessageHandler(r, 50, 108, s.MoveJewelFromJewelVault)
	proto.RegisterMessageHandler(r, 50, 109, s.MoveJewelToJewelVault)
	proto.RegisterMessageHandler(r, 50, 110, s.MoveSeedFromGardeningShed)
	proto.RegisterMessageHandler(r, 50, 111, s.MoveSeedToGardeningShed)
	proto.RegisterMessageHandler(r, 50, 112, s.MoveTCFromTCVault)
	proto.RegisterMessageHandler(r, 50, 113, s.MoveTCToTCVault)
	proto.RegisterMessageHandler(r, 50, 114, s.MoveToAttic)
	proto.RegisterMessageHandler(r, 50, 115, s.NoFishSpace)
	proto.RegisterMessageHandler(r, 50, 116, s.PatchAddAttic)
	proto.RegisterMessageHandler(r, 50, 117, s.PatchAddHousingObject)
	proto.RegisterMessageHandler(r, 50, 118, s.PatchAquarium)
	proto.RegisterMessageHandler(r, 50, 119, s.PatchCastleMagic)
	proto.RegisterMessageHandler(r, 50, 120, s.PatchDeleteAttic)
	proto.RegisterMessageHandler(r, 50, 121, s.PatchDeleteHousingObject)
	proto.RegisterMessageHandler(r, 50, 122, s.PatchEquipHousingObject)
	proto.RegisterMessageHandler(r, 50, 123, s.PatchGardening)
	proto.RegisterMessageHandler(r, 50, 124, s.PatchHouse)
	proto.RegisterMessageHandler(r, 50, 125, s.PatchHousingBreadCrumb)
	proto.RegisterMessageHandler(r, 50, 126, s.PatchHousingGardeningShed)
	proto.RegisterMessageHandler(r, 50, 127, s.PatchHousingGearVault)
	proto.RegisterMessageHandler(r, 50, 128, s.PatchHousingJewelVault)
	proto.RegisterMessageHandler(r, 50, 129, s.PatchHousingMusicObject)
	proto.RegisterMessageHandler(r, 50, 130, s.PatchHousingSignObject)
	proto.RegisterMessageHandler(r, 50, 131, s.PatchHousingTeleporterObject)
	proto.RegisterMessageHandler(r, 50, 132, s.PatchHousingTrain)
	proto.RegisterMessageHandler(r, 50, 133, s.PatchMonsterArena)
	proto.RegisterMessageHandler(r, 50, 134, s.PatchMusicLoop)
	proto.RegisterMessageHandler(r, 50, 135, s.PatchRemoveTextureRemap)
	proto.RegisterMessageHandler(r, 50, 136, s.PatchTextureRemap)
	proto.RegisterMessageHandler(r, 50, 137, s.PatchTintHousingObject)
	proto.RegisterMessageHandler(r, 50, 138, s.PatchTreasureCardPoster)
	proto.RegisterMessageHandler(r, 50, 139, s.PatchTreasureCardVault)
	proto.RegisterMessageHandler(r, 50, 140, s.PatchUpdateHousingObject)
	proto.RegisterMessageHandler(r, 50, 141, s.PatchExtendedTile)
	proto.RegisterMessageHandler(r, 50, 142, s.PetTomeScanAttic)
	proto.RegisterMessageHandler(r, 50, 143, s.PickUpAll)
	proto.RegisterMessageHandler(r, 50, 144, s.PickUpHousingTexture)
	proto.RegisterMessageHandler(r, 50, 145, s.PlaceHousingFish)
	proto.RegisterMessageHandler(r, 50, 146, s.PlaceHousingObject)
	proto.RegisterMessageHandler(r, 50, 147, s.PlayerTeleportingToFriend)
	proto.RegisterMessageHandler(r, 50, 148, s.PlayInteractiveMusic)
	proto.RegisterMessageHandler(r, 50, 149, s.PlayInteractiveMusic2)
	proto.RegisterMessageHandler(r, 50, 150, s.PlayInteractiveMusicLoop)
	proto.RegisterMessageHandler(r, 50, 151, s.PlayInteractiveMusicLooping)
	proto.RegisterMessageHandler(r, 50, 152, s.PlayInteractiveMusicLooping2)
	proto.RegisterMessageHandler(r, 50, 153, s.PlayTrainSound)
	proto.RegisterMessageHandler(r, 50, 154, s.RemoveFishFromAquarium)
	proto.RegisterMessageHandler(r, 50, 155, s.RemoveHouseMusic)
	proto.RegisterMessageHandler(r, 50, 156, s.ReportHouse)
	proto.RegisterMessageHandler(r, 50, 157, s.AddRequestAllFish)
	proto.RegisterMessageHandler(r, 50, 158, s.RequestAttic)
	proto.RegisterMessageHandler(r, 50, 159, s.RequestCatchSuccess)
	proto.RegisterMessageHandler(r, 50, 160, s.RequestDeedZone)
	proto.RegisterMessageHandler(r, 50, 161, s.AddRequestFishHistory)
	proto.RegisterMessageHandler(r, 50, 162, s.RequestHouseOwnerCharacterID)
	proto.RegisterMessageHandler(r, 50, 163, s.RequestHouseTransferList)
	proto.RegisterMessageHandler(r, 50, 164, s.RequestHousingZone)
	proto.RegisterMessageHandler(r, 50, 165, s.RequestHousingZoneTeleport)
	proto.RegisterMessageHandler(r, 50, 166, s.RequestInteractiveMusic)
	proto.RegisterMessageHandler(r, 50, 167, s.RequestIslandSwitch)
	proto.RegisterMessageHandler(r, 50, 168, s.RequestRestoreState)
	proto.RegisterMessageHandler(r, 50, 169, s.RequestSendAway)
	proto.RegisterMessageHandler(r, 50, 170, s.RequestTeleporterHousingConfirm)
	proto.RegisterMessageHandler(r, 50, 171, s.RequestTeleporterHousingZone)
	proto.RegisterMessageHandler(r, 50, 172, s.RequestTransition)
	proto.RegisterMessageHandler(r, 50, 173, s.RequestBlobs)
	proto.RegisterMessageHandler(r, 50, 174, s.Respec)
	proto.RegisterMessageHandler(r, 50, 175, s.SelectHouseMusic)
	proto.RegisterMessageHandler(r, 50, 176, s.SelectMusicStyle)
	proto.RegisterMessageHandler(r, 50, 177, s.SellFishOpen)
	proto.RegisterMessageHandler(r, 50, 178, s.SellFishRequest)
	proto.RegisterMessageHandler(r, 50, 179, s.SendHousingObjectStates)
	proto.RegisterMessageHandler(r, 50, 180, s.SendHousingTextureInfo)
	proto.RegisterMessageHandler(r, 50, 181, s.SendBlob)
	proto.RegisterMessageHandler(r, 50, 182, s.SetAtticID)
	proto.RegisterMessageHandler(r, 50, 183, s.SetFishingPlayers)
	proto.RegisterMessageHandler(r, 50, 184, s.SetHouseSign)
	proto.RegisterMessageHandler(r, 50, 185, s.SetHouseTeleporter)
	proto.RegisterMessageHandler(r, 50, 186, s.SetHousingGameState)
	proto.RegisterMessageHandler(r, 50, 187, s.SetHousingPalette)
	proto.RegisterMessageHandler(r, 50, 188, s.SetInstanceFish)
	proto.RegisterMessageHandler(r, 50, 189, s.InvisibleToFriends)
	proto.RegisterMessageHandler(r, 50, 190, s.SetMusicLoop)
	proto.RegisterMessageHandler(r, 50, 191, s.SetNextTrain)
	proto.RegisterMessageHandler(r, 50, 192, s.SetTileWallpaper)
	proto.RegisterMessageHandler(r, 50, 193, s.ShowFishingCast)
	proto.RegisterMessageHandler(r, 50, 194, s.StartHousingGame)
	proto.RegisterMessageHandler(r, 50, 195, s.StartTrain)
	proto.RegisterMessageHandler(r, 50, 196, s.StopInteractiveMusicLoop)
	proto.RegisterMessageHandler(r, 50, 197, s.SwitchGotoCommons)
	proto.RegisterMessageHandler(r, 50, 198, s.TeleportedToDeletedLot)
	proto.RegisterMessageHandler(r, 50, 199, s.TeleportToStart)
	proto.RegisterMessageHandler(r, 50, 200, s.UpdateAtticCount)
	proto.RegisterMessageHandler(r, 50, 201, s.UpdateGardeningXP)
	proto.RegisterMessageHandler(r, 50, 202, s.UpdateHousingObject)
	proto.RegisterMessageHandler(r, 50, 203, s.UpdateHousingPet)
	proto.RegisterMessageHandler(r, 50, 204, s.UpdateIslandSpace)
	proto.RegisterMessageHandler(r, 50, 205, s.UpdateMaximumHousingItems)
	proto.RegisterMessageHandler(r, 50, 206, s.UpdateTrain)
}

func NewWizardhousingClient(c *proto.Client) WizardhousingClient {
	return WizardhousingClient{c}
}

func (c WizardhousingClient) AddFishToAquarium(m *AddFishToAquarium) error {
	return c.c.WriteMessage(50, 1, m)
}

func (c WizardhousingClient) AddInstanceFish(m *AddInstanceFish) error {
	return c.c.WriteMessage(50, 2, m)
}

func (c WizardhousingClient) AddToTreasureCardPoster(m *AddToTreasureCardPoster) error {
	return c.c.WriteMessage(50, 3, m)
}

func (c WizardhousingClient) AuditAtticResults(m *AuditAtticResults) error {
	return c.c.WriteMessage(50, 4, m)
}

func (c WizardhousingClient) BeginFishingCast(m *BeginFishingCast) error {
	return c.c.WriteMessage(50, 5, m)
}

func (c WizardhousingClient) BlockPetSpawn(m *BlockPetSpawn) error {
	return c.c.WriteMessage(50, 6, m)
}

func (c WizardhousingClient) BuyIslandSpaceConfirm(m *BuyIslandSpaceConfirm) error {
	return c.c.WriteMessage(50, 7, m)
}

func (c WizardhousingClient) CastleGamesRequest(m *CastleGamesRequest) error {
	return c.c.WriteMessage(50, 8, m)
}

func (c WizardhousingClient) CastleGamesRequestGameData(m *CastleGamesRequestGameData) error {
	return c.c.WriteMessage(50, 9, m)
}

func (c WizardhousingClient) CastleGamesTeleportRejected(m *CastleGamesTeleportRejected) error {
	return c.c.WriteMessage(50, 10, m)
}

func (c WizardhousingClient) CastleMagicCantrip(m *CastleMagicCantrip) error {
	return c.c.WriteMessage(50, 11, m)
}

func (c WizardhousingClient) CastleMagicChangeAction(m *CastleMagicChangeAction) error {
	return c.c.WriteMessage(50, 12, m)
}

func (c WizardhousingClient) CastleMagicClear(m *CastleMagicClear) error {
	return c.c.WriteMessage(50, 13, m)
}

func (c WizardhousingClient) CastleMagicCurrentState(m *CastleMagicCurrentState) error {
	return c.c.WriteMessage(50, 14, m)
}

func (c WizardhousingClient) CastleMagicOrb(m *CastleMagicOrb) error {
	return c.c.WriteMessage(50, 15, m)
}

func (c WizardhousingClient) CastleMagicRequestAllowMounts(m *CastleMagicRequestAllowMounts) error {
	return c.c.WriteMessage(50, 16, m)
}

func (c WizardhousingClient) CastleMagicRequestAllowPVP(m *CastleMagicRequestAllowPVP) error {
	return c.c.WriteMessage(50, 17, m)
}

func (c WizardhousingClient) CastleMagicRequestPlayerTeleport(m *CastleMagicRequestPlayerTeleport) error {
	return c.c.WriteMessage(50, 18, m)
}

func (c WizardhousingClient) CastleMagicRequestPVPState(m *CastleMagicRequestPVPState) error {
	return c.c.WriteMessage(50, 19, m)
}

func (c WizardhousingClient) CastleMagicRequestRandom(m *CastleMagicRequestRandom) error {
	return c.c.WriteMessage(50, 20, m)
}

func (c WizardhousingClient) CastleMagicRequestUse(m *CastleMagicRequestUse) error {
	return c.c.WriteMessage(50, 21, m)
}

func (c WizardhousingClient) CastleMagicTutorial(m *CastleMagicTutorial) error {
	return c.c.WriteMessage(50, 22, m)
}

func (c WizardhousingClient) CastleMagicUpdateState(m *CastleMagicUpdateState) error {
	return c.c.WriteMessage(50, 23, m)
}

func (c WizardhousingClient) CastleToursAdd(m *CastleToursAdd) error {
	return c.c.WriteMessage(50, 24, m)
}

func (c WizardhousingClient) CastleToursAddFavorite(m *CastleToursAddFavorite) error {
	return c.c.WriteMessage(50, 25, m)
}

func (c WizardhousingClient) CastleToursAddResult(m *CastleToursAddResult) error {
	return c.c.WriteMessage(50, 26, m)
}

func (c WizardhousingClient) CastleToursCSRResults(m *CastleToursCSRResults) error {
	return c.c.WriteMessage(50, 27, m)
}

func (c WizardhousingClient) CastleToursDeleteCharacter(m *CastleToursDeleteCharacter) error {
	return c.c.WriteMessage(50, 28, m)
}

func (c WizardhousingClient) CastleToursEnableRatingDisplay(m *CastleToursEnableRatingDisplay) error {
	return c.c.WriteMessage(50, 29, m)
}

func (c WizardhousingClient) CastleToursFavoriteInfo(m *CastleToursFavoriteInfo) error {
	return c.c.WriteMessage(50, 30, m)
}

func (c WizardhousingClient) CastleToursFavoriteInfo2(m *CastleToursFavoriteInfo2) error {
	return c.c.WriteMessage(50, 31, m)
}

func (c WizardhousingClient) CastleToursLeaderboardResponse(m *CastleToursLeaderboardResponse) error {
	return c.c.WriteMessage(50, 32, m)
}

func (c WizardhousingClient) CastleToursPlayerBanned(m *CastleToursPlayerBanned) error {
	return c.c.WriteMessage(50, 33, m)
}

func (c WizardhousingClient) CastleToursPostRateHouse(m *CastleToursPostRateHouse) error {
	return c.c.WriteMessage(50, 34, m)
}

func (c WizardhousingClient) CastleToursPreAdd(m *CastleToursPreAdd) error {
	return c.c.WriteMessage(50, 35, m)
}

func (c WizardhousingClient) CastleToursRatingDisplay(m *CastleToursRatingDisplay) error {
	return c.c.WriteMessage(50, 36, m)
}

func (c WizardhousingClient) CastleToursRemove(m *CastleToursRemove) error {
	return c.c.WriteMessage(50, 37, m)
}

func (c WizardhousingClient) CastleToursRemoveFavorite(m *CastleToursRemoveFavorite) error {
	return c.c.WriteMessage(50, 38, m)
}

func (c WizardhousingClient) CastleToursRemoveResult(m *CastleToursRemoveResult) error {
	return c.c.WriteMessage(50, 39, m)
}

func (c WizardhousingClient) CastleToursRequest(m *CastleToursRequest) error {
	return c.c.WriteMessage(50, 40, m)
}

func (c WizardhousingClient) CastleToursRequestFriends(m *CastleToursRequestFriends) error {
	return c.c.WriteMessage(50, 41, m)
}

func (c WizardhousingClient) CastleToursRequestLeaderboard(m *CastleToursRequestLeaderboard) error {
	return c.c.WriteMessage(50, 42, m)
}

func (c WizardhousingClient) CastleToursRequestMyCastleData(m *CastleToursRequestMyCastleData) error {
	return c.c.WriteMessage(50, 43, m)
}

func (c WizardhousingClient) CastleToursRequestMyCastles(m *CastleToursRequestMyCastles) error {
	return c.c.WriteMessage(50, 44, m)
}

func (c WizardhousingClient) CastleToursSendRating(m *CastleToursSendRating) error {
	return c.c.WriteMessage(50, 45, m)
}

func (c WizardhousingClient) CastleToursTeleportPlayer(m *CastleToursTeleportPlayer) error {
	return c.c.WriteMessage(50, 46, m)
}

func (c WizardhousingClient) CastleToursTeleportRejected(m *CastleToursTeleportRejected) error {
	return c.c.WriteMessage(50, 47, m)
}

func (c WizardhousingClient) CastleToursVisitCastle(m *CastleToursVisitCastle) error {
	return c.c.WriteMessage(50, 48, m)
}

func (c WizardhousingClient) CatchFish(m *CatchFish) error {
	return c.c.WriteMessage(50, 49, m)
}

func (c WizardhousingClient) CatchOfTheDayOpen(m *CatchOfTheDayOpen) error {
	return c.c.WriteMessage(50, 50, m)
}

func (c WizardhousingClient) CatchSuccess(m *CatchSuccess) error {
	return c.c.WriteMessage(50, 51, m)
}

func (c WizardhousingClient) ChangeBreadCrumbRequest(m *ChangeBreadCrumbRequest) error {
	return c.c.WriteMessage(50, 52, m)
}

func (c WizardhousingClient) CreateTestIsland(m *CreateTestIsland) error {
	return c.c.WriteMessage(50, 53, m)
}

func (c WizardhousingClient) DailyPvPOpen(m *DailyPvPOpen) error {
	return c.c.WriteMessage(50, 54, m)
}

func (c WizardhousingClient) DailyQuestCompleted(m *DailyQuestCompleted) error {
	return c.c.WriteMessage(50, 55, m)
}

func (c WizardhousingClient) DailyQuestCSRData(m *DailyQuestCSRData) error {
	return c.c.WriteMessage(50, 56, m)
}

func (c WizardhousingClient) DailyQuestExplore(m *DailyQuestExplore) error {
	return c.c.WriteMessage(50, 57, m)
}

func (c WizardhousingClient) DailyQuestOpen(m *DailyQuestOpen) error {
	return c.c.WriteMessage(50, 58, m)
}

func (c WizardhousingClient) DeleteEquippedHousingItem(m *DeleteEquippedHousingItem) error {
	return c.c.WriteMessage(50, 59, m)
}

func (c WizardhousingClient) DeleteFish(m *DeleteFish) error {
	return c.c.WriteMessage(50, 60, m)
}

func (c WizardhousingClient) DeleteFromAttic(m *DeleteFromAttic) error {
	return c.c.WriteMessage(50, 61, m)
}

func (c WizardhousingClient) DeleteMusicLoop(m *DeleteMusicLoop) error {
	return c.c.WriteMessage(50, 62, m)
}

func (c WizardhousingClient) DisplayCatchFish(m *DisplayCatchFish) error {
	return c.c.WriteMessage(50, 63, m)
}

func (c WizardhousingClient) DisplayCaughtFish(m *DisplayCaughtFish) error {
	return c.c.WriteMessage(50, 64, m)
}

func (c WizardhousingClient) DisposableDungeonNoOwner(m *DisposableDungeonNoOwner) error {
	return c.c.WriteMessage(50, 65, m)
}

func (c WizardhousingClient) DailyPvPUpdate(m *DailyPvPUpdate) error {
	return c.c.WriteMessage(50, 66, m)
}

func (c WizardhousingClient) DailyQuestUpdate(m *DailyQuestUpdate) error {
	return c.c.WriteMessage(50, 67, m)
}

func (c WizardhousingClient) EmptyLotCheck(m *EmptyLotCheck) error {
	return c.c.WriteMessage(50, 68, m)
}

func (c WizardhousingClient) EndFishingCast(m *EndFishingCast) error {
	return c.c.WriteMessage(50, 69, m)
}

func (c WizardhousingClient) EnterTournamentFish(m *EnterTournamentFish) error {
	return c.c.WriteMessage(50, 70, m)
}

func (c WizardhousingClient) EnterTournamentFishResult(m *EnterTournamentFishResult) error {
	return c.c.WriteMessage(50, 71, m)
}

func (c WizardhousingClient) EquipHouseMusic(m *EquipHouseMusic) error {
	return c.c.WriteMessage(50, 72, m)
}

func (c WizardhousingClient) EquipMannequinItem(m *EquipMannequinItem) error {
	return c.c.WriteMessage(50, 73, m)
}

func (c WizardhousingClient) FishEscaped(m *FishEscaped) error {
	return c.c.WriteMessage(50, 74, m)
}

func (c WizardhousingClient) FishingCSRResults(m *FishingCSRResults) error {
	return c.c.WriteMessage(50, 75, m)
}

func (c WizardhousingClient) FishingSpellCast(m *FishingSpellCast) error {
	return c.c.WriteMessage(50, 76, m)
}

func (c WizardhousingClient) FishTournamentLeaderBoardOpen(m *FishTournamentLeaderBoardOpen) error {
	return c.c.WriteMessage(50, 77, m)
}

func (c WizardhousingClient) FishTournamentLeaderBoardRequest(m *FishTournamentLeaderBoardRequest) error {
	return c.c.WriteMessage(50, 78, m)
}

func (c WizardhousingClient) FishTournamentOpen(m *FishTournamentOpen) error {
	return c.c.WriteMessage(50, 79, m)
}

func (c WizardhousingClient) GardeningCastSpell(m *GardeningCastSpell) error {
	return c.c.WriteMessage(50, 80, m)
}

func (c WizardhousingClient) GardeningCommand(m *GardeningCommand) error {
	return c.c.WriteMessage(50, 81, m)
}

func (c WizardhousingClient) GardeningCommandResponse(m *GardeningCommandResponse) error {
	return c.c.WriteMessage(50, 82, m)
}

func (c WizardhousingClient) GardeningCSRResults(m *GardeningCSRResults) error {
	return c.c.WriteMessage(50, 83, m)
}

func (c WizardhousingClient) GardeningHarvestPlant(m *GardeningHarvestPlant) error {
	return c.c.WriteMessage(50, 84, m)
}

func (c WizardhousingClient) GardeningHarvestPlantSecondSpring(m *GardeningHarvestPlantSecondSpring) error {
	return c.c.WriteMessage(50, 85, m)
}

func (c WizardhousingClient) GardeningSpellFizzle(m *GardeningSpellFizzle) error {
	return c.c.WriteMessage(50, 86, m)
}

func (c WizardhousingClient) GardeningSpellInspect(m *GardeningSpellInspect) error {
	return c.c.WriteMessage(50, 87, m)
}

func (c WizardhousingClient) GardenLevelUp(m *GardenLevelUp) error {
	return c.c.WriteMessage(50, 88, m)
}

func (c WizardhousingClient) HideHousingObject(m *HideHousingObject) error {
	return c.c.WriteMessage(50, 89, m)
}

func (c WizardhousingClient) HousingGameRequestPoweruplocations(m *HousingGameRequestPoweruplocations) error {
	return c.c.WriteMessage(50, 90, m)
}

func (c WizardhousingClient) HousingGameStatusUpdate(m *HousingGameStatusUpdate) error {
	return c.c.WriteMessage(50, 91, m)
}

func (c WizardhousingClient) HousingGameUsePowerup(m *HousingGameUsePowerup) error {
	return c.c.WriteMessage(50, 92, m)
}

func (c WizardhousingClient) HousingObjectNoPickup(m *HousingObjectNoPickup) error {
	return c.c.WriteMessage(50, 93, m)
}

func (c WizardhousingClient) HousingObjectProximity(m *HousingObjectProximity) error {
	return c.c.WriteMessage(50, 94, m)
}

func (c WizardhousingClient) HousingZonePlayer(m *HousingZonePlayer) error {
	return c.c.WriteMessage(50, 95, m)
}

func (c WizardhousingClient) HousingZonePlayerList(m *HousingZonePlayerList) error {
	return c.c.WriteMessage(50, 96, m)
}

func (c WizardhousingClient) InteractiveMusicError(m *InteractiveMusicError) error {
	return c.c.WriteMessage(50, 97, m)
}

func (c WizardhousingClient) InteractiveMusicInUse(m *InteractiveMusicInUse) error {
	return c.c.WriteMessage(50, 98, m)
}

func (c WizardhousingClient) InteractiveMusicInUse2(m *InteractiveMusicInUse2) error {
	return c.c.WriteMessage(50, 99, m)
}

func (c WizardhousingClient) IslandSpaceBuyRequest(m *IslandSpaceBuyRequest) error {
	return c.c.WriteMessage(50, 100, m)
}

func (c WizardhousingClient) IslandSpaceShopOpen(m *IslandSpaceShopOpen) error {
	return c.c.WriteMessage(50, 101, m)
}

func (c WizardhousingClient) MissFish(m *MissFish) error {
	return c.c.WriteMessage(50, 102, m)
}

func (c WizardhousingClient) MonsterMagicAddMonster(m *MonsterMagicAddMonster) error {
	return c.c.WriteMessage(50, 103, m)
}

func (c WizardhousingClient) MonsterMagicEraseMonster(m *MonsterMagicEraseMonster) error {
	return c.c.WriteMessage(50, 104, m)
}

func (c WizardhousingClient) MoveFromAttic(m *MoveFromAttic) error {
	return c.c.WriteMessage(50, 105, m)
}

func (c WizardhousingClient) MoveGearFromGearVault(m *MoveGearFromGearVault) error {
	return c.c.WriteMessage(50, 106, m)
}

func (c WizardhousingClient) MoveGearToGearVault(m *MoveGearToGearVault) error {
	return c.c.WriteMessage(50, 107, m)
}

func (c WizardhousingClient) MoveJewelFromJewelVault(m *MoveJewelFromJewelVault) error {
	return c.c.WriteMessage(50, 108, m)
}

func (c WizardhousingClient) MoveJewelToJewelVault(m *MoveJewelToJewelVault) error {
	return c.c.WriteMessage(50, 109, m)
}

func (c WizardhousingClient) MoveSeedFromGardeningShed(m *MoveSeedFromGardeningShed) error {
	return c.c.WriteMessage(50, 110, m)
}

func (c WizardhousingClient) MoveSeedToGardeningShed(m *MoveSeedToGardeningShed) error {
	return c.c.WriteMessage(50, 111, m)
}

func (c WizardhousingClient) MoveTCFromTCVault(m *MoveTCFromTCVault) error {
	return c.c.WriteMessage(50, 112, m)
}

func (c WizardhousingClient) MoveTCToTCVault(m *MoveTCToTCVault) error {
	return c.c.WriteMessage(50, 113, m)
}

func (c WizardhousingClient) MoveToAttic(m *MoveToAttic) error {
	return c.c.WriteMessage(50, 114, m)
}

func (c WizardhousingClient) NoFishSpace(m *NoFishSpace) error {
	return c.c.WriteMessage(50, 115, m)
}

func (c WizardhousingClient) PatchAddAttic(m *PatchAddAttic) error {
	return c.c.WriteMessage(50, 116, m)
}

func (c WizardhousingClient) PatchAddHousingObject(m *PatchAddHousingObject) error {
	return c.c.WriteMessage(50, 117, m)
}

func (c WizardhousingClient) PatchAquarium(m *PatchAquarium) error {
	return c.c.WriteMessage(50, 118, m)
}

func (c WizardhousingClient) PatchCastleMagic(m *PatchCastleMagic) error {
	return c.c.WriteMessage(50, 119, m)
}

func (c WizardhousingClient) PatchDeleteAttic(m *PatchDeleteAttic) error {
	return c.c.WriteMessage(50, 120, m)
}

func (c WizardhousingClient) PatchDeleteHousingObject(m *PatchDeleteHousingObject) error {
	return c.c.WriteMessage(50, 121, m)
}

func (c WizardhousingClient) PatchEquipHousingObject(m *PatchEquipHousingObject) error {
	return c.c.WriteMessage(50, 122, m)
}

func (c WizardhousingClient) PatchGardening(m *PatchGardening) error {
	return c.c.WriteMessage(50, 123, m)
}

func (c WizardhousingClient) PatchHouse(m *PatchHouse) error {
	return c.c.WriteMessage(50, 124, m)
}

func (c WizardhousingClient) PatchHousingBreadCrumb(m *PatchHousingBreadCrumb) error {
	return c.c.WriteMessage(50, 125, m)
}

func (c WizardhousingClient) PatchHousingGardeningShed(m *PatchHousingGardeningShed) error {
	return c.c.WriteMessage(50, 126, m)
}

func (c WizardhousingClient) PatchHousingGearVault(m *PatchHousingGearVault) error {
	return c.c.WriteMessage(50, 127, m)
}

func (c WizardhousingClient) PatchHousingJewelVault(m *PatchHousingJewelVault) error {
	return c.c.WriteMessage(50, 128, m)
}

func (c WizardhousingClient) PatchHousingMusicObject(m *PatchHousingMusicObject) error {
	return c.c.WriteMessage(50, 129, m)
}

func (c WizardhousingClient) PatchHousingSignObject(m *PatchHousingSignObject) error {
	return c.c.WriteMessage(50, 130, m)
}

func (c WizardhousingClient) PatchHousingTeleporterObject(m *PatchHousingTeleporterObject) error {
	return c.c.WriteMessage(50, 131, m)
}

func (c WizardhousingClient) PatchHousingTrain(m *PatchHousingTrain) error {
	return c.c.WriteMessage(50, 132, m)
}

func (c WizardhousingClient) PatchMonsterArena(m *PatchMonsterArena) error {
	return c.c.WriteMessage(50, 133, m)
}

func (c WizardhousingClient) PatchMusicLoop(m *PatchMusicLoop) error {
	return c.c.WriteMessage(50, 134, m)
}

func (c WizardhousingClient) PatchRemoveTextureRemap(m *PatchRemoveTextureRemap) error {
	return c.c.WriteMessage(50, 135, m)
}

func (c WizardhousingClient) PatchTextureRemap(m *PatchTextureRemap) error {
	return c.c.WriteMessage(50, 136, m)
}

func (c WizardhousingClient) PatchTintHousingObject(m *PatchTintHousingObject) error {
	return c.c.WriteMessage(50, 137, m)
}

func (c WizardhousingClient) PatchTreasureCardPoster(m *PatchTreasureCardPoster) error {
	return c.c.WriteMessage(50, 138, m)
}

func (c WizardhousingClient) PatchTreasureCardVault(m *PatchTreasureCardVault) error {
	return c.c.WriteMessage(50, 139, m)
}

func (c WizardhousingClient) PatchUpdateHousingObject(m *PatchUpdateHousingObject) error {
	return c.c.WriteMessage(50, 140, m)
}

func (c WizardhousingClient) PatchExtendedTile(m *PatchExtendedTile) error {
	return c.c.WriteMessage(50, 141, m)
}

func (c WizardhousingClient) PetTomeScanAttic(m *PetTomeScanAttic) error {
	return c.c.WriteMessage(50, 142, m)
}

func (c WizardhousingClient) PickUpAll(m *PickUpAll) error {
	return c.c.WriteMessage(50, 143, m)
}

func (c WizardhousingClient) PickUpHousingTexture(m *PickUpHousingTexture) error {
	return c.c.WriteMessage(50, 144, m)
}

func (c WizardhousingClient) PlaceHousingFish(m *PlaceHousingFish) error {
	return c.c.WriteMessage(50, 145, m)
}

func (c WizardhousingClient) PlaceHousingObject(m *PlaceHousingObject) error {
	return c.c.WriteMessage(50, 146, m)
}

func (c WizardhousingClient) PlayerTeleportingToFriend(m *PlayerTeleportingToFriend) error {
	return c.c.WriteMessage(50, 147, m)
}

func (c WizardhousingClient) PlayInteractiveMusic(m *PlayInteractiveMusic) error {
	return c.c.WriteMessage(50, 148, m)
}

func (c WizardhousingClient) PlayInteractiveMusic2(m *PlayInteractiveMusic2) error {
	return c.c.WriteMessage(50, 149, m)
}

func (c WizardhousingClient) PlayInteractiveMusicLoop(m *PlayInteractiveMusicLoop) error {
	return c.c.WriteMessage(50, 150, m)
}

func (c WizardhousingClient) PlayInteractiveMusicLooping(m *PlayInteractiveMusicLooping) error {
	return c.c.WriteMessage(50, 151, m)
}

func (c WizardhousingClient) PlayInteractiveMusicLooping2(m *PlayInteractiveMusicLooping2) error {
	return c.c.WriteMessage(50, 152, m)
}

func (c WizardhousingClient) PlayTrainSound(m *PlayTrainSound) error {
	return c.c.WriteMessage(50, 153, m)
}

func (c WizardhousingClient) RemoveFishFromAquarium(m *RemoveFishFromAquarium) error {
	return c.c.WriteMessage(50, 154, m)
}

func (c WizardhousingClient) RemoveHouseMusic(m *RemoveHouseMusic) error {
	return c.c.WriteMessage(50, 155, m)
}

func (c WizardhousingClient) ReportHouse(m *ReportHouse) error {
	return c.c.WriteMessage(50, 156, m)
}

func (c WizardhousingClient) AddRequestAllFish(m *AddRequestAllFish) error {
	return c.c.WriteMessage(50, 157, m)
}

func (c WizardhousingClient) RequestAttic(m *RequestAttic) error {
	return c.c.WriteMessage(50, 158, m)
}

func (c WizardhousingClient) RequestCatchSuccess(m *RequestCatchSuccess) error {
	return c.c.WriteMessage(50, 159, m)
}

func (c WizardhousingClient) RequestDeedZone(m *RequestDeedZone) error {
	return c.c.WriteMessage(50, 160, m)
}

func (c WizardhousingClient) AddRequestFishHistory(m *AddRequestFishHistory) error {
	return c.c.WriteMessage(50, 161, m)
}

func (c WizardhousingClient) RequestHouseOwnerCharacterID(m *RequestHouseOwnerCharacterID) error {
	return c.c.WriteMessage(50, 162, m)
}

func (c WizardhousingClient) RequestHouseTransferList(m *RequestHouseTransferList) error {
	return c.c.WriteMessage(50, 163, m)
}

func (c WizardhousingClient) RequestHousingZone(m *RequestHousingZone) error {
	return c.c.WriteMessage(50, 164, m)
}

func (c WizardhousingClient) RequestHousingZoneTeleport(m *RequestHousingZoneTeleport) error {
	return c.c.WriteMessage(50, 165, m)
}

func (c WizardhousingClient) RequestInteractiveMusic(m *RequestInteractiveMusic) error {
	return c.c.WriteMessage(50, 166, m)
}

func (c WizardhousingClient) RequestIslandSwitch(m *RequestIslandSwitch) error {
	return c.c.WriteMessage(50, 167, m)
}

func (c WizardhousingClient) RequestRestoreState(m *RequestRestoreState) error {
	return c.c.WriteMessage(50, 168, m)
}

func (c WizardhousingClient) RequestSendAway(m *RequestSendAway) error {
	return c.c.WriteMessage(50, 169, m)
}

func (c WizardhousingClient) RequestTeleporterHousingConfirm(m *RequestTeleporterHousingConfirm) error {
	return c.c.WriteMessage(50, 170, m)
}

func (c WizardhousingClient) RequestTeleporterHousingZone(m *RequestTeleporterHousingZone) error {
	return c.c.WriteMessage(50, 171, m)
}

func (c WizardhousingClient) RequestTransition(m *RequestTransition) error {
	return c.c.WriteMessage(50, 172, m)
}

func (c WizardhousingClient) RequestBlobs(m *RequestBlobs) error {
	return c.c.WriteMessage(50, 173, m)
}

func (c WizardhousingClient) Respec(m *Respec) error {
	return c.c.WriteMessage(50, 174, m)
}

func (c WizardhousingClient) SelectHouseMusic(m *SelectHouseMusic) error {
	return c.c.WriteMessage(50, 175, m)
}

func (c WizardhousingClient) SelectMusicStyle(m *SelectMusicStyle) error {
	return c.c.WriteMessage(50, 176, m)
}

func (c WizardhousingClient) SellFishOpen(m *SellFishOpen) error {
	return c.c.WriteMessage(50, 177, m)
}

func (c WizardhousingClient) SellFishRequest(m *SellFishRequest) error {
	return c.c.WriteMessage(50, 178, m)
}

func (c WizardhousingClient) SendHousingObjectStates(m *SendHousingObjectStates) error {
	return c.c.WriteMessage(50, 179, m)
}

func (c WizardhousingClient) SendHousingTextureInfo(m *SendHousingTextureInfo) error {
	return c.c.WriteMessage(50, 180, m)
}

func (c WizardhousingClient) SendBlob(m *SendBlob) error {
	return c.c.WriteMessage(50, 181, m)
}

func (c WizardhousingClient) SetAtticID(m *SetAtticID) error {
	return c.c.WriteMessage(50, 182, m)
}

func (c WizardhousingClient) SetFishingPlayers(m *SetFishingPlayers) error {
	return c.c.WriteMessage(50, 183, m)
}

func (c WizardhousingClient) SetHouseSign(m *SetHouseSign) error {
	return c.c.WriteMessage(50, 184, m)
}

func (c WizardhousingClient) SetHouseTeleporter(m *SetHouseTeleporter) error {
	return c.c.WriteMessage(50, 185, m)
}

func (c WizardhousingClient) SetHousingGameState(m *SetHousingGameState) error {
	return c.c.WriteMessage(50, 186, m)
}

func (c WizardhousingClient) SetHousingPalette(m *SetHousingPalette) error {
	return c.c.WriteMessage(50, 187, m)
}

func (c WizardhousingClient) SetInstanceFish(m *SetInstanceFish) error {
	return c.c.WriteMessage(50, 188, m)
}

func (c WizardhousingClient) InvisibleToFriends(m *InvisibleToFriends) error {
	return c.c.WriteMessage(50, 189, m)
}

func (c WizardhousingClient) SetMusicLoop(m *SetMusicLoop) error {
	return c.c.WriteMessage(50, 190, m)
}

func (c WizardhousingClient) SetNextTrain(m *SetNextTrain) error {
	return c.c.WriteMessage(50, 191, m)
}

func (c WizardhousingClient) SetTileWallpaper(m *SetTileWallpaper) error {
	return c.c.WriteMessage(50, 192, m)
}

func (c WizardhousingClient) ShowFishingCast(m *ShowFishingCast) error {
	return c.c.WriteMessage(50, 193, m)
}

func (c WizardhousingClient) StartHousingGame(m *StartHousingGame) error {
	return c.c.WriteMessage(50, 194, m)
}

func (c WizardhousingClient) StartTrain(m *StartTrain) error {
	return c.c.WriteMessage(50, 195, m)
}

func (c WizardhousingClient) StopInteractiveMusicLoop(m *StopInteractiveMusicLoop) error {
	return c.c.WriteMessage(50, 196, m)
}

func (c WizardhousingClient) SwitchGotoCommons(m *SwitchGotoCommons) error {
	return c.c.WriteMessage(50, 197, m)
}

func (c WizardhousingClient) TeleportedToDeletedLot(m *TeleportedToDeletedLot) error {
	return c.c.WriteMessage(50, 198, m)
}

func (c WizardhousingClient) TeleportToStart(m *TeleportToStart) error {
	return c.c.WriteMessage(50, 199, m)
}

func (c WizardhousingClient) UpdateAtticCount(m *UpdateAtticCount) error {
	return c.c.WriteMessage(50, 200, m)
}

func (c WizardhousingClient) UpdateGardeningXP(m *UpdateGardeningXP) error {
	return c.c.WriteMessage(50, 201, m)
}

func (c WizardhousingClient) UpdateHousingObject(m *UpdateHousingObject) error {
	return c.c.WriteMessage(50, 202, m)
}

func (c WizardhousingClient) UpdateHousingPet(m *UpdateHousingPet) error {
	return c.c.WriteMessage(50, 203, m)
}

func (c WizardhousingClient) UpdateIslandSpace(m *UpdateIslandSpace) error {
	return c.c.WriteMessage(50, 204, m)
}

func (c WizardhousingClient) UpdateMaximumHousingItems(m *UpdateMaximumHousingItems) error {
	return c.c.WriteMessage(50, 205, m)
}

func (c WizardhousingClient) UpdateTrain(m *UpdateTrain) error {
	return c.c.WriteMessage(50, 206, m)
}

type AddFishToAquarium struct {
	GlobalID       uint64
	FishTemplateID uint32
	Size           float32
}

func (s *AddFishToAquarium) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.Size)
	return b.Bytes()
}

func (s *AddFishToAquarium) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Size); err != nil {
		return err
	}
	return nil
}

type AddInstanceFish struct {
	ZoneNameID     uint32
	FishTemplateID uint32
	Size           float32
	FishID         uint32
}

func (s *AddInstanceFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.ZoneNameID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.Size)
	binary.Write(b, binary.LittleEndian, s.FishID)
	return b.Bytes()
}

func (s *AddInstanceFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Size); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishID); err != nil {
		return err
	}
	return nil
}

type AddToTreasureCardPoster struct {
	TreasureCardPosterID  uint64
	SpellTemplateID       uint32
	EnchantmentTemplateID uint32
	Flags                 uint8
}

func (s *AddToTreasureCardPoster) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.TreasureCardPosterID)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.EnchantmentTemplateID)
	binary.Write(b, binary.LittleEndian, s.Flags)
	return b.Bytes()
}

func (s *AddToTreasureCardPoster) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TreasureCardPosterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	return nil
}

type AuditAtticResults struct {
	ItemsAudited uint32
	ItemsRemoved uint32
}

func (s *AuditAtticResults) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.ItemsAudited)
	binary.Write(b, binary.LittleEndian, s.ItemsRemoved)
	return b.Bytes()
}

func (s *AuditAtticResults) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemsAudited); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemsRemoved); err != nil {
		return err
	}
	return nil
}

type BeginFishingCast struct {
	PositionX       float32
	PositionY       float32
	PositionZ       float32
	EndX            float32
	EndY            float32
	EndZ            float32
	Yaw             float32
	SpellTemplateID uint32
	IsRecast        uint8
}

func (s *BeginFishingCast) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 33))
	binary.Write(b, binary.LittleEndian, s.PositionX)
	binary.Write(b, binary.LittleEndian, s.PositionY)
	binary.Write(b, binary.LittleEndian, s.PositionZ)
	binary.Write(b, binary.LittleEndian, s.EndX)
	binary.Write(b, binary.LittleEndian, s.EndY)
	binary.Write(b, binary.LittleEndian, s.EndZ)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.IsRecast)
	return b.Bytes()
}

func (s *BeginFishingCast) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EndX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EndY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EndZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsRecast); err != nil {
		return err
	}
	return nil
}

type BlockPetSpawn struct {
}

func (s *BlockPetSpawn) Marshal() []byte {
	return []byte{}
}

func (s *BlockPetSpawn) Unmarshal(data []byte) error {
	return nil
}

type BuyIslandSpaceConfirm struct {
	Failure    int8
	WebFailure int8
	Credits    int32
}

func (s *BuyIslandSpaceConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	binary.Write(b, binary.LittleEndian, s.Failure)
	binary.Write(b, binary.LittleEndian, s.WebFailure)
	binary.Write(b, binary.LittleEndian, s.Credits)
	return b.Bytes()
}

func (s *BuyIslandSpaceConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type CastleGamesRequest struct {
	GlobalID uint64
}

func (s *CastleGamesRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *CastleGamesRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type CastleGamesRequestGameData struct {
	GlobalID   uint64
	PageNumber uint32
	Data       string
}

func (s *CastleGamesRequestGameData) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.PageNumber)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *CastleGamesRequestGameData) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PageNumber); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleGamesTeleportRejected struct {
}

func (s *CastleGamesTeleportRejected) Marshal() []byte {
	return []byte{}
}

func (s *CastleGamesTeleportRejected) Unmarshal(data []byte) error {
	return nil
}

type CastleMagicCantrip struct {
	GlobalID uint64
}

func (s *CastleMagicCantrip) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *CastleMagicCantrip) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type CastleMagicChangeAction struct {
	GlobalID         uint64
	ActionNumber     uint32
	SpellTemplateID  uint32
	TargetTemplateID uint32
	LocX             float32
	LocY             float32
	LocZ             float32
}

func (s *CastleMagicChangeAction) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 32))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ActionNumber)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.TargetTemplateID)
	binary.Write(b, binary.LittleEndian, s.LocX)
	binary.Write(b, binary.LittleEndian, s.LocY)
	binary.Write(b, binary.LittleEndian, s.LocZ)
	return b.Bytes()
}

func (s *CastleMagicChangeAction) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ActionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	return nil
}

type CastleMagicClear struct {
}

func (s *CastleMagicClear) Marshal() []byte {
	return []byte{}
}

func (s *CastleMagicClear) Unmarshal(data []byte) error {
	return nil
}

type CastleMagicCurrentState struct {
	TargetPlayer uint64
	ChangeBuffer string
	ZoneTime     float32
	OrbFlags     int8
}

func (s *CastleMagicCurrentState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 15+len(s.ChangeBuffer)))
	binary.Write(b, binary.LittleEndian, s.TargetPlayer)
	writeString_50(b, s.ChangeBuffer)
	binary.Write(b, binary.LittleEndian, s.ZoneTime)
	binary.Write(b, binary.LittleEndian, s.OrbFlags)
	return b.Bytes()
}

func (s *CastleMagicCurrentState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetPlayer); err != nil {
		return err
	}
	if s.ChangeBuffer, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OrbFlags); err != nil {
		return err
	}
	return nil
}

type CastleMagicOrb struct {
	OrbFlags int8
}

func (s *CastleMagicOrb) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.OrbFlags)
	return b.Bytes()
}

func (s *CastleMagicOrb) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.OrbFlags); err != nil {
		return err
	}
	return nil
}

type CastleMagicRequestAllowMounts struct {
	State int8
}

func (s *CastleMagicRequestAllowMounts) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.State)
	return b.Bytes()
}

func (s *CastleMagicRequestAllowMounts) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	return nil
}

type CastleMagicRequestAllowPVP struct {
	State int8
}

func (s *CastleMagicRequestAllowPVP) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.State)
	return b.Bytes()
}

func (s *CastleMagicRequestAllowPVP) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	return nil
}

type CastleMagicRequestPlayerTeleport struct {
	TargetPlayerGID uint64
	TargetGID       uint64
}

func (s *CastleMagicRequestPlayerTeleport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.TargetPlayerGID)
	binary.Write(b, binary.LittleEndian, s.TargetGID)
	return b.Bytes()
}

func (s *CastleMagicRequestPlayerTeleport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	return nil
}

type CastleMagicRequestPVPState struct {
	State int8
}

func (s *CastleMagicRequestPVPState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.State)
	return b.Bytes()
}

func (s *CastleMagicRequestPVPState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	return nil
}

type CastleMagicRequestRandom struct {
	Buffer string
}

func (s *CastleMagicRequestRandom) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Buffer)))
	writeString_50(b, s.Buffer)
	return b.Bytes()
}

func (s *CastleMagicRequestRandom) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Buffer, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleMagicRequestUse struct {
	ItemGID uint64
}

func (s *CastleMagicRequestUse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.ItemGID)
	return b.Bytes()
}

func (s *CastleMagicRequestUse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemGID); err != nil {
		return err
	}
	return nil
}

type CastleMagicTutorial struct {
	State int8
}

func (s *CastleMagicTutorial) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.State)
	return b.Bytes()
}

func (s *CastleMagicTutorial) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	return nil
}

type CastleMagicUpdateState struct {
	GlobalID      uint64
	State         uint32
	RandomNumbers uint32
}

func (s *CastleMagicUpdateState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.State)
	binary.Write(b, binary.LittleEndian, s.RandomNumbers)
	return b.Bytes()
}

func (s *CastleMagicUpdateState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RandomNumbers); err != nil {
		return err
	}
	return nil
}

type CastleToursAdd struct {
	GlobalID  uint64
	HouseGID  uint64
	HouseType int8
}

func (s *CastleToursAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.HouseGID)
	binary.Write(b, binary.LittleEndian, s.HouseType)
	return b.Bytes()
}

func (s *CastleToursAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HouseGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HouseType); err != nil {
		return err
	}
	return nil
}

type CastleToursAddFavorite struct {
	GlobalID uint64
	Success  int8
}

func (s *CastleToursAddFavorite) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Success)
	return b.Bytes()
}

func (s *CastleToursAddFavorite) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type CastleToursAddResult struct {
	Status uint32
}

func (s *CastleToursAddResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.Status)
	return b.Bytes()
}

func (s *CastleToursAddResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type CastleToursCSRResults struct {
	Result string
}

func (s *CastleToursCSRResults) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Result)))
	writeString_50(b, s.Result)
	return b.Bytes()
}

func (s *CastleToursCSRResults) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Result, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleToursDeleteCharacter struct {
	CharacterID uint64
}

func (s *CastleToursDeleteCharacter) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	return b.Bytes()
}

func (s *CastleToursDeleteCharacter) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type CastleToursEnableRatingDisplay struct {
	CastleType   int8
	Rating       int8
	FirstDisplay int8
	TemplateID   uint32
	LotGID       uint64
	StructureGID uint64
}

func (s *CastleToursEnableRatingDisplay) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23))
	binary.Write(b, binary.LittleEndian, s.CastleType)
	binary.Write(b, binary.LittleEndian, s.Rating)
	binary.Write(b, binary.LittleEndian, s.FirstDisplay)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	binary.Write(b, binary.LittleEndian, s.LotGID)
	binary.Write(b, binary.LittleEndian, s.StructureGID)
	return b.Bytes()
}

func (s *CastleToursEnableRatingDisplay) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CastleType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Rating); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FirstDisplay); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LotGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StructureGID); err != nil {
		return err
	}
	return nil
}

type CastleToursFavoriteInfo struct {
	CharacterID  uint64
	FavoriteData string
}

func (s *CastleToursFavoriteInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.FavoriteData)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_50(b, s.FavoriteData)
	return b.Bytes()
}

func (s *CastleToursFavoriteInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.FavoriteData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleToursFavoriteInfo2 struct {
	CharacterID  uint64
	FavoriteData string
}

func (s *CastleToursFavoriteInfo2) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.FavoriteData)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_50(b, s.FavoriteData)
	return b.Bytes()
}

func (s *CastleToursFavoriteInfo2) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.FavoriteData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleToursLeaderboardResponse struct {
	CharacterID     uint64
	LeaderboardType int8
	SortType        int8
	PageNumber      uint32
	LeaderboardData string
}

func (s *CastleToursLeaderboardResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.LeaderboardData)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.LeaderboardType)
	binary.Write(b, binary.LittleEndian, s.SortType)
	binary.Write(b, binary.LittleEndian, s.PageNumber)
	writeString_50(b, s.LeaderboardData)
	return b.Bytes()
}

func (s *CastleToursLeaderboardResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LeaderboardType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SortType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PageNumber); err != nil {
		return err
	}
	if s.LeaderboardData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleToursPlayerBanned struct {
	GlobalID uint64
}

func (s *CastleToursPlayerBanned) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *CastleToursPlayerBanned) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type CastleToursPostRateHouse struct {
	CharacterID    uint64
	BadgeCredit    int8
	MaxBadgeCredit int8
}

func (s *CastleToursPostRateHouse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.BadgeCredit)
	binary.Write(b, binary.LittleEndian, s.MaxBadgeCredit)
	return b.Bytes()
}

func (s *CastleToursPostRateHouse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BadgeCredit); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaxBadgeCredit); err != nil {
		return err
	}
	return nil
}

type CastleToursPreAdd struct {
	GlobalID  uint64
	HouseGID  uint64
	HouseType int8
}

func (s *CastleToursPreAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.HouseGID)
	binary.Write(b, binary.LittleEndian, s.HouseType)
	return b.Bytes()
}

func (s *CastleToursPreAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HouseGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HouseType); err != nil {
		return err
	}
	return nil
}

type CastleToursRatingDisplay struct {
}

func (s *CastleToursRatingDisplay) Marshal() []byte {
	return []byte{}
}

func (s *CastleToursRatingDisplay) Unmarshal(data []byte) error {
	return nil
}

type CastleToursRemove struct {
	GlobalID uint64
	HouseGID uint64
}

func (s *CastleToursRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.HouseGID)
	return b.Bytes()
}

func (s *CastleToursRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HouseGID); err != nil {
		return err
	}
	return nil
}

type CastleToursRemoveFavorite struct {
	GlobalID        uint64
	OwningPlayerGID uint64
	HouseTemplateID uint32
}

func (s *CastleToursRemoveFavorite) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.OwningPlayerGID)
	binary.Write(b, binary.LittleEndian, s.HouseTemplateID)
	return b.Bytes()
}

func (s *CastleToursRemoveFavorite) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwningPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HouseTemplateID); err != nil {
		return err
	}
	return nil
}

type CastleToursRemoveResult struct {
	Status uint32
}

func (s *CastleToursRemoveResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.Status)
	return b.Bytes()
}

func (s *CastleToursRemoveResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type CastleToursRequest struct {
	GlobalID uint64
}

func (s *CastleToursRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *CastleToursRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type CastleToursRequestFriends struct {
	CharacterID uint64
	Data        string
}

func (s *CastleToursRequestFriends) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *CastleToursRequestFriends) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleToursRequestLeaderboard struct {
	LeaderboardType int8
	SortType        int8
	PageNumber      uint32
	LeaderboardData string
}

func (s *CastleToursRequestLeaderboard) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8+len(s.LeaderboardData)))
	binary.Write(b, binary.LittleEndian, s.LeaderboardType)
	binary.Write(b, binary.LittleEndian, s.SortType)
	binary.Write(b, binary.LittleEndian, s.PageNumber)
	writeString_50(b, s.LeaderboardData)
	return b.Bytes()
}

func (s *CastleToursRequestLeaderboard) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LeaderboardType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SortType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PageNumber); err != nil {
		return err
	}
	if s.LeaderboardData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleToursRequestMyCastleData struct {
	GlobalID uint64
	Data     string
}

func (s *CastleToursRequestMyCastleData) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *CastleToursRequestMyCastleData) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type CastleToursRequestMyCastles struct {
	GlobalID uint64
	Data     string
	Days     int8
}

func (s *CastleToursRequestMyCastles) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_50(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.Days)
	return b.Bytes()
}

func (s *CastleToursRequestMyCastles) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Days); err != nil {
		return err
	}
	return nil
}

type CastleToursSendRating struct {
	Rating int8
}

func (s *CastleToursSendRating) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Rating)
	return b.Bytes()
}

func (s *CastleToursSendRating) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Rating); err != nil {
		return err
	}
	return nil
}

type CastleToursTeleportPlayer struct {
	CharacterID         uint64
	TeleportData        string
	Source              int8
	LeaderboardTeleport int8
}

func (s *CastleToursTeleportPlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.TeleportData)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	writeString_50(b, s.TeleportData)
	binary.Write(b, binary.LittleEndian, s.Source)
	binary.Write(b, binary.LittleEndian, s.LeaderboardTeleport)
	return b.Bytes()
}

func (s *CastleToursTeleportPlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.TeleportData, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Source); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LeaderboardTeleport); err != nil {
		return err
	}
	return nil
}

type CastleToursTeleportRejected struct {
}

func (s *CastleToursTeleportRejected) Marshal() []byte {
	return []byte{}
}

func (s *CastleToursTeleportRejected) Unmarshal(data []byte) error {
	return nil
}

type CastleToursVisitCastle struct {
	VisitType int8
	HouseType int8
}

func (s *CastleToursVisitCastle) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2))
	binary.Write(b, binary.LittleEndian, s.VisitType)
	binary.Write(b, binary.LittleEndian, s.HouseType)
	return b.Bytes()
}

func (s *CastleToursVisitCastle) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.VisitType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HouseType); err != nil {
		return err
	}
	return nil
}

type CatchFish struct {
	SpellTemplateID uint32
	IsTreasureCard  uint8
	FishingPassport uint32
	FishID          uint32
}

func (s *CatchFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.IsTreasureCard)
	binary.Write(b, binary.LittleEndian, s.FishingPassport)
	binary.Write(b, binary.LittleEndian, s.FishID)
	return b.Bytes()
}

func (s *CatchFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsTreasureCard); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishingPassport); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishID); err != nil {
		return err
	}
	return nil
}

type CatchOfTheDayOpen struct {
	GlobalID           uint64
	FishTemplateID     uint32
	CatchOfTheDayBonus uint32
}

func (s *CatchOfTheDayOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.CatchOfTheDayBonus)
	return b.Bytes()
}

func (s *CatchOfTheDayOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CatchOfTheDayBonus); err != nil {
		return err
	}
	return nil
}

type CatchSuccess struct {
	FishID uint32
	Assist uint8
}

func (s *CatchSuccess) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.FishID)
	binary.Write(b, binary.LittleEndian, s.Assist)
	return b.Bytes()
}

func (s *CatchSuccess) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.FishID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Assist); err != nil {
		return err
	}
	return nil
}

type ChangeBreadCrumbRequest struct {
	BreadCrumbGID  uint64
	OtherGID       uint64
	AddPet         int8
	LinkBreadCrumb int8
	SetPetBehavior int8
}

func (s *ChangeBreadCrumbRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19))
	binary.Write(b, binary.LittleEndian, s.BreadCrumbGID)
	binary.Write(b, binary.LittleEndian, s.OtherGID)
	binary.Write(b, binary.LittleEndian, s.AddPet)
	binary.Write(b, binary.LittleEndian, s.LinkBreadCrumb)
	binary.Write(b, binary.LittleEndian, s.SetPetBehavior)
	return b.Bytes()
}

func (s *ChangeBreadCrumbRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.BreadCrumbGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OtherGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AddPet); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LinkBreadCrumb); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SetPetBehavior); err != nil {
		return err
	}
	return nil
}

type CreateTestIsland struct {
	DeedGID      uint32
	StructureGID uint32
}

func (s *CreateTestIsland) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.DeedGID)
	binary.Write(b, binary.LittleEndian, s.StructureGID)
	return b.Bytes()
}

func (s *CreateTestIsland) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DeedGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StructureGID); err != nil {
		return err
	}
	return nil
}

type DailyPvPOpen struct {
}

func (s *DailyPvPOpen) Marshal() []byte {
	return []byte{}
}

func (s *DailyPvPOpen) Unmarshal(data []byte) error {
	return nil
}

type DailyQuestCompleted struct {
	QuestIndex      uint32
	CurrentCircle   uint8
	ConsecutiveDays uint8
	Flags           uint8
	ItemTemplateID  uint32
}

func (s *DailyQuestCompleted) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11))
	binary.Write(b, binary.LittleEndian, s.QuestIndex)
	binary.Write(b, binary.LittleEndian, s.CurrentCircle)
	binary.Write(b, binary.LittleEndian, s.ConsecutiveDays)
	binary.Write(b, binary.LittleEndian, s.Flags)
	binary.Write(b, binary.LittleEndian, s.ItemTemplateID)
	return b.Bytes()
}

func (s *DailyQuestCompleted) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.QuestIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CurrentCircle); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ConsecutiveDays); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplateID); err != nil {
		return err
	}
	return nil
}

type DailyQuestCSRData struct {
	QuestData string
}

func (s *DailyQuestCSRData) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.QuestData)))
	writeString_50(b, s.QuestData)
	return b.Bytes()
}

func (s *DailyQuestCSRData) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.QuestData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type DailyQuestExplore struct {
	LocX   float32
	LocY   float32
	LocZ   float32
	Radius float32
}

func (s *DailyQuestExplore) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.LocX)
	binary.Write(b, binary.LittleEndian, s.LocY)
	binary.Write(b, binary.LittleEndian, s.LocZ)
	binary.Write(b, binary.LittleEndian, s.Radius)
	return b.Bytes()
}

func (s *DailyQuestExplore) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Radius); err != nil {
		return err
	}
	return nil
}

type DailyQuestOpen struct {
}

func (s *DailyQuestOpen) Marshal() []byte {
	return []byte{}
}

func (s *DailyQuestOpen) Unmarshal(data []byte) error {
	return nil
}

type DeleteEquippedHousingItem struct {
	ObjectGID uint64
	ItemGID   uint64
	SlotName  string
}

func (s *DeleteEquippedHousingItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.SlotName)))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.ItemGID)
	writeString_50(b, s.SlotName)
	return b.Bytes()
}

func (s *DeleteEquippedHousingItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemGID); err != nil {
		return err
	}
	if s.SlotName, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type DeleteFish struct {
	GlobalID       uint64
	FishTemplateID uint32
	Size           float32
}

func (s *DeleteFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.Size)
	return b.Bytes()
}

func (s *DeleteFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Size); err != nil {
		return err
	}
	return nil
}

type DeleteFromAttic struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *DeleteFromAttic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	return b.Bytes()
}

func (s *DeleteFromAttic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type DeleteMusicLoop struct {
	ObjectGID  uint64
	LoopNumber uint32
}

func (s *DeleteMusicLoop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.LoopNumber)
	return b.Bytes()
}

func (s *DeleteMusicLoop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LoopNumber); err != nil {
		return err
	}
	return nil
}

type DisplayCatchFish struct {
	ObjectGID       uint64
	FishTemplateID  uint32
	Size            float32
	SpellTemplateID uint32
}

func (s *DisplayCatchFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.Size)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	return b.Bytes()
}

func (s *DisplayCatchFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Size); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	return nil
}

type DisplayCaughtFish struct {
	ObjectGID          uint64
	FishTemplateID     uint32
	Length             float32
	IsSmallFry         uint8
	IsWopper           uint8
	LootData           string
	Energy             uint8
	IsTournamentFish   uint8
	CatchOfTheDayBonus uint32
}

func (s *DisplayCaughtFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 26+len(s.LootData)))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.Length)
	binary.Write(b, binary.LittleEndian, s.IsSmallFry)
	binary.Write(b, binary.LittleEndian, s.IsWopper)
	writeString_50(b, s.LootData)
	binary.Write(b, binary.LittleEndian, s.Energy)
	binary.Write(b, binary.LittleEndian, s.IsTournamentFish)
	binary.Write(b, binary.LittleEndian, s.CatchOfTheDayBonus)
	return b.Bytes()
}

func (s *DisplayCaughtFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Length); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsSmallFry); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsWopper); err != nil {
		return err
	}
	if s.LootData, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Energy); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsTournamentFish); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CatchOfTheDayBonus); err != nil {
		return err
	}
	return nil
}

type DisposableDungeonNoOwner struct {
}

func (s *DisposableDungeonNoOwner) Marshal() []byte {
	return []byte{}
}

func (s *DisposableDungeonNoOwner) Unmarshal(data []byte) error {
	return nil
}

type DailyPvPUpdate struct {
	ConsecutiveDays uint8
	Flags           uint8
	TimeLeft        uint32
}

func (s *DailyPvPUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	binary.Write(b, binary.LittleEndian, s.ConsecutiveDays)
	binary.Write(b, binary.LittleEndian, s.Flags)
	binary.Write(b, binary.LittleEndian, s.TimeLeft)
	return b.Bytes()
}

func (s *DailyPvPUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ConsecutiveDays); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TimeLeft); err != nil {
		return err
	}
	return nil
}

type DailyQuestUpdate struct {
	QuestIndex      uint32
	CurrentCircle   uint8
	ConsecutiveDays uint8
	Flags           uint8
	TimeLeft        uint32
}

func (s *DailyQuestUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11))
	binary.Write(b, binary.LittleEndian, s.QuestIndex)
	binary.Write(b, binary.LittleEndian, s.CurrentCircle)
	binary.Write(b, binary.LittleEndian, s.ConsecutiveDays)
	binary.Write(b, binary.LittleEndian, s.Flags)
	binary.Write(b, binary.LittleEndian, s.TimeLeft)
	return b.Bytes()
}

func (s *DailyQuestUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.QuestIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CurrentCircle); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ConsecutiveDays); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TimeLeft); err != nil {
		return err
	}
	return nil
}

type EmptyLotCheck struct {
	EmptyLotGID uint64
}

func (s *EmptyLotCheck) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.EmptyLotGID)
	return b.Bytes()
}

func (s *EmptyLotCheck) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.EmptyLotGID); err != nil {
		return err
	}
	return nil
}

type EndFishingCast struct {
	ObjectGID uint64
}

func (s *EndFishingCast) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	return b.Bytes()
}

func (s *EndFishingCast) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	return nil
}

type EnterTournamentFish struct {
	FishTemplateID uint32
	FishSize       float32
}

func (s *EnterTournamentFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.FishSize)
	return b.Bytes()
}

func (s *EnterTournamentFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishSize); err != nil {
		return err
	}
	return nil
}

type EnterTournamentFishResult struct {
	Position int32
}

func (s *EnterTournamentFishResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.Position)
	return b.Bytes()
}

func (s *EnterTournamentFishResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Position); err != nil {
		return err
	}
	return nil
}

type EquipHouseMusic struct {
	MusicPlayerGID uint64
	MusicGID       uint64
}

func (s *EquipHouseMusic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.MusicPlayerGID)
	binary.Write(b, binary.LittleEndian, s.MusicGID)
	return b.Bytes()
}

func (s *EquipHouseMusic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MusicPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MusicGID); err != nil {
		return err
	}
	return nil
}

type EquipMannequinItem struct {
	MannequinGID uint64
	IsEquip      int32
	ItemID       uint64
	SlotName     string
}

func (s *EquipMannequinItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.SlotName)))
	binary.Write(b, binary.LittleEndian, s.MannequinGID)
	binary.Write(b, binary.LittleEndian, s.IsEquip)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	writeString_50(b, s.SlotName)
	return b.Bytes()
}

func (s *EquipMannequinItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MannequinGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsEquip); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if s.SlotName, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type FishEscaped struct {
	FishID uint32
}

func (s *FishEscaped) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.FishID)
	return b.Bytes()
}

func (s *FishEscaped) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.FishID); err != nil {
		return err
	}
	return nil
}

type FishingCSRResults struct {
	Result string
}

func (s *FishingCSRResults) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Result)))
	writeString_50(b, s.Result)
	return b.Bytes()
}

func (s *FishingCSRResults) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Result, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type FishingSpellCast struct {
	SpellTemplateID uint32
	IsTreasureCard  uint8
	FishingPassport uint32
	IsRecast        uint8
}

func (s *FishingSpellCast) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10))
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.IsTreasureCard)
	binary.Write(b, binary.LittleEndian, s.FishingPassport)
	binary.Write(b, binary.LittleEndian, s.IsRecast)
	return b.Bytes()
}

func (s *FishingSpellCast) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsTreasureCard); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishingPassport); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsRecast); err != nil {
		return err
	}
	return nil
}

type FishTournamentLeaderBoardOpen struct {
	ThisWeeksExpireTime uint32
	LastWeeksExpireTime uint32
}

func (s *FishTournamentLeaderBoardOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.ThisWeeksExpireTime)
	binary.Write(b, binary.LittleEndian, s.LastWeeksExpireTime)
	return b.Bytes()
}

func (s *FishTournamentLeaderBoardOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ThisWeeksExpireTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LastWeeksExpireTime); err != nil {
		return err
	}
	return nil
}

type FishTournamentLeaderBoardRequest struct {
	ExpireTime uint32
	PageNumber uint32
	Data       string
}

func (s *FishTournamentLeaderBoardRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.ExpireTime)
	binary.Write(b, binary.LittleEndian, s.PageNumber)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *FishTournamentLeaderBoardRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ExpireTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PageNumber); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type FishTournamentOpen struct {
	GlobalID       uint64
	FishTemplateID uint32
	FishSizeTarget uint32
}

func (s *FishTournamentOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.FishSizeTarget)
	return b.Bytes()
}

func (s *FishTournamentOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishSizeTarget); err != nil {
		return err
	}
	return nil
}

type GardeningCastSpell struct {
	SpellTemplateID uint32
	PlayerGID       uint64
	PositionX       float32
	PositionY       float32
	PositionZ       float32
}

func (s *GardeningCastSpell) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.PlayerGID)
	binary.Write(b, binary.LittleEndian, s.PositionX)
	binary.Write(b, binary.LittleEndian, s.PositionY)
	binary.Write(b, binary.LittleEndian, s.PositionZ)
	return b.Bytes()
}

func (s *GardeningCastSpell) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionZ); err != nil {
		return err
	}
	return nil
}

type GardeningCommand struct {
	Command    uint8
	PositionX  float32
	PositionY  float32
	PositionZ  float32
	TemplateID uint32
	ObjectGID  uint64
	ZoneGID    uint64
}

func (s *GardeningCommand) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 33))
	binary.Write(b, binary.LittleEndian, s.Command)
	binary.Write(b, binary.LittleEndian, s.PositionX)
	binary.Write(b, binary.LittleEndian, s.PositionY)
	binary.Write(b, binary.LittleEndian, s.PositionZ)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.ZoneGID)
	return b.Bytes()
}

func (s *GardeningCommand) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Command); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneGID); err != nil {
		return err
	}
	return nil
}

type GardeningCommandResponse struct {
}

func (s *GardeningCommandResponse) Marshal() []byte {
	return []byte{}
}

func (s *GardeningCommandResponse) Unmarshal(data []byte) error {
	return nil
}

type GardeningCSRResults struct {
	Result string
}

func (s *GardeningCSRResults) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Result)))
	writeString_50(b, s.Result)
	return b.Bytes()
}

func (s *GardeningCSRResults) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Result, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type GardeningHarvestPlant struct {
	PositionX       float32
	PositionY       float32
	PositionZ       float32
	PlantTemplateID uint32
}

func (s *GardeningHarvestPlant) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.PositionX)
	binary.Write(b, binary.LittleEndian, s.PositionY)
	binary.Write(b, binary.LittleEndian, s.PositionZ)
	binary.Write(b, binary.LittleEndian, s.PlantTemplateID)
	return b.Bytes()
}

func (s *GardeningHarvestPlant) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlantTemplateID); err != nil {
		return err
	}
	return nil
}

type GardeningHarvestPlantSecondSpring struct {
	PositionX float32
	PositionY float32
	PositionZ float32
}

func (s *GardeningHarvestPlantSecondSpring) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.PositionX)
	binary.Write(b, binary.LittleEndian, s.PositionY)
	binary.Write(b, binary.LittleEndian, s.PositionZ)
	return b.Bytes()
}

func (s *GardeningHarvestPlantSecondSpring) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionZ); err != nil {
		return err
	}
	return nil
}

type GardeningSpellFizzle struct {
	FizzleType uint8
}

func (s *GardeningSpellFizzle) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.FizzleType)
	return b.Bytes()
}

func (s *GardeningSpellFizzle) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.FizzleType); err != nil {
		return err
	}
	return nil
}

type GardeningSpellInspect struct {
	PositionX float32
	PositionY float32
	PositionZ float32
	Progress  float32
}

func (s *GardeningSpellInspect) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.PositionX)
	binary.Write(b, binary.LittleEndian, s.PositionY)
	binary.Write(b, binary.LittleEndian, s.PositionZ)
	binary.Write(b, binary.LittleEndian, s.Progress)
	return b.Bytes()
}

func (s *GardeningSpellInspect) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Progress); err != nil {
		return err
	}
	return nil
}

type GardenLevelUp struct {
	GlobalID uint64
	NewLevel int32
}

func (s *GardenLevelUp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.NewLevel)
	return b.Bytes()
}

func (s *GardenLevelUp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewLevel); err != nil {
		return err
	}
	return nil
}

type HideHousingObject struct {
	ObjectGID uint64
	Hide      int32
}

func (s *HideHousingObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.Hide)
	return b.Bytes()
}

func (s *HideHousingObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Hide); err != nil {
		return err
	}
	return nil
}

type HousingGameRequestPoweruplocations struct {
	ZoneGID uint64
	Data    string
}

func (s *HousingGameRequestPoweruplocations) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.ZoneGID)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *HousingGameRequestPoweruplocations) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneGID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type HousingGameStatusUpdate struct {
	Flags uint8
}

func (s *HousingGameStatusUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Flags)
	return b.Bytes()
}

func (s *HousingGameStatusUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	return nil
}

type HousingGameUsePowerup struct {
}

func (s *HousingGameUsePowerup) Marshal() []byte {
	return []byte{}
}

func (s *HousingGameUsePowerup) Unmarshal(data []byte) error {
	return nil
}

type HousingObjectNoPickup struct {
}

func (s *HousingObjectNoPickup) Marshal() []byte {
	return []byte{}
}

func (s *HousingObjectNoPickup) Unmarshal(data []byte) error {
	return nil
}

type HousingObjectProximity struct {
	ObjectID uint64
	Inside   int32
}

func (s *HousingObjectProximity) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.Inside)
	return b.Bytes()
}

func (s *HousingObjectProximity) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Inside); err != nil {
		return err
	}
	return nil
}

type HousingZonePlayer struct {
	HousingPlayer uint64
	AddPlayer     int8
}

func (s *HousingZonePlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.HousingPlayer)
	binary.Write(b, binary.LittleEndian, s.AddPlayer)
	return b.Bytes()
}

func (s *HousingZonePlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.HousingPlayer); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AddPlayer); err != nil {
		return err
	}
	return nil
}

type HousingZonePlayerList struct {
	PlayerListBuffer string
	ZoneGID          uint64
	OrbFlags         int8
}

func (s *HousingZonePlayerList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.PlayerListBuffer)))
	writeString_50(b, s.PlayerListBuffer)
	binary.Write(b, binary.LittleEndian, s.ZoneGID)
	binary.Write(b, binary.LittleEndian, s.OrbFlags)
	return b.Bytes()
}

func (s *HousingZonePlayerList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PlayerListBuffer, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OrbFlags); err != nil {
		return err
	}
	return nil
}

type InteractiveMusicError struct {
	ObjectGID uint64
	Error     int8
}

func (s *InteractiveMusicError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *InteractiveMusicError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type InteractiveMusicInUse struct {
	PlayerGID uint64
	InUse     int8
}

func (s *InteractiveMusicInUse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.PlayerGID)
	binary.Write(b, binary.LittleEndian, s.InUse)
	return b.Bytes()
}

func (s *InteractiveMusicInUse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.InUse); err != nil {
		return err
	}
	return nil
}

type InteractiveMusicInUse2 struct {
	Data string
}

func (s *InteractiveMusicInUse2) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *InteractiveMusicInUse2) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type IslandSpaceBuyRequest struct {
	GlobalID   uint64
	WebFailure int8
	Credits    int32
}

func (s *IslandSpaceBuyRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.WebFailure)
	binary.Write(b, binary.LittleEndian, s.Credits)
	return b.Bytes()
}

func (s *IslandSpaceBuyRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type IslandSpaceShopOpen struct {
	GlobalID   uint64
	WebFailure int8
	Credits    int32
}

func (s *IslandSpaceShopOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.WebFailure)
	binary.Write(b, binary.LittleEndian, s.Credits)
	return b.Bytes()
}

func (s *IslandSpaceShopOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type MissFish struct {
	SpellTemplateID uint32
	IsTreasureCard  uint8
}

func (s *MissFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.IsTreasureCard)
	return b.Bytes()
}

func (s *MissFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsTreasureCard); err != nil {
		return err
	}
	return nil
}

type MonsterMagicAddMonster struct {
	GlobalID        uint64
	SpellTemplateID uint32
}

func (s *MonsterMagicAddMonster) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	return b.Bytes()
}

func (s *MonsterMagicAddMonster) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	return nil
}

type MonsterMagicEraseMonster struct {
	GlobalID      uint64
	MobTemplateID uint32
}

func (s *MonsterMagicEraseMonster) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.MobTemplateID)
	return b.Bytes()
}

func (s *MonsterMagicEraseMonster) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MobTemplateID); err != nil {
		return err
	}
	return nil
}

type MoveFromAttic struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *MoveFromAttic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	return b.Bytes()
}

func (s *MoveFromAttic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type MoveGearFromGearVault struct {
	GearVaultGID uint64
	GearData     string
}

func (s *MoveGearFromGearVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.GearData)))
	binary.Write(b, binary.LittleEndian, s.GearVaultGID)
	writeString_50(b, s.GearData)
	return b.Bytes()
}

func (s *MoveGearFromGearVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GearVaultGID); err != nil {
		return err
	}
	if s.GearData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type MoveGearToGearVault struct {
	GearVaultGID uint64
	GearGID      uint64
}

func (s *MoveGearToGearVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GearVaultGID)
	binary.Write(b, binary.LittleEndian, s.GearGID)
	return b.Bytes()
}

func (s *MoveGearToGearVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GearVaultGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GearGID); err != nil {
		return err
	}
	return nil
}

type MoveJewelFromJewelVault struct {
	JewelVaultID    uint64
	JewelTemplateID uint32
	Count           uint32
}

func (s *MoveJewelFromJewelVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.JewelVaultID)
	binary.Write(b, binary.LittleEndian, s.JewelTemplateID)
	binary.Write(b, binary.LittleEndian, s.Count)
	return b.Bytes()
}

func (s *MoveJewelFromJewelVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JewelVaultID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.JewelTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	return nil
}

type MoveJewelToJewelVault struct {
	JewelVaultID    uint64
	JewelTemplateID uint32
	Count           uint32
}

func (s *MoveJewelToJewelVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.JewelVaultID)
	binary.Write(b, binary.LittleEndian, s.JewelTemplateID)
	binary.Write(b, binary.LittleEndian, s.Count)
	return b.Bytes()
}

func (s *MoveJewelToJewelVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.JewelVaultID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.JewelTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	return nil
}

type MoveSeedFromGardeningShed struct {
	GardeningShedID uint64
	SeedTemplateID  uint32
	Count           uint32
}

func (s *MoveSeedFromGardeningShed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GardeningShedID)
	binary.Write(b, binary.LittleEndian, s.SeedTemplateID)
	binary.Write(b, binary.LittleEndian, s.Count)
	return b.Bytes()
}

func (s *MoveSeedFromGardeningShed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GardeningShedID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SeedTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	return nil
}

type MoveSeedToGardeningShed struct {
	GardeningShedID uint64
	SeedTemplateID  uint32
	Count           uint32
}

func (s *MoveSeedToGardeningShed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GardeningShedID)
	binary.Write(b, binary.LittleEndian, s.SeedTemplateID)
	binary.Write(b, binary.LittleEndian, s.Count)
	return b.Bytes()
}

func (s *MoveSeedToGardeningShed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GardeningShedID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SeedTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	return nil
}

type MoveTCFromTCVault struct {
	TCVaultID             uint64
	SpellTemplateID       uint32
	EnchantmentTemplateID uint32
	Count                 uint32
}

func (s *MoveTCFromTCVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.TCVaultID)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.EnchantmentTemplateID)
	binary.Write(b, binary.LittleEndian, s.Count)
	return b.Bytes()
}

func (s *MoveTCFromTCVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TCVaultID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	return nil
}

type MoveTCToTCVault struct {
	TCVaultID             uint64
	SpellTemplateID       uint32
	EnchantmentTemplateID uint32
	Count                 uint32
}

func (s *MoveTCToTCVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.TCVaultID)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.EnchantmentTemplateID)
	binary.Write(b, binary.LittleEndian, s.Count)
	return b.Bytes()
}

func (s *MoveTCToTCVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TCVaultID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	return nil
}

type MoveToAttic struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *MoveToAttic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	return b.Bytes()
}

func (s *MoveToAttic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type NoFishSpace struct {
	GameObjectID uint64
}

func (s *NoFishSpace) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GameObjectID)
	return b.Bytes()
}

func (s *NoFishSpace) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameObjectID); err != nil {
		return err
	}
	return nil
}

type PatchAddAttic struct {
	BlobGID           uint64
	ObjectID          uint64
	SubType           string
	PackageNumber     uint32
	VersionNumber     uint32
	GIDID             uint32
	Data              string
	PrimaryColorIndex int8
}

func (s *PatchAddAttic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 33+len(s.SubType)+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.BlobGID)
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	writeString_50(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.PrimaryColorIndex)
	return b.Bytes()
}

func (s *PatchAddAttic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.BlobGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PrimaryColorIndex); err != nil {
		return err
	}
	return nil
}

type PatchAddHousingObject struct {
	ObjectID      uint64
	LocX          float32
	LocY          float32
	LocZ          float32
	Yaw           float32
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
	Data          string
	ColorBits     int8
}

func (s *PatchAddHousingObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 41+len(s.SubType)+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.LocX)
	binary.Write(b, binary.LittleEndian, s.LocY)
	binary.Write(b, binary.LittleEndian, s.LocZ)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	writeString_50(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.ColorBits)
	return b.Bytes()
}

func (s *PatchAddHousingObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ColorBits); err != nil {
		return err
	}
	return nil
}

type PatchAquarium struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchAquarium) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchAquarium) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchCastleMagic struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchCastleMagic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchCastleMagic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchDeleteAttic struct {
	BlobGID       uint64
	ObjectID      uint64
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchDeleteAttic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 30+len(s.SubType)))
	binary.Write(b, binary.LittleEndian, s.BlobGID)
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchDeleteAttic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.BlobGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchDeleteHousingObject struct {
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchDeleteHousingObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.SubType)))
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchDeleteHousingObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchEquipHousingObject struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchEquipHousingObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchEquipHousingObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchGardening struct {
	Command       uint8
	PositionX     float32
	PositionY     float32
	PositionZ     float32
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
	TemplateID    uint32
	Time          uint32
}

func (s *PatchGardening) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 33))
	binary.Write(b, binary.LittleEndian, s.Command)
	binary.Write(b, binary.LittleEndian, s.PositionX)
	binary.Write(b, binary.LittleEndian, s.PositionY)
	binary.Write(b, binary.LittleEndian, s.PositionZ)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	binary.Write(b, binary.LittleEndian, s.Time)
	return b.Bytes()
}

func (s *PatchGardening) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Command); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Time); err != nil {
		return err
	}
	return nil
}

type PatchHouse struct {
	DeedTemplateID uint32
}

func (s *PatchHouse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.DeedTemplateID)
	return b.Bytes()
}

func (s *PatchHouse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DeedTemplateID); err != nil {
		return err
	}
	return nil
}

type PatchHousingBreadCrumb struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchHousingBreadCrumb) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchHousingBreadCrumb) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchHousingGardeningShed struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchHousingGardeningShed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchHousingGardeningShed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchHousingGearVault struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchHousingGearVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchHousingGearVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchHousingJewelVault struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchHousingJewelVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchHousingJewelVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchHousingMusicObject struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchHousingMusicObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchHousingMusicObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchHousingSignObject struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchHousingSignObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchHousingSignObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchHousingTeleporterObject struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchHousingTeleporterObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchHousingTeleporterObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchHousingTrain struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchHousingTrain) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchHousingTrain) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchMonsterArena struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchMonsterArena) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchMonsterArena) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchMusicLoop struct {
	SubType       string
	MusicData     string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
	ObjectID      uint64
}

func (s *PatchMusicLoop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.SubType)+len(s.MusicData)))
	writeString_50(b, s.SubType)
	writeString_50(b, s.MusicData)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	return b.Bytes()
}

func (s *PatchMusicLoop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if s.MusicData, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	return nil
}

type PatchRemoveTextureRemap struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
	RemapIndex    uint32
	TextureType   uint32
}

func (s *PatchRemoveTextureRemap) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	binary.Write(b, binary.LittleEndian, s.RemapIndex)
	binary.Write(b, binary.LittleEndian, s.TextureType)
	return b.Bytes()
}

func (s *PatchRemoveTextureRemap) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RemapIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TextureType); err != nil {
		return err
	}
	return nil
}

type PatchTextureRemap struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchTextureRemap) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchTextureRemap) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchTintHousingObject struct {
	SubType       string
	ColorBits     int8
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
	ObjectID      uint64
}

func (s *PatchTintHousingObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23+len(s.SubType)))
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.ColorBits)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	return b.Bytes()
}

func (s *PatchTintHousingObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ColorBits); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	return nil
}

type PatchTreasureCardPoster struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchTreasureCardPoster) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchTreasureCardPoster) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchTreasureCardVault struct {
	Data          string
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
}

func (s *PatchTreasureCardVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)+len(s.SubType)))
	writeString_50(b, s.Data)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	return b.Bytes()
}

func (s *PatchTreasureCardVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	return nil
}

type PatchUpdateHousingObject struct {
	LocX             float32
	LocY             float32
	LocZ             float32
	Yaw              float32
	SubType          string
	PackageNumber    uint32
	VersionNumber    uint32
	GIDID            uint32
	ObjectID         uint64
	SwitchTemplateID int8
	UseExtendedYaw   int8
	Scale            float32
}

func (s *PatchUpdateHousingObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 44+len(s.SubType)))
	binary.Write(b, binary.LittleEndian, s.LocX)
	binary.Write(b, binary.LittleEndian, s.LocY)
	binary.Write(b, binary.LittleEndian, s.LocZ)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.SwitchTemplateID)
	binary.Write(b, binary.LittleEndian, s.UseExtendedYaw)
	binary.Write(b, binary.LittleEndian, s.Scale)
	return b.Bytes()
}

func (s *PatchUpdateHousingObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SwitchTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseExtendedYaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Scale); err != nil {
		return err
	}
	return nil
}

type PatchExtendedTile struct {
	SubType       string
	PackageNumber uint32
	VersionNumber uint32
	GIDID         uint32
	RemapIndex    int8
	IsWallpaper   int8
	ObjectID      uint64
}

func (s *PatchExtendedTile) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.SubType)))
	writeString_50(b, s.SubType)
	binary.Write(b, binary.LittleEndian, s.PackageNumber)
	binary.Write(b, binary.LittleEndian, s.VersionNumber)
	binary.Write(b, binary.LittleEndian, s.GIDID)
	binary.Write(b, binary.LittleEndian, s.RemapIndex)
	binary.Write(b, binary.LittleEndian, s.IsWallpaper)
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	return b.Bytes()
}

func (s *PatchExtendedTile) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SubType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PackageNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.VersionNumber); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GIDID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RemapIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsWallpaper); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	return nil
}

type PetTomeScanAttic struct {
	GlobalID uint64
}

func (s *PetTomeScanAttic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *PetTomeScanAttic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type PickUpAll struct {
	ItemCount  uint32
	ErrorCode  int8
	Exceptions string
}

func (s *PickUpAll) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.Exceptions)))
	binary.Write(b, binary.LittleEndian, s.ItemCount)
	binary.Write(b, binary.LittleEndian, s.ErrorCode)
	writeString_50(b, s.Exceptions)
	return b.Bytes()
}

func (s *PickUpAll) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemCount); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorCode); err != nil {
		return err
	}
	if s.Exceptions, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type PickUpHousingTexture struct {
	RemapIndex  uint32
	TextureType uint32
}

func (s *PickUpHousingTexture) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.RemapIndex)
	binary.Write(b, binary.LittleEndian, s.TextureType)
	return b.Bytes()
}

func (s *PickUpHousingTexture) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RemapIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TextureType); err != nil {
		return err
	}
	return nil
}

type PlaceHousingFish struct {
	FishTemplateID uint64
	LocX           float32
	LocY           float32
	LocZ           float32
	Yaw            float32
	FishSize       float32
}

func (s *PlaceHousingFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.LocX)
	binary.Write(b, binary.LittleEndian, s.LocY)
	binary.Write(b, binary.LittleEndian, s.LocZ)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	binary.Write(b, binary.LittleEndian, s.FishSize)
	return b.Bytes()
}

func (s *PlaceHousingFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishSize); err != nil {
		return err
	}
	return nil
}

type PlaceHousingObject struct {
	ObjectID          uint64
	LocX              float32
	LocY              float32
	LocZ              float32
	Yaw               float32
	SwitchCastleBlock int8
}

func (s *PlaceHousingObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.LocX)
	binary.Write(b, binary.LittleEndian, s.LocY)
	binary.Write(b, binary.LittleEndian, s.LocZ)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	binary.Write(b, binary.LittleEndian, s.SwitchCastleBlock)
	return b.Bytes()
}

func (s *PlaceHousingObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SwitchCastleBlock); err != nil {
		return err
	}
	return nil
}

type PlayerTeleportingToFriend struct {
	TargetCharacterID uint64
	OriginatorID      uint64
}

func (s *PlayerTeleportingToFriend) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.TargetCharacterID)
	binary.Write(b, binary.LittleEndian, s.OriginatorID)
	return b.Bytes()
}

func (s *PlayerTeleportingToFriend) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OriginatorID); err != nil {
		return err
	}
	return nil
}

type PlayInteractiveMusic struct {
	InstrumentNote uint32
}

func (s *PlayInteractiveMusic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.InstrumentNote)
	return b.Bytes()
}

func (s *PlayInteractiveMusic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.InstrumentNote); err != nil {
		return err
	}
	return nil
}

type PlayInteractiveMusic2 struct {
	InstrumentNotes string
}

func (s *PlayInteractiveMusic2) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.InstrumentNotes)))
	writeString_50(b, s.InstrumentNotes)
	return b.Bytes()
}

func (s *PlayInteractiveMusic2) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.InstrumentNotes, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type PlayInteractiveMusicLoop struct {
	PlayerGID     uint64
	TemplateID    uint32
	LoopIndex     int8
	ObjectGID     uint64
	TargetPlayers string
	LoopOffset    float32
}

func (s *PlayInteractiveMusicLoop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 27+len(s.TargetPlayers)))
	binary.Write(b, binary.LittleEndian, s.PlayerGID)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	binary.Write(b, binary.LittleEndian, s.LoopIndex)
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	writeString_50(b, s.TargetPlayers)
	binary.Write(b, binary.LittleEndian, s.LoopOffset)
	return b.Bytes()
}

func (s *PlayInteractiveMusicLoop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LoopIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if s.TargetPlayers, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LoopOffset); err != nil {
		return err
	}
	return nil
}

type PlayInteractiveMusicLooping struct {
	InstrumentNote uint32
	ObjectGID      uint64
	LoopOffset     float32
}

func (s *PlayInteractiveMusicLooping) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.InstrumentNote)
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.LoopOffset)
	return b.Bytes()
}

func (s *PlayInteractiveMusicLooping) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.InstrumentNote); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LoopOffset); err != nil {
		return err
	}
	return nil
}

type PlayInteractiveMusicLooping2 struct {
	InstrumentNotes string
	ObjectGID       uint64
	LoopOffset      float32
}

func (s *PlayInteractiveMusicLooping2) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.InstrumentNotes)))
	writeString_50(b, s.InstrumentNotes)
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.LoopOffset)
	return b.Bytes()
}

func (s *PlayInteractiveMusicLooping2) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.InstrumentNotes, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LoopOffset); err != nil {
		return err
	}
	return nil
}

type PlayTrainSound struct {
	ZoneID    uint64
	TrainID   uint64
	SoundName string
}

func (s *PlayTrainSound) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.SoundName)))
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.TrainID)
	writeString_50(b, s.SoundName)
	return b.Bytes()
}

func (s *PlayTrainSound) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TrainID); err != nil {
		return err
	}
	if s.SoundName, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type RemoveFishFromAquarium struct {
	GlobalID       uint64
	FishTemplateID uint32
	Size           float32
}

func (s *RemoveFishFromAquarium) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.Size)
	return b.Bytes()
}

func (s *RemoveFishFromAquarium) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Size); err != nil {
		return err
	}
	return nil
}

type RemoveHouseMusic struct {
	MusicPlayerGID  uint64
	MusicTemplateID uint32
}

func (s *RemoveHouseMusic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.MusicPlayerGID)
	binary.Write(b, binary.LittleEndian, s.MusicTemplateID)
	return b.Bytes()
}

func (s *RemoveHouseMusic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MusicPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MusicTemplateID); err != nil {
		return err
	}
	return nil
}

type ReportHouse struct {
	CharacterID    uint64
	DeedTemplateID uint32
	Message        string
}

func (s *ReportHouse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.DeedTemplateID)
	writeString_50(b, s.Message)
	return b.Bytes()
}

func (s *ReportHouse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DeedTemplateID); err != nil {
		return err
	}
	if s.Message, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type AddRequestAllFish struct {
	GlobalID uint64
	FishData string
}

func (s *AddRequestAllFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.FishData)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_50(b, s.FishData)
	return b.Bytes()
}

func (s *AddRequestAllFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.FishData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type RequestAttic struct {
	GlobalID uint64
}

func (s *RequestAttic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *RequestAttic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type RequestCatchSuccess struct {
	SpellTemplateID uint32
	FishingPassport uint32
	FishID          uint32
}

func (s *RequestCatchSuccess) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	binary.Write(b, binary.LittleEndian, s.FishingPassport)
	binary.Write(b, binary.LittleEndian, s.FishID)
	return b.Bytes()
}

func (s *RequestCatchSuccess) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishingPassport); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishID); err != nil {
		return err
	}
	return nil
}

type RequestDeedZone struct {
	GlobalID  uint64
	Status    int32
	Teleport  int32
	Arguments string
}

func (s *RequestDeedZone) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.Arguments)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Status)
	binary.Write(b, binary.LittleEndian, s.Teleport)
	writeString_50(b, s.Arguments)
	return b.Bytes()
}

func (s *RequestDeedZone) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Teleport); err != nil {
		return err
	}
	if s.Arguments, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type AddRequestFishHistory struct {
	GlobalID uint64
	FishData string
}

func (s *AddRequestFishHistory) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.FishData)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_50(b, s.FishData)
	return b.Bytes()
}

func (s *AddRequestFishHistory) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.FishData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type RequestHouseOwnerCharacterID struct {
	CharacterID    uint64
	DeedTemplateID uint32
}

func (s *RequestHouseOwnerCharacterID) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.CharacterID)
	binary.Write(b, binary.LittleEndian, s.DeedTemplateID)
	return b.Bytes()
}

func (s *RequestHouseOwnerCharacterID) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DeedTemplateID); err != nil {
		return err
	}
	return nil
}

type RequestHouseTransferList struct {
	Data string
}

func (s *RequestHouseTransferList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *RequestHouseTransferList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type RequestHousingZone struct {
	GlobalID    uint64
	Status      int32
	TemplateGID uint64
}

func (s *RequestHousingZone) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Status)
	binary.Write(b, binary.LittleEndian, s.TemplateGID)
	return b.Bytes()
}

func (s *RequestHousingZone) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateGID); err != nil {
		return err
	}
	return nil
}

type RequestHousingZoneTeleport struct {
	TemplateGID uint64
	Location    string
}

func (s *RequestHousingZoneTeleport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Location)))
	binary.Write(b, binary.LittleEndian, s.TemplateGID)
	writeString_50(b, s.Location)
	return b.Bytes()
}

func (s *RequestHousingZoneTeleport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateGID); err != nil {
		return err
	}
	if s.Location, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type RequestInteractiveMusic struct {
	ObjectGID  uint64
	InUse      uint32
	PlayerName string
}

func (s *RequestInteractiveMusic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.PlayerName)))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.InUse)
	writeString_50(b, s.PlayerName)
	return b.Bytes()
}

func (s *RequestInteractiveMusic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.InUse); err != nil {
		return err
	}
	if s.PlayerName, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type RequestIslandSwitch struct {
	GlobalID uint64
	Status   int32
}

func (s *RequestIslandSwitch) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Status)
	return b.Bytes()
}

func (s *RequestIslandSwitch) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type RequestRestoreState struct {
	GlobalID uint64
	State    uint32
	Data     string
}

func (s *RequestRestoreState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.State)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *RequestRestoreState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.State); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type RequestSendAway struct {
	TargetPlayer uint64
	ISCSR        uint8
}

func (s *RequestSendAway) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.TargetPlayer)
	binary.Write(b, binary.LittleEndian, s.ISCSR)
	return b.Bytes()
}

func (s *RequestSendAway) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetPlayer); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ISCSR); err != nil {
		return err
	}
	return nil
}

type RequestTeleporterHousingConfirm struct {
	GlobalID uint64
}

func (s *RequestTeleporterHousingConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *RequestTeleporterHousingConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type RequestTeleporterHousingZone struct {
	GlobalID     uint64
	Status       int32
	TemplateGID  uint64
	StructureGID uint64
}

func (s *RequestTeleporterHousingZone) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Status)
	binary.Write(b, binary.LittleEndian, s.TemplateGID)
	binary.Write(b, binary.LittleEndian, s.StructureGID)
	return b.Bytes()
}

func (s *RequestTeleporterHousingZone) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StructureGID); err != nil {
		return err
	}
	return nil
}

type RequestTransition struct {
	GlobalID uint64
	ZoneName string
}

func (s *RequestTransition) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.ZoneName)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_50(b, s.ZoneName)
	return b.Bytes()
}

func (s *RequestTransition) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.ZoneName, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type RequestBlobs struct {
	Data string
}

func (s *RequestBlobs) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *RequestBlobs) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type Respec struct {
	GlobalID                     uint64
	Points                       int32
	WebFailure                   int8
	Credits                      int32
	LevelIsLow                   int8
	EncounteredUpgradedTierSpell int8
	Cost                         int32
	Buffer                       string
}

func (s *Respec) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25+len(s.Buffer)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Points)
	binary.Write(b, binary.LittleEndian, s.WebFailure)
	binary.Write(b, binary.LittleEndian, s.Credits)
	binary.Write(b, binary.LittleEndian, s.LevelIsLow)
	binary.Write(b, binary.LittleEndian, s.EncounteredUpgradedTierSpell)
	binary.Write(b, binary.LittleEndian, s.Cost)
	writeString_50(b, s.Buffer)
	return b.Bytes()
}

func (s *Respec) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Points); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LevelIsLow); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EncounteredUpgradedTierSpell); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Cost); err != nil {
		return err
	}
	if s.Buffer, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type SelectHouseMusic struct {
	MusicPlayerGID  uint64
	MusicTemplateID uint32
}

func (s *SelectHouseMusic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.MusicPlayerGID)
	binary.Write(b, binary.LittleEndian, s.MusicTemplateID)
	return b.Bytes()
}

func (s *SelectHouseMusic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MusicPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MusicTemplateID); err != nil {
		return err
	}
	return nil
}

type SelectMusicStyle struct {
	MusicPlayerGID uint64
	MusicStyle     uint32
}

func (s *SelectMusicStyle) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.MusicPlayerGID)
	binary.Write(b, binary.LittleEndian, s.MusicStyle)
	return b.Bytes()
}

func (s *SelectMusicStyle) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MusicPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MusicStyle); err != nil {
		return err
	}
	return nil
}

type SellFishOpen struct {
	GlobalID           uint64
	FishTemplateID     uint32
	CatchOfTheDayBonus uint32
}

func (s *SellFishOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.FishTemplateID)
	binary.Write(b, binary.LittleEndian, s.CatchOfTheDayBonus)
	return b.Bytes()
}

func (s *SellFishOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FishTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CatchOfTheDayBonus); err != nil {
		return err
	}
	return nil
}

type SellFishRequest struct {
	FishData string
}

func (s *SellFishRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.FishData)))
	writeString_50(b, s.FishData)
	return b.Bytes()
}

func (s *SellFishRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.FishData, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type SendHousingObjectStates struct {
	Data string
}

func (s *SendHousingObjectStates) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *SendHousingObjectStates) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type SendHousingTextureInfo struct {
	ObjectID   uint64
	RemapIndex uint32
}

func (s *SendHousingTextureInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.RemapIndex)
	return b.Bytes()
}

func (s *SendHousingTextureInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RemapIndex); err != nil {
		return err
	}
	return nil
}

type SendBlob struct {
	Data     string
	UserData uint32
}

func (s *SendBlob) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	writeString_50(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.UserData)
	return b.Bytes()
}

func (s *SendBlob) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UserData); err != nil {
		return err
	}
	return nil
}

type SetAtticID struct {
	GlobalID uint64
	AtticID  uint64
}

func (s *SetAtticID) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.AtticID)
	return b.Bytes()
}

func (s *SetAtticID) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AtticID); err != nil {
		return err
	}
	return nil
}

type SetFishingPlayers struct {
	ZoneNameID uint32
	Data       string
}

func (s *SetFishingPlayers) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.ZoneNameID)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *SetFishingPlayers) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneNameID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type SetHouseSign struct {
	ObjectID uint64
	SignText string
	NameText string
}

func (s *SetHouseSign) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.SignText)+len(s.NameText)))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	writeString_50(b, s.SignText)
	writeString_50(b, s.NameText)
	return b.Bytes()
}

func (s *SetHouseSign) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if s.SignText, err = readString_50(b); err != nil {
		return err
	}
	if s.NameText, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type SetHouseTeleporter struct {
	ObjectID uint64
	LocX     float32
	LocY     float32
	LocZ     float32
	Yaw      float32
}

func (s *SetHouseTeleporter) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.LocX)
	binary.Write(b, binary.LittleEndian, s.LocY)
	binary.Write(b, binary.LittleEndian, s.LocZ)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	return b.Bytes()
}

func (s *SetHouseTeleporter) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	return nil
}

type SetHousingGameState struct {
	PlayerName string
	GameState  uint32
	ObjectGID  uint64
	Score      string
}

func (s *SetHousingGameState) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.PlayerName)+len(s.Score)))
	writeString_50(b, s.PlayerName)
	binary.Write(b, binary.LittleEndian, s.GameState)
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	writeString_50(b, s.Score)
	return b.Bytes()
}

func (s *SetHousingGameState) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PlayerName, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameState); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if s.Score, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type SetHousingPalette struct {
	ObjectGID         uint64
	PrimaryColorIndex int8
}

func (s *SetHousingPalette) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.PrimaryColorIndex)
	return b.Bytes()
}

func (s *SetHousingPalette) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PrimaryColorIndex); err != nil {
		return err
	}
	return nil
}

type SetInstanceFish struct {
	ZoneNameID uint32
	Data       string
}

func (s *SetInstanceFish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.ZoneNameID)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *SetInstanceFish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneNameID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type InvisibleToFriends struct {
	InvisibleToFriends uint8
}

func (s *InvisibleToFriends) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.InvisibleToFriends)
	return b.Bytes()
}

func (s *InvisibleToFriends) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.InvisibleToFriends); err != nil {
		return err
	}
	return nil
}

type SetMusicLoop struct {
	ObjectGID uint64
	Data      string
}

func (s *SetMusicLoop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	writeString_50(b, s.Data)
	return b.Bytes()
}

func (s *SetMusicLoop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	return nil
}

type SetNextTrain struct {
	ZoneID      uint64
	TrainID     uint64
	NextTrainID uint64
}

func (s *SetNextTrain) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.TrainID)
	binary.Write(b, binary.LittleEndian, s.NextTrainID)
	return b.Bytes()
}

func (s *SetNextTrain) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TrainID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NextTrainID); err != nil {
		return err
	}
	return nil
}

type SetTileWallpaper struct {
	ObjectID    uint64
	RemapIndex  int8
	IsWallpaper int8
}

func (s *SetTileWallpaper) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10))
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	binary.Write(b, binary.LittleEndian, s.RemapIndex)
	binary.Write(b, binary.LittleEndian, s.IsWallpaper)
	return b.Bytes()
}

func (s *SetTileWallpaper) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RemapIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsWallpaper); err != nil {
		return err
	}
	return nil
}

type ShowFishingCast struct {
	ObjectGID       uint64
	PositionX       float32
	PositionY       float32
	PositionZ       float32
	Yaw             float32
	SpellTemplateID uint32
}

func (s *ShowFishingCast) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.PositionX)
	binary.Write(b, binary.LittleEndian, s.PositionY)
	binary.Write(b, binary.LittleEndian, s.PositionZ)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	binary.Write(b, binary.LittleEndian, s.SpellTemplateID)
	return b.Bytes()
}

func (s *ShowFishingCast) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PositionZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SpellTemplateID); err != nil {
		return err
	}
	return nil
}

type StartHousingGame struct {
	GameType       string
	GameInProgress uint32
	Data           string
	IsPublic       int8
}

func (s *StartHousingGame) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9+len(s.GameType)+len(s.Data)))
	writeString_50(b, s.GameType)
	binary.Write(b, binary.LittleEndian, s.GameInProgress)
	writeString_50(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.IsPublic)
	return b.Bytes()
}

func (s *StartHousingGame) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.GameType, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameInProgress); err != nil {
		return err
	}
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsPublic); err != nil {
		return err
	}
	return nil
}

type StartTrain struct {
	ZoneID  uint64
	TrainID uint64
	Start   int8
}

func (s *StartTrain) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.TrainID)
	binary.Write(b, binary.LittleEndian, s.Start)
	return b.Bytes()
}

func (s *StartTrain) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TrainID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Start); err != nil {
		return err
	}
	return nil
}

type StopInteractiveMusicLoop struct {
	PlayerGID uint64
}

func (s *StopInteractiveMusicLoop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.PlayerGID)
	return b.Bytes()
}

func (s *StopInteractiveMusicLoop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	return nil
}

type SwitchGotoCommons struct {
}

func (s *SwitchGotoCommons) Marshal() []byte {
	return []byte{}
}

func (s *SwitchGotoCommons) Unmarshal(data []byte) error {
	return nil
}

type TeleportedToDeletedLot struct {
	Quarantined int8
}

func (s *TeleportedToDeletedLot) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Quarantined)
	return b.Bytes()
}

func (s *TeleportedToDeletedLot) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Quarantined); err != nil {
		return err
	}
	return nil
}

type TeleportToStart struct {
	Inside uint8
}

func (s *TeleportToStart) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Inside)
	return b.Bytes()
}

func (s *TeleportToStart) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Inside); err != nil {
		return err
	}
	return nil
}

type UpdateAtticCount struct {
	GlobalID  uint64
	ItemCount int32
}

func (s *UpdateAtticCount) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemCount)
	return b.Bytes()
}

func (s *UpdateAtticCount) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemCount); err != nil {
		return err
	}
	return nil
}

type UpdateGardeningXP struct {
	GlobalID uint64
	XP       int32
	Level    int32
	IsPet    int8
}

func (s *UpdateGardeningXP) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.XP)
	binary.Write(b, binary.LittleEndian, s.Level)
	binary.Write(b, binary.LittleEndian, s.IsPet)
	return b.Bytes()
}

func (s *UpdateGardeningXP) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.XP); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Level); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsPet); err != nil {
		return err
	}
	return nil
}

type UpdateHousingObject struct {
	ObjectGID         uint64
	LocX              float32
	LocY              float32
	LocZ              float32
	Yaw               float32
	SwitchCastleBlock uint32
	UseExtendedYaw    int8
	Scale             float32
}

func (s *UpdateHousingObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 33))
	binary.Write(b, binary.LittleEndian, s.ObjectGID)
	binary.Write(b, binary.LittleEndian, s.LocX)
	binary.Write(b, binary.LittleEndian, s.LocY)
	binary.Write(b, binary.LittleEndian, s.LocZ)
	binary.Write(b, binary.LittleEndian, s.Yaw)
	binary.Write(b, binary.LittleEndian, s.SwitchCastleBlock)
	binary.Write(b, binary.LittleEndian, s.UseExtendedYaw)
	binary.Write(b, binary.LittleEndian, s.Scale)
	return b.Bytes()
}

func (s *UpdateHousingObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SwitchCastleBlock); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseExtendedYaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Scale); err != nil {
		return err
	}
	return nil
}

type UpdateHousingPet struct {
	Data   string
	ZoneID uint64
}

func (s *UpdateHousingPet) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	writeString_50(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	return b.Bytes()
}

func (s *UpdateHousingPet) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_50(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	return nil
}

type UpdateIslandSpace struct {
	IslandLimit int32
}

func (s *UpdateIslandSpace) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.IslandLimit)
	return b.Bytes()
}

func (s *UpdateIslandSpace) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.IslandLimit); err != nil {
		return err
	}
	return nil
}

type UpdateMaximumHousingItems struct {
	ZoneGID         uint64
	NewMaximumItems uint32
	IncreaseAmount  uint32
}

func (s *UpdateMaximumHousingItems) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.ZoneGID)
	binary.Write(b, binary.LittleEndian, s.NewMaximumItems)
	binary.Write(b, binary.LittleEndian, s.IncreaseAmount)
	return b.Bytes()
}

func (s *UpdateMaximumHousingItems) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewMaximumItems); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IncreaseAmount); err != nil {
		return err
	}
	return nil
}

type UpdateTrain struct {
	ZoneID       uint64
	TrainID      uint32
	BreadCrumbID uint32
}

func (s *UpdateTrain) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.ZoneID)
	binary.Write(b, binary.LittleEndian, s.TrainID)
	binary.Write(b, binary.LittleEndian, s.BreadCrumbID)
	return b.Bytes()
}

func (s *UpdateTrain) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TrainID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BreadCrumbID); err != nil {
		return err
	}
	return nil
}

func writeString_50(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_50(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
