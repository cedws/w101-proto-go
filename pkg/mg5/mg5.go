// Code generated by w101-client-go. DO NOT EDIT.
package mg5

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type mg5Service interface {
	MG5Connect(MG5Connect)
	MG5Moved(MG5Moved)
	MG5Rewards(MG5Rewards)
}

type Mg5Service struct {
	mg5Service
}

type Mg5Client struct {
	c *proto.Client
}

func (l *Mg5Service) MG5Connect(_ MG5Connect) {}
func (l *Mg5Service) MG5Moved(_ MG5Moved)     {}
func (l *Mg5Service) MG5Rewards(_ MG5Rewards) {}

func RegisterMg5Service(r *proto.MessageRouter, s mg5Service) {
	proto.RegisterMessageHandler(r, 46, 1, s.MG5Connect)
	proto.RegisterMessageHandler(r, 46, 2, s.MG5Moved)
	proto.RegisterMessageHandler(r, 46, 3, s.MG5Rewards)
}

func NewMg5Client(c *proto.Client) Mg5Client {
	return Mg5Client{c}
}

func (c Mg5Client) MG5Connect(m *MG5Connect) error {
	return c.c.WriteMessage(46, 1, m)
}

func (c Mg5Client) MG5Moved(m *MG5Moved) error {
	return c.c.WriteMessage(46, 2, m)
}

func (c Mg5Client) MG5Rewards(m *MG5Rewards) error {
	return c.c.WriteMessage(46, 3, m)
}

type MG5Connect struct {
}

func (s *MG5Connect) Marshal() []byte {
	return []byte{}
}

func (s *MG5Connect) Unmarshal(data []byte) error {
	return nil
}

type MG5Moved struct {
}

func (s *MG5Moved) Marshal() []byte {
	return []byte{}
}

func (s *MG5Moved) Unmarshal(data []byte) error {
	return nil
}

type MG5Rewards struct {
	GameName string
	Score    int32
}

func (s *MG5Rewards) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.GameName)))
	binary.Write(b, binary.LittleEndian, s.Score)
	writeString_46(b, s.GameName)
	return b.Bytes()
}

func (s *MG5Rewards) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Score); err != nil {
		return err
	}
	if s.GameName, err = readString_46(b); err != nil {
		return err
	}
	return nil
}

func writeString_46(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_46(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
