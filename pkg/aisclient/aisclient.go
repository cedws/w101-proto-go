// Code generated by w101-client-go. DO NOT EDIT.
package aisclient

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type aisclientService interface {
	AISMessage(AISMessage)
}

type AisclientService struct {
	aisclientService
}

type AisclientClient struct {
	c *proto.Client
}

func (l *AisclientService) AISMessage(_ AISMessage) {}

func RegisterAisclientService(r *proto.MessageRouter, s aisclientService) {
	proto.RegisterMessageHandler(r, 19, 1, s.AISMessage)
}

func NewAisclientClient(c *proto.Client) AisclientClient {
	return AisclientClient{c}
}

func (c AisclientClient) AISMessage(m *AISMessage) error {
	return c.c.WriteMessage(19, 1, m)
}

type AISMessage struct {
	Message string
	Modal   uint8
}

func (s *AISMessage) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Message)))
	writeString_19(b, s.Message)
	binary.Write(b, binary.LittleEndian, s.Modal)
	return b.Bytes()
}

func (s *AISMessage) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = readString_19(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Modal); err != nil {
		return err
	}
	return nil
}

func writeString_19(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_19(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
