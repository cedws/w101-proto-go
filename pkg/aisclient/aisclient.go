// Code generated by w101-client-go. DO NOT EDIT.
package aisclient

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/codegen"
	"github.com/cedws/w101-client-go/proto"
)

type service interface {
	AISMessage(AISMessage)
}

func (Service) AISMessage(AISMessage) {}

func RegisterService(r *proto.MessageRouter, s service) {
	proto.RegisterMessageHandler(r, 19, 1, s.AISMessage)
}

func NewClient(c *proto.Client) Client {
	return Client{c}
}

func (c Client) AISMessage(m *AISMessage) error {
	return c.c.WriteMessage(19, 1, m)
}

type Service struct {
	service
}

type Client struct {
	c *proto.Client
}
type AISMessage struct {
	Message string
	Modal   uint8
}

func (s *AISMessage) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Message)))
	binary.Write(b, binary.LittleEndian, s.Message)
	return b.Bytes()
}

func (s *AISMessage) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Message, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Modal); err != nil {
		return err
	}
	return nil
}
