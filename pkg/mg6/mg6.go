// Code generated by w101-client-go. DO NOT EDIT.
package mg6

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type mg6Service interface {
	MG6Connect(MG6Connect)
	MG6Moved(MG6Moved)
	MG6Rewards(MG6Rewards)
}

type Mg6Service struct {
	mg6Service
}

type Mg6Client struct {
	c *proto.Client
}

func (l *Mg6Service) MG6Connect(_ MG6Connect) {}
func (l *Mg6Service) MG6Moved(_ MG6Moved)     {}
func (l *Mg6Service) MG6Rewards(_ MG6Rewards) {}

func RegisterMg6Service(r *proto.MessageRouter, s mg6Service) {
	proto.RegisterMessageHandler(r, 47, 1, s.MG6Connect)
	proto.RegisterMessageHandler(r, 47, 2, s.MG6Moved)
	proto.RegisterMessageHandler(r, 47, 3, s.MG6Rewards)
}

func NewMg6Client(c *proto.Client) Mg6Client {
	return Mg6Client{c}
}

func (c Mg6Client) MG6Connect(m *MG6Connect) error {
	return c.c.WriteMessage(47, 1, m)
}

func (c Mg6Client) MG6Moved(m *MG6Moved) error {
	return c.c.WriteMessage(47, 2, m)
}

func (c Mg6Client) MG6Rewards(m *MG6Rewards) error {
	return c.c.WriteMessage(47, 3, m)
}

type MG6Connect struct {
}

func (s *MG6Connect) Marshal() []byte {
	return []byte{}
}

func (s *MG6Connect) Unmarshal(data []byte) error {
	return nil
}

type MG6Moved struct {
}

func (s *MG6Moved) Marshal() []byte {
	return []byte{}
}

func (s *MG6Moved) Unmarshal(data []byte) error {
	return nil
}

type MG6Rewards struct {
	GameName string
	Score    int32
}

func (s *MG6Rewards) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.GameName)))
	binary.Write(b, binary.LittleEndian, s.Score)
	writeString_47(b, s.GameName)
	return b.Bytes()
}

func (s *MG6Rewards) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Score); err != nil {
		return err
	}
	if s.GameName, err = readString_47(b); err != nil {
		return err
	}
	return nil
}

func writeString_47(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_47(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
