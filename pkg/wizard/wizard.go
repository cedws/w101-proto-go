// Code generated by w101-client-go. DO NOT EDIT.
package wizard

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/codegen"
	"github.com/cedws/w101-client-go/proto"
)

type service interface {
	AcceptQuestBogus(AcceptQuestBogus)
	AccessPassBuyConfirm(AccessPassBuyConfirm)
	AccessPassBuyRequest(AccessPassBuyRequest)
	AccessPassDeclined(AccessPassDeclined)
	AccessPassInfoRequest(AccessPassInfoRequest)
	AccessPassOffer(AccessPassOffer)
	AccessPassRejected(AccessPassRejected)
	ActorDialog(ActorDialog)
	AddQuestFinder(AddQuestFinder)
	AddSpellToBook(AddSpellToBook)
	AddSpellToDeck(AddSpellToDeck)
	AddTreasureSpellToBook(AddTreasureSpellToBook)
	AddTreasureSpellToDeck(AddTreasureSpellToDeck)
	AdventurePartyMessage(AdventurePartyMessage)
	Aggro(Aggro)
	AlchemyStation(AlchemyStation)
	ArenaError(ArenaError)
	AuctionHouseContents(AuctionHouseContents)
	AuctionHouseMoreAcknowledgement(AuctionHouseMoreAcknowledgement)
	AuctionHouseRequest(AuctionHouseRequest)
	AuctionRequestBank(AuctionRequestBank)
	AuctionResponse(AuctionResponse)
	BankDelete(BankDelete)
	BankDeleteConfirm(BankDeleteConfirm)
	BankToBankConfirm(BankToBankConfirm)
	BankToInvConfirm(BankToInvConfirm)
	BoosterDistributionResults(BoosterDistributionResults)
	BracketReport(BracketReport)
	BuyEnergyConfirm(BuyEnergyConfirm)
	ChatFilterBlack(ChatFilterBlack)
	ChatFilterWhite(ChatFilterWhite)
	ChooseFocus(ChooseFocus)
	ClearAllCraftingSlots(ClearAllCraftingSlots)
	ClearEquippedDeck(ClearEquippedDeck)
	CompleteDialog(CompleteDialog)
	ControlMusic(ControlMusic)
	CraftingSlotAdd(CraftingSlotAdd)
	CraftingSlotCount(CraftingSlotCount)
	CraftingSlotRemove(CraftingSlotRemove)
	CreateBoosterDistribution(CreateBoosterDistribution)
	CrownBalance(CrownBalance)
	CrownsBuyConfirm(CrownsBuyConfirm)
	CrownsBuyRequest(CrownsBuyRequest)
	CrownServicesOpen(CrownServicesOpen)
	CSRCrownBalance(CSRCrownBalance)
	CSRRequestBlobs(CSRRequestBlobs)
	DeliveryInvoiceRequestBank(DeliveryInvoiceRequestBank)
	DeliveryInvoiceTransferObjectsFromStorageToBank(DeliveryInvoiceTransferObjectsFromStorageToBank)
	DismissTutorialTip(DismissTutorialTip)
	DoneShopping(DoneShopping)
	DuelSimResult(DuelSimResult)
	DyeConfirm(DyeConfirm)
	DyeRequest(DyeRequest)
	DyeShopOpen(DyeShopOpen)
	ElixirStateChange(ElixirStateChange)
	EncounterDialog(EncounterDialog)
	EnergyBuyRequest(EnergyBuyRequest)
	EnergyShopOpen(EnergyShopOpen)
	EnterMinigame(EnterMinigame)
	ExitConfirmTeleport(ExitConfirmTeleport)
	ExpandPvPSearch(ExpandPvPSearch)
	FreeTourneyCreditInfo(FreeTourneyCreditInfo)
	GetSnackList(GetSnackList)
	GetSubscriberOnlyItems(GetSubscriberOnlyItems)
	GetTimedAccessPasses(GetTimedAccessPasses)
	GoHome(GoHome)
	GotoDorm(GotoDorm)
	GotoFriendlyPlayer(GotoFriendlyPlayer)
	GroupQuestCredit(GroupQuestCredit)
	InteractAvailableQuest(InteractAvailableQuest)
	InteractCompleteGoal(InteractCompleteGoal)
	InteractUnderwayQuest(InteractUnderwayQuest)
	InvToBankConfirm(InvToBankConfirm)
	ItemDrop(ItemDrop)
	ItemLock(ItemLock)
	ItemOverflowToBank(ItemOverflowToBank)
	LeaderboardFriendRequest(LeaderboardFriendRequest)
	LeaderboardRequest(LeaderboardRequest)
	LeaderboardResponse(LeaderboardResponse)
	Leash(Leash)
	LeashOffset(LeashOffset)
	LeaveAdventureParty(LeaveAdventureParty)
	LeaveMinigame(LeaveMinigame)
	LeaveSigilTimerWaiting(LeaveSigilTimerWaiting)
	LemuriaStatus(LemuriaStatus)
	LevelUp(LevelUp)
	LogClientResolution(LogClientResolution)
	LogOffer(LogOffer)
	LogPatchClientPatchTime(LogPatchClientPatchTime)
	Loot(Loot)
	MinigameKiosk(MinigameKiosk)
	MinigameRewards(MinigameRewards)
	MinigameSelect(MinigameSelect)
	MinigameTimerEnd(MinigameTimerEnd)
	MinigameTimerStart(MinigameTimerStart)
	MoveBankToBank(MoveBankToBank)
	MoveBankToInv(MoveBankToInv)
	MoveInvToBank(MoveInvToBank)
	NewTitle(NewTitle)
	NotifySchoolFocus(NotifySchoolFocus)
	OpenBank(OpenBank)
	PaidLootCrownsBalance(PaidLootCrownsBalance)
	PaidLootRollError(PaidLootRollError)
	PaidLootRollPrompt(PaidLootRollPrompt)
	PaidLootRollResponse(PaidLootRollResponse)
	PaidLootRollResult(PaidLootRollResult)
	PatchingBlocked(PatchingBlocked)
	PCSCacheSegReqsSummaryRequest(PCSCacheSegReqsSummaryRequest)
	PCSListRequest(PCSListRequest)
	PCSListResponse(PCSListResponse)
	PCSPATCH(PCSPATCH)
	PCSPriceLockRequest(PCSPriceLockRequest)
	PCSPriceLockResponse(PCSPriceLockResponse)
	PCSPurchaseRequest(PCSPurchaseRequest)
	PCSPurchaseResponse(PCSPurchaseResponse)
	PCSSegDataRequest(PCSSegDataRequest)
	PCSSegDataResponse(PCSSegDataResponse)
	PCSUpdateUserWishlist(PCSUpdateUserWishlist)
	PetGameKiosk(PetGameKiosk)
	PetHatchCreate(PetHatchCreate)
	PetHatchJoinStatus(PetHatchJoinStatus)
	PetHatchReadyStatus(PetHatchReadyStatus)
	PetHatchRequest(PetHatchRequest)
	PetHatchResult(PetHatchResult)
	PetRenameConfirm(PetRenameConfirm)
	PetRenameRequest(PetRenameRequest)
	PlayerArrived(PlayerArrived)
	PlayerWizbang(PlayerWizbang)
	PlayMusic(PlayMusic)
	PotionBuyConfirm(PotionBuyConfirm)
	PotionBuyRequest(PotionBuyRequest)
	PotionShopOpen(PotionShopOpen)
	PreLeaderboard(PreLeaderboard)
	PremiumContent(PremiumContent)
	PrePvPKiosk(PrePvPKiosk)
	PvPConfirm(PvPConfirm)
	PvPConfirmTourney(PvPConfirmTourney)
	PvPConsumePvPTourneyCurrency(PvPConsumePvPTourneyCurrency)
	PvPIntent(PvPIntent)
	PvpMatchRequest(PvpMatchRequest)
	PvPQueue(PvPQueue)
	PvPRegisterFailed(PvPRegisterFailed)
	PvPUpdateRequest(PvPUpdateRequest)
	QuestDialog(QuestDialog)
	QuestFinderOption(QuestFinderOption)
	QuestRewards(QuestRewards)
	QuickSellRequestBank(QuickSellRequestBank)
	ReagentAdd(ReagentAdd)
	ReagentRemove(ReagentRemove)
	ReagentRemoveRequest(ReagentRemoveRequest)
	ReagentUpdate(ReagentUpdate)
	RecipeAdd(RecipeAdd)
	RecipeRemove(RecipeRemove)
	Registrar(Registrar)
	RemoveSpellFromBook(RemoveSpellFromBook)
	RemoveSpellFromDeck(RemoveSpellFromDeck)
	RemoveTreasureSpellFromBook(RemoveTreasureSpellFromBook)
	RemoveTreasureSpellFromDeck(RemoveTreasureSpellFromDeck)
	RemoveTreasureSpellFromVault(RemoveTreasureSpellFromVault)
	RentalUpdate(RentalUpdate)
	RequestActiveMapQuests(RequestActiveMapQuests)
	RequestAdventureParty(RequestAdventureParty)
	RequestCombatSigils(RequestCombatSigils)
	RequestCreateAdventureParty(RequestCreateAdventureParty)
	RequestFriendFinderCode(RequestFriendFinderCode)
	RequestFriendlyPlayerQuest(RequestFriendlyPlayerQuest)
	RequestFriendlyPlayerQuest2(RequestFriendlyPlayerQuest2)
	RequestFriendlyPlayers(RequestFriendlyPlayers)
	RequestHouseTeleport(RequestHouseTeleport)
	RequestJoinAdventureParty(RequestJoinAdventureParty)
	RequestLeaveAdventureParty(RequestLeaveAdventureParty)
	RequestNextClosestQuest(RequestNextClosestQuest)
	RequestPrivacyOptions(RequestPrivacyOptions)
	RequestPvPActor(RequestPvPActor)
	RequestPvPKiosk(RequestPvPKiosk)
	RequestQuestDialog(RequestQuestDialog)
	RequestQuickSell(RequestQuickSell)
	RequestTeamUpInfo(RequestTeamUpInfo)
	RequestToggleLockItem(RequestToggleLockItem)
	RequestVolunteerInfo(RequestVolunteerInfo)
	RespecConfirm(RespecConfirm)
	ResponsePrivacyOptions(ResponsePrivacyOptions)
	RideMount(RideMount)
	SeamstressOpen(SeamstressOpen)
	SendFriendFinderCode(SendFriendFinderCode)
	SendTalentDataCSR(SendTalentDataCSR)
	SetDeckName(SetDeckName)
	DontAllowFriendFinderCodes(DontAllowFriendFinderCodes)
	SetFriendlyPlayer(SetFriendlyPlayer)
	SetRentalTimer(SetRentalTimer)
	SetVolunteerFlag(SetVolunteerFlag)
	SharedBankDeleteReagentOrPetSnack(SharedBankDeleteReagentOrPetSnack)
	SharedBankDeleteReagentOrPetSnackConfirm(SharedBankDeleteReagentOrPetSnackConfirm)
	ShopBuyConfirm(ShopBuyConfirm)
	ShopBuyRequest(ShopBuyRequest)
	ShopList(ShopList)
	ShopSellConfirm(ShopSellConfirm)
	ShopSellRequest(ShopSellRequest)
	ShowcasedStoreItemInfo(ShowcasedStoreItemInfo)
	ShowClientMessageBox(ShowClientMessageBox)
	ShowGUI(ShowGUI)
	SnackList(SnackList)
	SpellList(SpellList)
	SpellTrainComplete(SpellTrainComplete)
	StartRide(StartRide)
	StitchItems(StitchItems)
	StitchItemsConfirm(StitchItemsConfirm)
	StorageClientAdd(StorageClientAdd)
	StorageClientRemove(StorageClientRemove)
	SubmitCombatSigils(SubmitCombatSigils)
	SubscriberOnlyItems(SubscriberOnlyItems)
	TimedAccessPasses(TimedAccessPasses)
	TradeChangeItem(TradeChangeItem)
	TradeChangeMoney(TradeChangeMoney)
	TradeCreate(TradeCreate)
	TradeJoinStatus(TradeJoinStatus)
	TradeReadyStatus(TradeReadyStatus)
	TradeRequest(TradeRequest)
	TradeResult(TradeResult)
	Train(Train)
	TreasureBuy(TreasureBuy)
	TreasureBuyConfirm(TreasureBuyConfirm)
	TreasureShopList(TreasureShopList)
	TutorialEvent(TutorialEvent)
	UnstitchItems(UnstitchItems)
	UnstitchOpen(UnstitchOpen)
	UpdateArenaPoints(UpdateArenaPoints)
	UpdateFriendlyPlayerWorlds(UpdateFriendlyPlayerWorlds)
	UpdateFriendlyWorld(UpdateFriendlyWorld)
	UpdateGender(UpdateGender)
	UpdateGold(UpdateGold)
	UpdateHealth(UpdateHealth)
	UpdateMana(UpdateMana)
	UpdatePotions(UpdatePotions)
	UpdatePowerPip(UpdatePowerPip)
	UpdatePrivacyOptions(UpdatePrivacyOptions)
	UpdateSchool(UpdateSchool)
	UpdateShadowPipRating(UpdateShadowPipRating)
	UpdateTraining(UpdateTraining)
	UpdateVolunteerInfo(UpdateVolunteerInfo)
	UpdateXP(UpdateXP)
	UseFriendFinderCode(UseFriendFinderCode)
	UseFriendFinderCodeResponse(UseFriendFinderCodeResponse)
	UsePotion(UsePotion)
	UseRecipe(UseRecipe)
	VolunteerRequest(VolunteerRequest)
	VolunteerTeamHelpComplete(VolunteerTeamHelpComplete)
	VolunteerTeamHelpJoin(VolunteerTeamHelpJoin)
	WizGameStats(WizGameStats)
	WizInventoryClientAdd(WizInventoryClientAdd)
	WizInventoryClientRemove(WizInventoryClientRemove)
	WorldTeleportList(WorldTeleportList)
	WorldTeleportRequest(WorldTeleportRequest)
}

func (Service) AcceptQuestBogus(AcceptQuestBogus)                               {}
func (Service) AccessPassBuyConfirm(AccessPassBuyConfirm)                       {}
func (Service) AccessPassBuyRequest(AccessPassBuyRequest)                       {}
func (Service) AccessPassDeclined(AccessPassDeclined)                           {}
func (Service) AccessPassInfoRequest(AccessPassInfoRequest)                     {}
func (Service) AccessPassOffer(AccessPassOffer)                                 {}
func (Service) AccessPassRejected(AccessPassRejected)                           {}
func (Service) ActorDialog(ActorDialog)                                         {}
func (Service) AddQuestFinder(AddQuestFinder)                                   {}
func (Service) AddSpellToBook(AddSpellToBook)                                   {}
func (Service) AddSpellToDeck(AddSpellToDeck)                                   {}
func (Service) AddTreasureSpellToBook(AddTreasureSpellToBook)                   {}
func (Service) AddTreasureSpellToDeck(AddTreasureSpellToDeck)                   {}
func (Service) AdventurePartyMessage(AdventurePartyMessage)                     {}
func (Service) Aggro(Aggro)                                                     {}
func (Service) AlchemyStation(AlchemyStation)                                   {}
func (Service) ArenaError(ArenaError)                                           {}
func (Service) AuctionHouseContents(AuctionHouseContents)                       {}
func (Service) AuctionHouseMoreAcknowledgement(AuctionHouseMoreAcknowledgement) {}
func (Service) AuctionHouseRequest(AuctionHouseRequest)                         {}
func (Service) AuctionRequestBank(AuctionRequestBank)                           {}
func (Service) AuctionResponse(AuctionResponse)                                 {}
func (Service) BankDelete(BankDelete)                                           {}
func (Service) BankDeleteConfirm(BankDeleteConfirm)                             {}
func (Service) BankToBankConfirm(BankToBankConfirm)                             {}
func (Service) BankToInvConfirm(BankToInvConfirm)                               {}
func (Service) BoosterDistributionResults(BoosterDistributionResults)           {}
func (Service) BracketReport(BracketReport)                                     {}
func (Service) BuyEnergyConfirm(BuyEnergyConfirm)                               {}
func (Service) ChatFilterBlack(ChatFilterBlack)                                 {}
func (Service) ChatFilterWhite(ChatFilterWhite)                                 {}
func (Service) ChooseFocus(ChooseFocus)                                         {}
func (Service) ClearAllCraftingSlots(ClearAllCraftingSlots)                     {}
func (Service) ClearEquippedDeck(ClearEquippedDeck)                             {}
func (Service) CompleteDialog(CompleteDialog)                                   {}
func (Service) ControlMusic(ControlMusic)                                       {}
func (Service) CraftingSlotAdd(CraftingSlotAdd)                                 {}
func (Service) CraftingSlotCount(CraftingSlotCount)                             {}
func (Service) CraftingSlotRemove(CraftingSlotRemove)                           {}
func (Service) CreateBoosterDistribution(CreateBoosterDistribution)             {}
func (Service) CrownBalance(CrownBalance)                                       {}
func (Service) CrownsBuyConfirm(CrownsBuyConfirm)                               {}
func (Service) CrownsBuyRequest(CrownsBuyRequest)                               {}
func (Service) CrownServicesOpen(CrownServicesOpen)                             {}
func (Service) CSRCrownBalance(CSRCrownBalance)                                 {}
func (Service) CSRRequestBlobs(CSRRequestBlobs)                                 {}
func (Service) DeliveryInvoiceRequestBank(DeliveryInvoiceRequestBank)           {}
func (Service) DeliveryInvoiceTransferObjectsFromStorageToBank(DeliveryInvoiceTransferObjectsFromStorageToBank) {
}
func (Service) DismissTutorialTip(DismissTutorialTip)                                             {}
func (Service) DoneShopping(DoneShopping)                                                         {}
func (Service) DuelSimResult(DuelSimResult)                                                       {}
func (Service) DyeConfirm(DyeConfirm)                                                             {}
func (Service) DyeRequest(DyeRequest)                                                             {}
func (Service) DyeShopOpen(DyeShopOpen)                                                           {}
func (Service) ElixirStateChange(ElixirStateChange)                                               {}
func (Service) EncounterDialog(EncounterDialog)                                                   {}
func (Service) EnergyBuyRequest(EnergyBuyRequest)                                                 {}
func (Service) EnergyShopOpen(EnergyShopOpen)                                                     {}
func (Service) EnterMinigame(EnterMinigame)                                                       {}
func (Service) ExitConfirmTeleport(ExitConfirmTeleport)                                           {}
func (Service) ExpandPvPSearch(ExpandPvPSearch)                                                   {}
func (Service) FreeTourneyCreditInfo(FreeTourneyCreditInfo)                                       {}
func (Service) GetSnackList(GetSnackList)                                                         {}
func (Service) GetSubscriberOnlyItems(GetSubscriberOnlyItems)                                     {}
func (Service) GetTimedAccessPasses(GetTimedAccessPasses)                                         {}
func (Service) GoHome(GoHome)                                                                     {}
func (Service) GotoDorm(GotoDorm)                                                                 {}
func (Service) GotoFriendlyPlayer(GotoFriendlyPlayer)                                             {}
func (Service) GroupQuestCredit(GroupQuestCredit)                                                 {}
func (Service) InteractAvailableQuest(InteractAvailableQuest)                                     {}
func (Service) InteractCompleteGoal(InteractCompleteGoal)                                         {}
func (Service) InteractUnderwayQuest(InteractUnderwayQuest)                                       {}
func (Service) InvToBankConfirm(InvToBankConfirm)                                                 {}
func (Service) ItemDrop(ItemDrop)                                                                 {}
func (Service) ItemLock(ItemLock)                                                                 {}
func (Service) ItemOverflowToBank(ItemOverflowToBank)                                             {}
func (Service) LeaderboardFriendRequest(LeaderboardFriendRequest)                                 {}
func (Service) LeaderboardRequest(LeaderboardRequest)                                             {}
func (Service) LeaderboardResponse(LeaderboardResponse)                                           {}
func (Service) Leash(Leash)                                                                       {}
func (Service) LeashOffset(LeashOffset)                                                           {}
func (Service) LeaveAdventureParty(LeaveAdventureParty)                                           {}
func (Service) LeaveMinigame(LeaveMinigame)                                                       {}
func (Service) LeaveSigilTimerWaiting(LeaveSigilTimerWaiting)                                     {}
func (Service) LemuriaStatus(LemuriaStatus)                                                       {}
func (Service) LevelUp(LevelUp)                                                                   {}
func (Service) LogClientResolution(LogClientResolution)                                           {}
func (Service) LogOffer(LogOffer)                                                                 {}
func (Service) LogPatchClientPatchTime(LogPatchClientPatchTime)                                   {}
func (Service) Loot(Loot)                                                                         {}
func (Service) MinigameKiosk(MinigameKiosk)                                                       {}
func (Service) MinigameRewards(MinigameRewards)                                                   {}
func (Service) MinigameSelect(MinigameSelect)                                                     {}
func (Service) MinigameTimerEnd(MinigameTimerEnd)                                                 {}
func (Service) MinigameTimerStart(MinigameTimerStart)                                             {}
func (Service) MoveBankToBank(MoveBankToBank)                                                     {}
func (Service) MoveBankToInv(MoveBankToInv)                                                       {}
func (Service) MoveInvToBank(MoveInvToBank)                                                       {}
func (Service) NewTitle(NewTitle)                                                                 {}
func (Service) NotifySchoolFocus(NotifySchoolFocus)                                               {}
func (Service) OpenBank(OpenBank)                                                                 {}
func (Service) PaidLootCrownsBalance(PaidLootCrownsBalance)                                       {}
func (Service) PaidLootRollError(PaidLootRollError)                                               {}
func (Service) PaidLootRollPrompt(PaidLootRollPrompt)                                             {}
func (Service) PaidLootRollResponse(PaidLootRollResponse)                                         {}
func (Service) PaidLootRollResult(PaidLootRollResult)                                             {}
func (Service) PatchingBlocked(PatchingBlocked)                                                   {}
func (Service) PCSCacheSegReqsSummaryRequest(PCSCacheSegReqsSummaryRequest)                       {}
func (Service) PCSListRequest(PCSListRequest)                                                     {}
func (Service) PCSListResponse(PCSListResponse)                                                   {}
func (Service) PCSPATCH(PCSPATCH)                                                                 {}
func (Service) PCSPriceLockRequest(PCSPriceLockRequest)                                           {}
func (Service) PCSPriceLockResponse(PCSPriceLockResponse)                                         {}
func (Service) PCSPurchaseRequest(PCSPurchaseRequest)                                             {}
func (Service) PCSPurchaseResponse(PCSPurchaseResponse)                                           {}
func (Service) PCSSegDataRequest(PCSSegDataRequest)                                               {}
func (Service) PCSSegDataResponse(PCSSegDataResponse)                                             {}
func (Service) PCSUpdateUserWishlist(PCSUpdateUserWishlist)                                       {}
func (Service) PetGameKiosk(PetGameKiosk)                                                         {}
func (Service) PetHatchCreate(PetHatchCreate)                                                     {}
func (Service) PetHatchJoinStatus(PetHatchJoinStatus)                                             {}
func (Service) PetHatchReadyStatus(PetHatchReadyStatus)                                           {}
func (Service) PetHatchRequest(PetHatchRequest)                                                   {}
func (Service) PetHatchResult(PetHatchResult)                                                     {}
func (Service) PetRenameConfirm(PetRenameConfirm)                                                 {}
func (Service) PetRenameRequest(PetRenameRequest)                                                 {}
func (Service) PlayerArrived(PlayerArrived)                                                       {}
func (Service) PlayerWizbang(PlayerWizbang)                                                       {}
func (Service) PlayMusic(PlayMusic)                                                               {}
func (Service) PotionBuyConfirm(PotionBuyConfirm)                                                 {}
func (Service) PotionBuyRequest(PotionBuyRequest)                                                 {}
func (Service) PotionShopOpen(PotionShopOpen)                                                     {}
func (Service) PreLeaderboard(PreLeaderboard)                                                     {}
func (Service) PremiumContent(PremiumContent)                                                     {}
func (Service) PrePvPKiosk(PrePvPKiosk)                                                           {}
func (Service) PvPConfirm(PvPConfirm)                                                             {}
func (Service) PvPConfirmTourney(PvPConfirmTourney)                                               {}
func (Service) PvPConsumePvPTourneyCurrency(PvPConsumePvPTourneyCurrency)                         {}
func (Service) PvPIntent(PvPIntent)                                                               {}
func (Service) PvpMatchRequest(PvpMatchRequest)                                                   {}
func (Service) PvPQueue(PvPQueue)                                                                 {}
func (Service) PvPRegisterFailed(PvPRegisterFailed)                                               {}
func (Service) PvPUpdateRequest(PvPUpdateRequest)                                                 {}
func (Service) QuestDialog(QuestDialog)                                                           {}
func (Service) QuestFinderOption(QuestFinderOption)                                               {}
func (Service) QuestRewards(QuestRewards)                                                         {}
func (Service) QuickSellRequestBank(QuickSellRequestBank)                                         {}
func (Service) ReagentAdd(ReagentAdd)                                                             {}
func (Service) ReagentRemove(ReagentRemove)                                                       {}
func (Service) ReagentRemoveRequest(ReagentRemoveRequest)                                         {}
func (Service) ReagentUpdate(ReagentUpdate)                                                       {}
func (Service) RecipeAdd(RecipeAdd)                                                               {}
func (Service) RecipeRemove(RecipeRemove)                                                         {}
func (Service) Registrar(Registrar)                                                               {}
func (Service) RemoveSpellFromBook(RemoveSpellFromBook)                                           {}
func (Service) RemoveSpellFromDeck(RemoveSpellFromDeck)                                           {}
func (Service) RemoveTreasureSpellFromBook(RemoveTreasureSpellFromBook)                           {}
func (Service) RemoveTreasureSpellFromDeck(RemoveTreasureSpellFromDeck)                           {}
func (Service) RemoveTreasureSpellFromVault(RemoveTreasureSpellFromVault)                         {}
func (Service) RentalUpdate(RentalUpdate)                                                         {}
func (Service) RequestActiveMapQuests(RequestActiveMapQuests)                                     {}
func (Service) RequestAdventureParty(RequestAdventureParty)                                       {}
func (Service) RequestCombatSigils(RequestCombatSigils)                                           {}
func (Service) RequestCreateAdventureParty(RequestCreateAdventureParty)                           {}
func (Service) RequestFriendFinderCode(RequestFriendFinderCode)                                   {}
func (Service) RequestFriendlyPlayerQuest(RequestFriendlyPlayerQuest)                             {}
func (Service) RequestFriendlyPlayerQuest2(RequestFriendlyPlayerQuest2)                           {}
func (Service) RequestFriendlyPlayers(RequestFriendlyPlayers)                                     {}
func (Service) RequestHouseTeleport(RequestHouseTeleport)                                         {}
func (Service) RequestJoinAdventureParty(RequestJoinAdventureParty)                               {}
func (Service) RequestLeaveAdventureParty(RequestLeaveAdventureParty)                             {}
func (Service) RequestNextClosestQuest(RequestNextClosestQuest)                                   {}
func (Service) RequestPrivacyOptions(RequestPrivacyOptions)                                       {}
func (Service) RequestPvPActor(RequestPvPActor)                                                   {}
func (Service) RequestPvPKiosk(RequestPvPKiosk)                                                   {}
func (Service) RequestQuestDialog(RequestQuestDialog)                                             {}
func (Service) RequestQuickSell(RequestQuickSell)                                                 {}
func (Service) RequestTeamUpInfo(RequestTeamUpInfo)                                               {}
func (Service) RequestToggleLockItem(RequestToggleLockItem)                                       {}
func (Service) RequestVolunteerInfo(RequestVolunteerInfo)                                         {}
func (Service) RespecConfirm(RespecConfirm)                                                       {}
func (Service) ResponsePrivacyOptions(ResponsePrivacyOptions)                                     {}
func (Service) RideMount(RideMount)                                                               {}
func (Service) SeamstressOpen(SeamstressOpen)                                                     {}
func (Service) SendFriendFinderCode(SendFriendFinderCode)                                         {}
func (Service) SendTalentDataCSR(SendTalentDataCSR)                                               {}
func (Service) SetDeckName(SetDeckName)                                                           {}
func (Service) DontAllowFriendFinderCodes(DontAllowFriendFinderCodes)                             {}
func (Service) SetFriendlyPlayer(SetFriendlyPlayer)                                               {}
func (Service) SetRentalTimer(SetRentalTimer)                                                     {}
func (Service) SetVolunteerFlag(SetVolunteerFlag)                                                 {}
func (Service) SharedBankDeleteReagentOrPetSnack(SharedBankDeleteReagentOrPetSnack)               {}
func (Service) SharedBankDeleteReagentOrPetSnackConfirm(SharedBankDeleteReagentOrPetSnackConfirm) {}
func (Service) ShopBuyConfirm(ShopBuyConfirm)                                                     {}
func (Service) ShopBuyRequest(ShopBuyRequest)                                                     {}
func (Service) ShopList(ShopList)                                                                 {}
func (Service) ShopSellConfirm(ShopSellConfirm)                                                   {}
func (Service) ShopSellRequest(ShopSellRequest)                                                   {}
func (Service) ShowcasedStoreItemInfo(ShowcasedStoreItemInfo)                                     {}
func (Service) ShowClientMessageBox(ShowClientMessageBox)                                         {}
func (Service) ShowGUI(ShowGUI)                                                                   {}
func (Service) SnackList(SnackList)                                                               {}
func (Service) SpellList(SpellList)                                                               {}
func (Service) SpellTrainComplete(SpellTrainComplete)                                             {}
func (Service) StartRide(StartRide)                                                               {}
func (Service) StitchItems(StitchItems)                                                           {}
func (Service) StitchItemsConfirm(StitchItemsConfirm)                                             {}
func (Service) StorageClientAdd(StorageClientAdd)                                                 {}
func (Service) StorageClientRemove(StorageClientRemove)                                           {}
func (Service) SubmitCombatSigils(SubmitCombatSigils)                                             {}
func (Service) SubscriberOnlyItems(SubscriberOnlyItems)                                           {}
func (Service) TimedAccessPasses(TimedAccessPasses)                                               {}
func (Service) TradeChangeItem(TradeChangeItem)                                                   {}
func (Service) TradeChangeMoney(TradeChangeMoney)                                                 {}
func (Service) TradeCreate(TradeCreate)                                                           {}
func (Service) TradeJoinStatus(TradeJoinStatus)                                                   {}
func (Service) TradeReadyStatus(TradeReadyStatus)                                                 {}
func (Service) TradeRequest(TradeRequest)                                                         {}
func (Service) TradeResult(TradeResult)                                                           {}
func (Service) Train(Train)                                                                       {}
func (Service) TreasureBuy(TreasureBuy)                                                           {}
func (Service) TreasureBuyConfirm(TreasureBuyConfirm)                                             {}
func (Service) TreasureShopList(TreasureShopList)                                                 {}
func (Service) TutorialEvent(TutorialEvent)                                                       {}
func (Service) UnstitchItems(UnstitchItems)                                                       {}
func (Service) UnstitchOpen(UnstitchOpen)                                                         {}
func (Service) UpdateArenaPoints(UpdateArenaPoints)                                               {}
func (Service) UpdateFriendlyPlayerWorlds(UpdateFriendlyPlayerWorlds)                             {}
func (Service) UpdateFriendlyWorld(UpdateFriendlyWorld)                                           {}
func (Service) UpdateGender(UpdateGender)                                                         {}
func (Service) UpdateGold(UpdateGold)                                                             {}
func (Service) UpdateHealth(UpdateHealth)                                                         {}
func (Service) UpdateMana(UpdateMana)                                                             {}
func (Service) UpdatePotions(UpdatePotions)                                                       {}
func (Service) UpdatePowerPip(UpdatePowerPip)                                                     {}
func (Service) UpdatePrivacyOptions(UpdatePrivacyOptions)                                         {}
func (Service) UpdateSchool(UpdateSchool)                                                         {}
func (Service) UpdateShadowPipRating(UpdateShadowPipRating)                                       {}
func (Service) UpdateTraining(UpdateTraining)                                                     {}
func (Service) UpdateVolunteerInfo(UpdateVolunteerInfo)                                           {}
func (Service) UpdateXP(UpdateXP)                                                                 {}
func (Service) UseFriendFinderCode(UseFriendFinderCode)                                           {}
func (Service) UseFriendFinderCodeResponse(UseFriendFinderCodeResponse)                           {}
func (Service) UsePotion(UsePotion)                                                               {}
func (Service) UseRecipe(UseRecipe)                                                               {}
func (Service) VolunteerRequest(VolunteerRequest)                                                 {}
func (Service) VolunteerTeamHelpComplete(VolunteerTeamHelpComplete)                               {}
func (Service) VolunteerTeamHelpJoin(VolunteerTeamHelpJoin)                                       {}
func (Service) WizGameStats(WizGameStats)                                                         {}
func (Service) WizInventoryClientAdd(WizInventoryClientAdd)                                       {}
func (Service) WizInventoryClientRemove(WizInventoryClientRemove)                                 {}
func (Service) WorldTeleportList(WorldTeleportList)                                               {}
func (Service) WorldTeleportRequest(WorldTeleportRequest)                                         {}

func RegisterService(r *proto.MessageRouter, s service) {
	proto.RegisterMessageHandler(r, 12, 1, s.AcceptQuestBogus)
	proto.RegisterMessageHandler(r, 12, 2, s.AccessPassBuyConfirm)
	proto.RegisterMessageHandler(r, 12, 3, s.AccessPassBuyRequest)
	proto.RegisterMessageHandler(r, 12, 4, s.AccessPassDeclined)
	proto.RegisterMessageHandler(r, 12, 5, s.AccessPassInfoRequest)
	proto.RegisterMessageHandler(r, 12, 6, s.AccessPassOffer)
	proto.RegisterMessageHandler(r, 12, 7, s.AccessPassRejected)
	proto.RegisterMessageHandler(r, 12, 8, s.ActorDialog)
	proto.RegisterMessageHandler(r, 12, 9, s.AddQuestFinder)
	proto.RegisterMessageHandler(r, 12, 10, s.AddSpellToBook)
	proto.RegisterMessageHandler(r, 12, 11, s.AddSpellToDeck)
	proto.RegisterMessageHandler(r, 12, 12, s.AddTreasureSpellToBook)
	proto.RegisterMessageHandler(r, 12, 13, s.AddTreasureSpellToDeck)
	proto.RegisterMessageHandler(r, 12, 14, s.AdventurePartyMessage)
	proto.RegisterMessageHandler(r, 12, 15, s.Aggro)
	proto.RegisterMessageHandler(r, 12, 16, s.AlchemyStation)
	proto.RegisterMessageHandler(r, 12, 17, s.ArenaError)
	proto.RegisterMessageHandler(r, 12, 18, s.AuctionHouseContents)
	proto.RegisterMessageHandler(r, 12, 19, s.AuctionHouseMoreAcknowledgement)
	proto.RegisterMessageHandler(r, 12, 20, s.AuctionHouseRequest)
	proto.RegisterMessageHandler(r, 12, 21, s.AuctionRequestBank)
	proto.RegisterMessageHandler(r, 12, 22, s.AuctionResponse)
	proto.RegisterMessageHandler(r, 12, 23, s.BankDelete)
	proto.RegisterMessageHandler(r, 12, 24, s.BankDeleteConfirm)
	proto.RegisterMessageHandler(r, 12, 25, s.BankToBankConfirm)
	proto.RegisterMessageHandler(r, 12, 26, s.BankToInvConfirm)
	proto.RegisterMessageHandler(r, 12, 27, s.BoosterDistributionResults)
	proto.RegisterMessageHandler(r, 12, 28, s.BracketReport)
	proto.RegisterMessageHandler(r, 12, 29, s.BuyEnergyConfirm)
	proto.RegisterMessageHandler(r, 12, 30, s.ChatFilterBlack)
	proto.RegisterMessageHandler(r, 12, 31, s.ChatFilterWhite)
	proto.RegisterMessageHandler(r, 12, 32, s.ChooseFocus)
	proto.RegisterMessageHandler(r, 12, 33, s.ClearAllCraftingSlots)
	proto.RegisterMessageHandler(r, 12, 34, s.ClearEquippedDeck)
	proto.RegisterMessageHandler(r, 12, 35, s.CompleteDialog)
	proto.RegisterMessageHandler(r, 12, 36, s.ControlMusic)
	proto.RegisterMessageHandler(r, 12, 37, s.CraftingSlotAdd)
	proto.RegisterMessageHandler(r, 12, 38, s.CraftingSlotCount)
	proto.RegisterMessageHandler(r, 12, 39, s.CraftingSlotRemove)
	proto.RegisterMessageHandler(r, 12, 40, s.CreateBoosterDistribution)
	proto.RegisterMessageHandler(r, 12, 41, s.CrownBalance)
	proto.RegisterMessageHandler(r, 12, 42, s.CrownsBuyConfirm)
	proto.RegisterMessageHandler(r, 12, 43, s.CrownsBuyRequest)
	proto.RegisterMessageHandler(r, 12, 44, s.CrownServicesOpen)
	proto.RegisterMessageHandler(r, 12, 45, s.CSRCrownBalance)
	proto.RegisterMessageHandler(r, 12, 46, s.CSRRequestBlobs)
	proto.RegisterMessageHandler(r, 12, 47, s.DeliveryInvoiceRequestBank)
	proto.RegisterMessageHandler(r, 12, 48, s.DeliveryInvoiceTransferObjectsFromStorageToBank)
	proto.RegisterMessageHandler(r, 12, 49, s.DismissTutorialTip)
	proto.RegisterMessageHandler(r, 12, 50, s.DoneShopping)
	proto.RegisterMessageHandler(r, 12, 51, s.DuelSimResult)
	proto.RegisterMessageHandler(r, 12, 52, s.DyeConfirm)
	proto.RegisterMessageHandler(r, 12, 53, s.DyeRequest)
	proto.RegisterMessageHandler(r, 12, 54, s.DyeShopOpen)
	proto.RegisterMessageHandler(r, 12, 55, s.ElixirStateChange)
	proto.RegisterMessageHandler(r, 12, 56, s.EncounterDialog)
	proto.RegisterMessageHandler(r, 12, 57, s.EnergyBuyRequest)
	proto.RegisterMessageHandler(r, 12, 58, s.EnergyShopOpen)
	proto.RegisterMessageHandler(r, 12, 59, s.EnterMinigame)
	proto.RegisterMessageHandler(r, 12, 60, s.ExitConfirmTeleport)
	proto.RegisterMessageHandler(r, 12, 61, s.ExpandPvPSearch)
	proto.RegisterMessageHandler(r, 12, 62, s.FreeTourneyCreditInfo)
	proto.RegisterMessageHandler(r, 12, 63, s.GetSnackList)
	proto.RegisterMessageHandler(r, 12, 64, s.GetSubscriberOnlyItems)
	proto.RegisterMessageHandler(r, 12, 65, s.GetTimedAccessPasses)
	proto.RegisterMessageHandler(r, 12, 66, s.GoHome)
	proto.RegisterMessageHandler(r, 12, 67, s.GotoDorm)
	proto.RegisterMessageHandler(r, 12, 68, s.GotoFriendlyPlayer)
	proto.RegisterMessageHandler(r, 12, 69, s.GroupQuestCredit)
	proto.RegisterMessageHandler(r, 12, 70, s.InteractAvailableQuest)
	proto.RegisterMessageHandler(r, 12, 71, s.InteractCompleteGoal)
	proto.RegisterMessageHandler(r, 12, 72, s.InteractUnderwayQuest)
	proto.RegisterMessageHandler(r, 12, 73, s.InvToBankConfirm)
	proto.RegisterMessageHandler(r, 12, 74, s.ItemDrop)
	proto.RegisterMessageHandler(r, 12, 75, s.ItemLock)
	proto.RegisterMessageHandler(r, 12, 76, s.ItemOverflowToBank)
	proto.RegisterMessageHandler(r, 12, 77, s.LeaderboardFriendRequest)
	proto.RegisterMessageHandler(r, 12, 78, s.LeaderboardRequest)
	proto.RegisterMessageHandler(r, 12, 79, s.LeaderboardResponse)
	proto.RegisterMessageHandler(r, 12, 80, s.Leash)
	proto.RegisterMessageHandler(r, 12, 81, s.LeashOffset)
	proto.RegisterMessageHandler(r, 12, 82, s.LeaveAdventureParty)
	proto.RegisterMessageHandler(r, 12, 83, s.LeaveMinigame)
	proto.RegisterMessageHandler(r, 12, 84, s.LeaveSigilTimerWaiting)
	proto.RegisterMessageHandler(r, 12, 85, s.LemuriaStatus)
	proto.RegisterMessageHandler(r, 12, 86, s.LevelUp)
	proto.RegisterMessageHandler(r, 12, 87, s.LogClientResolution)
	proto.RegisterMessageHandler(r, 12, 88, s.LogOffer)
	proto.RegisterMessageHandler(r, 12, 89, s.LogPatchClientPatchTime)
	proto.RegisterMessageHandler(r, 12, 90, s.Loot)
	proto.RegisterMessageHandler(r, 12, 91, s.MinigameKiosk)
	proto.RegisterMessageHandler(r, 12, 92, s.MinigameRewards)
	proto.RegisterMessageHandler(r, 12, 93, s.MinigameSelect)
	proto.RegisterMessageHandler(r, 12, 94, s.MinigameTimerEnd)
	proto.RegisterMessageHandler(r, 12, 95, s.MinigameTimerStart)
	proto.RegisterMessageHandler(r, 12, 96, s.MoveBankToBank)
	proto.RegisterMessageHandler(r, 12, 97, s.MoveBankToInv)
	proto.RegisterMessageHandler(r, 12, 98, s.MoveInvToBank)
	proto.RegisterMessageHandler(r, 12, 99, s.NewTitle)
	proto.RegisterMessageHandler(r, 12, 100, s.NotifySchoolFocus)
	proto.RegisterMessageHandler(r, 12, 101, s.OpenBank)
	proto.RegisterMessageHandler(r, 12, 102, s.PaidLootCrownsBalance)
	proto.RegisterMessageHandler(r, 12, 103, s.PaidLootRollError)
	proto.RegisterMessageHandler(r, 12, 104, s.PaidLootRollPrompt)
	proto.RegisterMessageHandler(r, 12, 105, s.PaidLootRollResponse)
	proto.RegisterMessageHandler(r, 12, 106, s.PaidLootRollResult)
	proto.RegisterMessageHandler(r, 12, 107, s.PatchingBlocked)
	proto.RegisterMessageHandler(r, 12, 108, s.PCSCacheSegReqsSummaryRequest)
	proto.RegisterMessageHandler(r, 12, 109, s.PCSListRequest)
	proto.RegisterMessageHandler(r, 12, 110, s.PCSListResponse)
	proto.RegisterMessageHandler(r, 12, 111, s.PCSPATCH)
	proto.RegisterMessageHandler(r, 12, 112, s.PCSPriceLockRequest)
	proto.RegisterMessageHandler(r, 12, 113, s.PCSPriceLockResponse)
	proto.RegisterMessageHandler(r, 12, 114, s.PCSPurchaseRequest)
	proto.RegisterMessageHandler(r, 12, 115, s.PCSPurchaseResponse)
	proto.RegisterMessageHandler(r, 12, 116, s.PCSSegDataRequest)
	proto.RegisterMessageHandler(r, 12, 117, s.PCSSegDataResponse)
	proto.RegisterMessageHandler(r, 12, 118, s.PCSUpdateUserWishlist)
	proto.RegisterMessageHandler(r, 12, 119, s.PetGameKiosk)
	proto.RegisterMessageHandler(r, 12, 120, s.PetHatchCreate)
	proto.RegisterMessageHandler(r, 12, 121, s.PetHatchJoinStatus)
	proto.RegisterMessageHandler(r, 12, 122, s.PetHatchReadyStatus)
	proto.RegisterMessageHandler(r, 12, 123, s.PetHatchRequest)
	proto.RegisterMessageHandler(r, 12, 124, s.PetHatchResult)
	proto.RegisterMessageHandler(r, 12, 125, s.PetRenameConfirm)
	proto.RegisterMessageHandler(r, 12, 126, s.PetRenameRequest)
	proto.RegisterMessageHandler(r, 12, 127, s.PlayerArrived)
	proto.RegisterMessageHandler(r, 12, 128, s.PlayerWizbang)
	proto.RegisterMessageHandler(r, 12, 129, s.PlayMusic)
	proto.RegisterMessageHandler(r, 12, 130, s.PotionBuyConfirm)
	proto.RegisterMessageHandler(r, 12, 131, s.PotionBuyRequest)
	proto.RegisterMessageHandler(r, 12, 132, s.PotionShopOpen)
	proto.RegisterMessageHandler(r, 12, 133, s.PreLeaderboard)
	proto.RegisterMessageHandler(r, 12, 134, s.PremiumContent)
	proto.RegisterMessageHandler(r, 12, 135, s.PrePvPKiosk)
	proto.RegisterMessageHandler(r, 12, 136, s.PvPConfirm)
	proto.RegisterMessageHandler(r, 12, 137, s.PvPConfirmTourney)
	proto.RegisterMessageHandler(r, 12, 138, s.PvPConsumePvPTourneyCurrency)
	proto.RegisterMessageHandler(r, 12, 139, s.PvPIntent)
	proto.RegisterMessageHandler(r, 12, 140, s.PvpMatchRequest)
	proto.RegisterMessageHandler(r, 12, 141, s.PvPQueue)
	proto.RegisterMessageHandler(r, 12, 142, s.PvPRegisterFailed)
	proto.RegisterMessageHandler(r, 12, 143, s.PvPUpdateRequest)
	proto.RegisterMessageHandler(r, 12, 144, s.QuestDialog)
	proto.RegisterMessageHandler(r, 12, 145, s.QuestFinderOption)
	proto.RegisterMessageHandler(r, 12, 146, s.QuestRewards)
	proto.RegisterMessageHandler(r, 12, 147, s.QuickSellRequestBank)
	proto.RegisterMessageHandler(r, 12, 148, s.ReagentAdd)
	proto.RegisterMessageHandler(r, 12, 149, s.ReagentRemove)
	proto.RegisterMessageHandler(r, 12, 150, s.ReagentRemoveRequest)
	proto.RegisterMessageHandler(r, 12, 151, s.ReagentUpdate)
	proto.RegisterMessageHandler(r, 12, 152, s.RecipeAdd)
	proto.RegisterMessageHandler(r, 12, 153, s.RecipeRemove)
	proto.RegisterMessageHandler(r, 12, 154, s.Registrar)
	proto.RegisterMessageHandler(r, 12, 155, s.RemoveSpellFromBook)
	proto.RegisterMessageHandler(r, 12, 156, s.RemoveSpellFromDeck)
	proto.RegisterMessageHandler(r, 12, 157, s.RemoveTreasureSpellFromBook)
	proto.RegisterMessageHandler(r, 12, 158, s.RemoveTreasureSpellFromDeck)
	proto.RegisterMessageHandler(r, 12, 159, s.RemoveTreasureSpellFromVault)
	proto.RegisterMessageHandler(r, 12, 160, s.RentalUpdate)
	proto.RegisterMessageHandler(r, 12, 161, s.RequestActiveMapQuests)
	proto.RegisterMessageHandler(r, 12, 162, s.RequestAdventureParty)
	proto.RegisterMessageHandler(r, 12, 163, s.RequestCombatSigils)
	proto.RegisterMessageHandler(r, 12, 164, s.RequestCreateAdventureParty)
	proto.RegisterMessageHandler(r, 12, 165, s.RequestFriendFinderCode)
	proto.RegisterMessageHandler(r, 12, 166, s.RequestFriendlyPlayerQuest)
	proto.RegisterMessageHandler(r, 12, 167, s.RequestFriendlyPlayerQuest2)
	proto.RegisterMessageHandler(r, 12, 168, s.RequestFriendlyPlayers)
	proto.RegisterMessageHandler(r, 12, 169, s.RequestHouseTeleport)
	proto.RegisterMessageHandler(r, 12, 170, s.RequestJoinAdventureParty)
	proto.RegisterMessageHandler(r, 12, 171, s.RequestLeaveAdventureParty)
	proto.RegisterMessageHandler(r, 12, 172, s.RequestNextClosestQuest)
	proto.RegisterMessageHandler(r, 12, 173, s.RequestPrivacyOptions)
	proto.RegisterMessageHandler(r, 12, 174, s.RequestPvPActor)
	proto.RegisterMessageHandler(r, 12, 175, s.RequestPvPKiosk)
	proto.RegisterMessageHandler(r, 12, 176, s.RequestQuestDialog)
	proto.RegisterMessageHandler(r, 12, 177, s.RequestQuickSell)
	proto.RegisterMessageHandler(r, 12, 178, s.RequestTeamUpInfo)
	proto.RegisterMessageHandler(r, 12, 179, s.RequestToggleLockItem)
	proto.RegisterMessageHandler(r, 12, 180, s.RequestVolunteerInfo)
	proto.RegisterMessageHandler(r, 12, 181, s.RespecConfirm)
	proto.RegisterMessageHandler(r, 12, 182, s.ResponsePrivacyOptions)
	proto.RegisterMessageHandler(r, 12, 183, s.RideMount)
	proto.RegisterMessageHandler(r, 12, 184, s.SeamstressOpen)
	proto.RegisterMessageHandler(r, 12, 185, s.SendFriendFinderCode)
	proto.RegisterMessageHandler(r, 12, 186, s.SendTalentDataCSR)
	proto.RegisterMessageHandler(r, 12, 187, s.SetDeckName)
	proto.RegisterMessageHandler(r, 12, 188, s.DontAllowFriendFinderCodes)
	proto.RegisterMessageHandler(r, 12, 189, s.SetFriendlyPlayer)
	proto.RegisterMessageHandler(r, 12, 190, s.SetRentalTimer)
	proto.RegisterMessageHandler(r, 12, 191, s.SetVolunteerFlag)
	proto.RegisterMessageHandler(r, 12, 192, s.SharedBankDeleteReagentOrPetSnack)
	proto.RegisterMessageHandler(r, 12, 193, s.SharedBankDeleteReagentOrPetSnackConfirm)
	proto.RegisterMessageHandler(r, 12, 194, s.ShopBuyConfirm)
	proto.RegisterMessageHandler(r, 12, 195, s.ShopBuyRequest)
	proto.RegisterMessageHandler(r, 12, 196, s.ShopList)
	proto.RegisterMessageHandler(r, 12, 197, s.ShopSellConfirm)
	proto.RegisterMessageHandler(r, 12, 198, s.ShopSellRequest)
	proto.RegisterMessageHandler(r, 12, 199, s.ShowcasedStoreItemInfo)
	proto.RegisterMessageHandler(r, 12, 200, s.ShowClientMessageBox)
	proto.RegisterMessageHandler(r, 12, 201, s.ShowGUI)
	proto.RegisterMessageHandler(r, 12, 202, s.SnackList)
	proto.RegisterMessageHandler(r, 12, 203, s.SpellList)
	proto.RegisterMessageHandler(r, 12, 204, s.SpellTrainComplete)
	proto.RegisterMessageHandler(r, 12, 205, s.StartRide)
	proto.RegisterMessageHandler(r, 12, 206, s.StitchItems)
	proto.RegisterMessageHandler(r, 12, 207, s.StitchItemsConfirm)
	proto.RegisterMessageHandler(r, 12, 208, s.StorageClientAdd)
	proto.RegisterMessageHandler(r, 12, 209, s.StorageClientRemove)
	proto.RegisterMessageHandler(r, 12, 210, s.SubmitCombatSigils)
	proto.RegisterMessageHandler(r, 12, 211, s.SubscriberOnlyItems)
	proto.RegisterMessageHandler(r, 12, 212, s.TimedAccessPasses)
	proto.RegisterMessageHandler(r, 12, 213, s.TradeChangeItem)
	proto.RegisterMessageHandler(r, 12, 214, s.TradeChangeMoney)
	proto.RegisterMessageHandler(r, 12, 215, s.TradeCreate)
	proto.RegisterMessageHandler(r, 12, 216, s.TradeJoinStatus)
	proto.RegisterMessageHandler(r, 12, 217, s.TradeReadyStatus)
	proto.RegisterMessageHandler(r, 12, 218, s.TradeRequest)
	proto.RegisterMessageHandler(r, 12, 219, s.TradeResult)
	proto.RegisterMessageHandler(r, 12, 220, s.Train)
	proto.RegisterMessageHandler(r, 12, 221, s.TreasureBuy)
	proto.RegisterMessageHandler(r, 12, 222, s.TreasureBuyConfirm)
	proto.RegisterMessageHandler(r, 12, 223, s.TreasureShopList)
	proto.RegisterMessageHandler(r, 12, 224, s.TutorialEvent)
	proto.RegisterMessageHandler(r, 12, 225, s.UnstitchItems)
	proto.RegisterMessageHandler(r, 12, 226, s.UnstitchOpen)
	proto.RegisterMessageHandler(r, 12, 227, s.UpdateArenaPoints)
	proto.RegisterMessageHandler(r, 12, 228, s.UpdateFriendlyPlayerWorlds)
	proto.RegisterMessageHandler(r, 12, 229, s.UpdateFriendlyWorld)
	proto.RegisterMessageHandler(r, 12, 230, s.UpdateGender)
	proto.RegisterMessageHandler(r, 12, 231, s.UpdateGold)
	proto.RegisterMessageHandler(r, 12, 232, s.UpdateHealth)
	proto.RegisterMessageHandler(r, 12, 233, s.UpdateMana)
	proto.RegisterMessageHandler(r, 12, 234, s.UpdatePotions)
	proto.RegisterMessageHandler(r, 12, 235, s.UpdatePowerPip)
	proto.RegisterMessageHandler(r, 12, 236, s.UpdatePrivacyOptions)
	proto.RegisterMessageHandler(r, 12, 237, s.UpdateSchool)
	proto.RegisterMessageHandler(r, 12, 238, s.UpdateShadowPipRating)
	proto.RegisterMessageHandler(r, 12, 239, s.UpdateTraining)
	proto.RegisterMessageHandler(r, 12, 240, s.UpdateVolunteerInfo)
	proto.RegisterMessageHandler(r, 12, 241, s.UpdateXP)
	proto.RegisterMessageHandler(r, 12, 242, s.UseFriendFinderCode)
	proto.RegisterMessageHandler(r, 12, 243, s.UseFriendFinderCodeResponse)
	proto.RegisterMessageHandler(r, 12, 244, s.UsePotion)
	proto.RegisterMessageHandler(r, 12, 245, s.UseRecipe)
	proto.RegisterMessageHandler(r, 12, 246, s.VolunteerRequest)
	proto.RegisterMessageHandler(r, 12, 247, s.VolunteerTeamHelpComplete)
	proto.RegisterMessageHandler(r, 12, 248, s.VolunteerTeamHelpJoin)
	proto.RegisterMessageHandler(r, 12, 249, s.WizGameStats)
	proto.RegisterMessageHandler(r, 12, 250, s.WizInventoryClientAdd)
	proto.RegisterMessageHandler(r, 12, 251, s.WizInventoryClientRemove)
	proto.RegisterMessageHandler(r, 12, 252, s.WorldTeleportList)
	proto.RegisterMessageHandler(r, 12, 253, s.WorldTeleportRequest)
}

func NewClient(c *proto.Client) Client {
	return Client{c}
}

func (c Client) AcceptQuestBogus(m *AcceptQuestBogus) error {
	return c.c.WriteMessage(12, 1, m)
}

func (c Client) AccessPassBuyConfirm(m *AccessPassBuyConfirm) error {
	return c.c.WriteMessage(12, 2, m)
}

func (c Client) AccessPassBuyRequest(m *AccessPassBuyRequest) error {
	return c.c.WriteMessage(12, 3, m)
}

func (c Client) AccessPassDeclined(m *AccessPassDeclined) error {
	return c.c.WriteMessage(12, 4, m)
}

func (c Client) AccessPassInfoRequest(m *AccessPassInfoRequest) error {
	return c.c.WriteMessage(12, 5, m)
}

func (c Client) AccessPassOffer(m *AccessPassOffer) error {
	return c.c.WriteMessage(12, 6, m)
}

func (c Client) AccessPassRejected(m *AccessPassRejected) error {
	return c.c.WriteMessage(12, 7, m)
}

func (c Client) ActorDialog(m *ActorDialog) error {
	return c.c.WriteMessage(12, 8, m)
}

func (c Client) AddQuestFinder(m *AddQuestFinder) error {
	return c.c.WriteMessage(12, 9, m)
}

func (c Client) AddSpellToBook(m *AddSpellToBook) error {
	return c.c.WriteMessage(12, 10, m)
}

func (c Client) AddSpellToDeck(m *AddSpellToDeck) error {
	return c.c.WriteMessage(12, 11, m)
}

func (c Client) AddTreasureSpellToBook(m *AddTreasureSpellToBook) error {
	return c.c.WriteMessage(12, 12, m)
}

func (c Client) AddTreasureSpellToDeck(m *AddTreasureSpellToDeck) error {
	return c.c.WriteMessage(12, 13, m)
}

func (c Client) AdventurePartyMessage(m *AdventurePartyMessage) error {
	return c.c.WriteMessage(12, 14, m)
}

func (c Client) Aggro(m *Aggro) error {
	return c.c.WriteMessage(12, 15, m)
}

func (c Client) AlchemyStation(m *AlchemyStation) error {
	return c.c.WriteMessage(12, 16, m)
}

func (c Client) ArenaError(m *ArenaError) error {
	return c.c.WriteMessage(12, 17, m)
}

func (c Client) AuctionHouseContents(m *AuctionHouseContents) error {
	return c.c.WriteMessage(12, 18, m)
}

func (c Client) AuctionHouseMoreAcknowledgement(m *AuctionHouseMoreAcknowledgement) error {
	return c.c.WriteMessage(12, 19, m)
}

func (c Client) AuctionHouseRequest(m *AuctionHouseRequest) error {
	return c.c.WriteMessage(12, 20, m)
}

func (c Client) AuctionRequestBank(m *AuctionRequestBank) error {
	return c.c.WriteMessage(12, 21, m)
}

func (c Client) AuctionResponse(m *AuctionResponse) error {
	return c.c.WriteMessage(12, 22, m)
}

func (c Client) BankDelete(m *BankDelete) error {
	return c.c.WriteMessage(12, 23, m)
}

func (c Client) BankDeleteConfirm(m *BankDeleteConfirm) error {
	return c.c.WriteMessage(12, 24, m)
}

func (c Client) BankToBankConfirm(m *BankToBankConfirm) error {
	return c.c.WriteMessage(12, 25, m)
}

func (c Client) BankToInvConfirm(m *BankToInvConfirm) error {
	return c.c.WriteMessage(12, 26, m)
}

func (c Client) BoosterDistributionResults(m *BoosterDistributionResults) error {
	return c.c.WriteMessage(12, 27, m)
}

func (c Client) BracketReport(m *BracketReport) error {
	return c.c.WriteMessage(12, 28, m)
}

func (c Client) BuyEnergyConfirm(m *BuyEnergyConfirm) error {
	return c.c.WriteMessage(12, 29, m)
}

func (c Client) ChatFilterBlack(m *ChatFilterBlack) error {
	return c.c.WriteMessage(12, 30, m)
}

func (c Client) ChatFilterWhite(m *ChatFilterWhite) error {
	return c.c.WriteMessage(12, 31, m)
}

func (c Client) ChooseFocus(m *ChooseFocus) error {
	return c.c.WriteMessage(12, 32, m)
}

func (c Client) ClearAllCraftingSlots(m *ClearAllCraftingSlots) error {
	return c.c.WriteMessage(12, 33, m)
}

func (c Client) ClearEquippedDeck(m *ClearEquippedDeck) error {
	return c.c.WriteMessage(12, 34, m)
}

func (c Client) CompleteDialog(m *CompleteDialog) error {
	return c.c.WriteMessage(12, 35, m)
}

func (c Client) ControlMusic(m *ControlMusic) error {
	return c.c.WriteMessage(12, 36, m)
}

func (c Client) CraftingSlotAdd(m *CraftingSlotAdd) error {
	return c.c.WriteMessage(12, 37, m)
}

func (c Client) CraftingSlotCount(m *CraftingSlotCount) error {
	return c.c.WriteMessage(12, 38, m)
}

func (c Client) CraftingSlotRemove(m *CraftingSlotRemove) error {
	return c.c.WriteMessage(12, 39, m)
}

func (c Client) CreateBoosterDistribution(m *CreateBoosterDistribution) error {
	return c.c.WriteMessage(12, 40, m)
}

func (c Client) CrownBalance(m *CrownBalance) error {
	return c.c.WriteMessage(12, 41, m)
}

func (c Client) CrownsBuyConfirm(m *CrownsBuyConfirm) error {
	return c.c.WriteMessage(12, 42, m)
}

func (c Client) CrownsBuyRequest(m *CrownsBuyRequest) error {
	return c.c.WriteMessage(12, 43, m)
}

func (c Client) CrownServicesOpen(m *CrownServicesOpen) error {
	return c.c.WriteMessage(12, 44, m)
}

func (c Client) CSRCrownBalance(m *CSRCrownBalance) error {
	return c.c.WriteMessage(12, 45, m)
}

func (c Client) CSRRequestBlobs(m *CSRRequestBlobs) error {
	return c.c.WriteMessage(12, 46, m)
}

func (c Client) DeliveryInvoiceRequestBank(m *DeliveryInvoiceRequestBank) error {
	return c.c.WriteMessage(12, 47, m)
}

func (c Client) DeliveryInvoiceTransferObjectsFromStorageToBank(m *DeliveryInvoiceTransferObjectsFromStorageToBank) error {
	return c.c.WriteMessage(12, 48, m)
}

func (c Client) DismissTutorialTip(m *DismissTutorialTip) error {
	return c.c.WriteMessage(12, 49, m)
}

func (c Client) DoneShopping(m *DoneShopping) error {
	return c.c.WriteMessage(12, 50, m)
}

func (c Client) DuelSimResult(m *DuelSimResult) error {
	return c.c.WriteMessage(12, 51, m)
}

func (c Client) DyeConfirm(m *DyeConfirm) error {
	return c.c.WriteMessage(12, 52, m)
}

func (c Client) DyeRequest(m *DyeRequest) error {
	return c.c.WriteMessage(12, 53, m)
}

func (c Client) DyeShopOpen(m *DyeShopOpen) error {
	return c.c.WriteMessage(12, 54, m)
}

func (c Client) ElixirStateChange(m *ElixirStateChange) error {
	return c.c.WriteMessage(12, 55, m)
}

func (c Client) EncounterDialog(m *EncounterDialog) error {
	return c.c.WriteMessage(12, 56, m)
}

func (c Client) EnergyBuyRequest(m *EnergyBuyRequest) error {
	return c.c.WriteMessage(12, 57, m)
}

func (c Client) EnergyShopOpen(m *EnergyShopOpen) error {
	return c.c.WriteMessage(12, 58, m)
}

func (c Client) EnterMinigame(m *EnterMinigame) error {
	return c.c.WriteMessage(12, 59, m)
}

func (c Client) ExitConfirmTeleport(m *ExitConfirmTeleport) error {
	return c.c.WriteMessage(12, 60, m)
}

func (c Client) ExpandPvPSearch(m *ExpandPvPSearch) error {
	return c.c.WriteMessage(12, 61, m)
}

func (c Client) FreeTourneyCreditInfo(m *FreeTourneyCreditInfo) error {
	return c.c.WriteMessage(12, 62, m)
}

func (c Client) GetSnackList(m *GetSnackList) error {
	return c.c.WriteMessage(12, 63, m)
}

func (c Client) GetSubscriberOnlyItems(m *GetSubscriberOnlyItems) error {
	return c.c.WriteMessage(12, 64, m)
}

func (c Client) GetTimedAccessPasses(m *GetTimedAccessPasses) error {
	return c.c.WriteMessage(12, 65, m)
}

func (c Client) GoHome(m *GoHome) error {
	return c.c.WriteMessage(12, 66, m)
}

func (c Client) GotoDorm(m *GotoDorm) error {
	return c.c.WriteMessage(12, 67, m)
}

func (c Client) GotoFriendlyPlayer(m *GotoFriendlyPlayer) error {
	return c.c.WriteMessage(12, 68, m)
}

func (c Client) GroupQuestCredit(m *GroupQuestCredit) error {
	return c.c.WriteMessage(12, 69, m)
}

func (c Client) InteractAvailableQuest(m *InteractAvailableQuest) error {
	return c.c.WriteMessage(12, 70, m)
}

func (c Client) InteractCompleteGoal(m *InteractCompleteGoal) error {
	return c.c.WriteMessage(12, 71, m)
}

func (c Client) InteractUnderwayQuest(m *InteractUnderwayQuest) error {
	return c.c.WriteMessage(12, 72, m)
}

func (c Client) InvToBankConfirm(m *InvToBankConfirm) error {
	return c.c.WriteMessage(12, 73, m)
}

func (c Client) ItemDrop(m *ItemDrop) error {
	return c.c.WriteMessage(12, 74, m)
}

func (c Client) ItemLock(m *ItemLock) error {
	return c.c.WriteMessage(12, 75, m)
}

func (c Client) ItemOverflowToBank(m *ItemOverflowToBank) error {
	return c.c.WriteMessage(12, 76, m)
}

func (c Client) LeaderboardFriendRequest(m *LeaderboardFriendRequest) error {
	return c.c.WriteMessage(12, 77, m)
}

func (c Client) LeaderboardRequest(m *LeaderboardRequest) error {
	return c.c.WriteMessage(12, 78, m)
}

func (c Client) LeaderboardResponse(m *LeaderboardResponse) error {
	return c.c.WriteMessage(12, 79, m)
}

func (c Client) Leash(m *Leash) error {
	return c.c.WriteMessage(12, 80, m)
}

func (c Client) LeashOffset(m *LeashOffset) error {
	return c.c.WriteMessage(12, 81, m)
}

func (c Client) LeaveAdventureParty(m *LeaveAdventureParty) error {
	return c.c.WriteMessage(12, 82, m)
}

func (c Client) LeaveMinigame(m *LeaveMinigame) error {
	return c.c.WriteMessage(12, 83, m)
}

func (c Client) LeaveSigilTimerWaiting(m *LeaveSigilTimerWaiting) error {
	return c.c.WriteMessage(12, 84, m)
}

func (c Client) LemuriaStatus(m *LemuriaStatus) error {
	return c.c.WriteMessage(12, 85, m)
}

func (c Client) LevelUp(m *LevelUp) error {
	return c.c.WriteMessage(12, 86, m)
}

func (c Client) LogClientResolution(m *LogClientResolution) error {
	return c.c.WriteMessage(12, 87, m)
}

func (c Client) LogOffer(m *LogOffer) error {
	return c.c.WriteMessage(12, 88, m)
}

func (c Client) LogPatchClientPatchTime(m *LogPatchClientPatchTime) error {
	return c.c.WriteMessage(12, 89, m)
}

func (c Client) Loot(m *Loot) error {
	return c.c.WriteMessage(12, 90, m)
}

func (c Client) MinigameKiosk(m *MinigameKiosk) error {
	return c.c.WriteMessage(12, 91, m)
}

func (c Client) MinigameRewards(m *MinigameRewards) error {
	return c.c.WriteMessage(12, 92, m)
}

func (c Client) MinigameSelect(m *MinigameSelect) error {
	return c.c.WriteMessage(12, 93, m)
}

func (c Client) MinigameTimerEnd(m *MinigameTimerEnd) error {
	return c.c.WriteMessage(12, 94, m)
}

func (c Client) MinigameTimerStart(m *MinigameTimerStart) error {
	return c.c.WriteMessage(12, 95, m)
}

func (c Client) MoveBankToBank(m *MoveBankToBank) error {
	return c.c.WriteMessage(12, 96, m)
}

func (c Client) MoveBankToInv(m *MoveBankToInv) error {
	return c.c.WriteMessage(12, 97, m)
}

func (c Client) MoveInvToBank(m *MoveInvToBank) error {
	return c.c.WriteMessage(12, 98, m)
}

func (c Client) NewTitle(m *NewTitle) error {
	return c.c.WriteMessage(12, 99, m)
}

func (c Client) NotifySchoolFocus(m *NotifySchoolFocus) error {
	return c.c.WriteMessage(12, 100, m)
}

func (c Client) OpenBank(m *OpenBank) error {
	return c.c.WriteMessage(12, 101, m)
}

func (c Client) PaidLootCrownsBalance(m *PaidLootCrownsBalance) error {
	return c.c.WriteMessage(12, 102, m)
}

func (c Client) PaidLootRollError(m *PaidLootRollError) error {
	return c.c.WriteMessage(12, 103, m)
}

func (c Client) PaidLootRollPrompt(m *PaidLootRollPrompt) error {
	return c.c.WriteMessage(12, 104, m)
}

func (c Client) PaidLootRollResponse(m *PaidLootRollResponse) error {
	return c.c.WriteMessage(12, 105, m)
}

func (c Client) PaidLootRollResult(m *PaidLootRollResult) error {
	return c.c.WriteMessage(12, 106, m)
}

func (c Client) PatchingBlocked(m *PatchingBlocked) error {
	return c.c.WriteMessage(12, 107, m)
}

func (c Client) PCSCacheSegReqsSummaryRequest(m *PCSCacheSegReqsSummaryRequest) error {
	return c.c.WriteMessage(12, 108, m)
}

func (c Client) PCSListRequest(m *PCSListRequest) error {
	return c.c.WriteMessage(12, 109, m)
}

func (c Client) PCSListResponse(m *PCSListResponse) error {
	return c.c.WriteMessage(12, 110, m)
}

func (c Client) PCSPATCH(m *PCSPATCH) error {
	return c.c.WriteMessage(12, 111, m)
}

func (c Client) PCSPriceLockRequest(m *PCSPriceLockRequest) error {
	return c.c.WriteMessage(12, 112, m)
}

func (c Client) PCSPriceLockResponse(m *PCSPriceLockResponse) error {
	return c.c.WriteMessage(12, 113, m)
}

func (c Client) PCSPurchaseRequest(m *PCSPurchaseRequest) error {
	return c.c.WriteMessage(12, 114, m)
}

func (c Client) PCSPurchaseResponse(m *PCSPurchaseResponse) error {
	return c.c.WriteMessage(12, 115, m)
}

func (c Client) PCSSegDataRequest(m *PCSSegDataRequest) error {
	return c.c.WriteMessage(12, 116, m)
}

func (c Client) PCSSegDataResponse(m *PCSSegDataResponse) error {
	return c.c.WriteMessage(12, 117, m)
}

func (c Client) PCSUpdateUserWishlist(m *PCSUpdateUserWishlist) error {
	return c.c.WriteMessage(12, 118, m)
}

func (c Client) PetGameKiosk(m *PetGameKiosk) error {
	return c.c.WriteMessage(12, 119, m)
}

func (c Client) PetHatchCreate(m *PetHatchCreate) error {
	return c.c.WriteMessage(12, 120, m)
}

func (c Client) PetHatchJoinStatus(m *PetHatchJoinStatus) error {
	return c.c.WriteMessage(12, 121, m)
}

func (c Client) PetHatchReadyStatus(m *PetHatchReadyStatus) error {
	return c.c.WriteMessage(12, 122, m)
}

func (c Client) PetHatchRequest(m *PetHatchRequest) error {
	return c.c.WriteMessage(12, 123, m)
}

func (c Client) PetHatchResult(m *PetHatchResult) error {
	return c.c.WriteMessage(12, 124, m)
}

func (c Client) PetRenameConfirm(m *PetRenameConfirm) error {
	return c.c.WriteMessage(12, 125, m)
}

func (c Client) PetRenameRequest(m *PetRenameRequest) error {
	return c.c.WriteMessage(12, 126, m)
}

func (c Client) PlayerArrived(m *PlayerArrived) error {
	return c.c.WriteMessage(12, 127, m)
}

func (c Client) PlayerWizbang(m *PlayerWizbang) error {
	return c.c.WriteMessage(12, 128, m)
}

func (c Client) PlayMusic(m *PlayMusic) error {
	return c.c.WriteMessage(12, 129, m)
}

func (c Client) PotionBuyConfirm(m *PotionBuyConfirm) error {
	return c.c.WriteMessage(12, 130, m)
}

func (c Client) PotionBuyRequest(m *PotionBuyRequest) error {
	return c.c.WriteMessage(12, 131, m)
}

func (c Client) PotionShopOpen(m *PotionShopOpen) error {
	return c.c.WriteMessage(12, 132, m)
}

func (c Client) PreLeaderboard(m *PreLeaderboard) error {
	return c.c.WriteMessage(12, 133, m)
}

func (c Client) PremiumContent(m *PremiumContent) error {
	return c.c.WriteMessage(12, 134, m)
}

func (c Client) PrePvPKiosk(m *PrePvPKiosk) error {
	return c.c.WriteMessage(12, 135, m)
}

func (c Client) PvPConfirm(m *PvPConfirm) error {
	return c.c.WriteMessage(12, 136, m)
}

func (c Client) PvPConfirmTourney(m *PvPConfirmTourney) error {
	return c.c.WriteMessage(12, 137, m)
}

func (c Client) PvPConsumePvPTourneyCurrency(m *PvPConsumePvPTourneyCurrency) error {
	return c.c.WriteMessage(12, 138, m)
}

func (c Client) PvPIntent(m *PvPIntent) error {
	return c.c.WriteMessage(12, 139, m)
}

func (c Client) PvpMatchRequest(m *PvpMatchRequest) error {
	return c.c.WriteMessage(12, 140, m)
}

func (c Client) PvPQueue(m *PvPQueue) error {
	return c.c.WriteMessage(12, 141, m)
}

func (c Client) PvPRegisterFailed(m *PvPRegisterFailed) error {
	return c.c.WriteMessage(12, 142, m)
}

func (c Client) PvPUpdateRequest(m *PvPUpdateRequest) error {
	return c.c.WriteMessage(12, 143, m)
}

func (c Client) QuestDialog(m *QuestDialog) error {
	return c.c.WriteMessage(12, 144, m)
}

func (c Client) QuestFinderOption(m *QuestFinderOption) error {
	return c.c.WriteMessage(12, 145, m)
}

func (c Client) QuestRewards(m *QuestRewards) error {
	return c.c.WriteMessage(12, 146, m)
}

func (c Client) QuickSellRequestBank(m *QuickSellRequestBank) error {
	return c.c.WriteMessage(12, 147, m)
}

func (c Client) ReagentAdd(m *ReagentAdd) error {
	return c.c.WriteMessage(12, 148, m)
}

func (c Client) ReagentRemove(m *ReagentRemove) error {
	return c.c.WriteMessage(12, 149, m)
}

func (c Client) ReagentRemoveRequest(m *ReagentRemoveRequest) error {
	return c.c.WriteMessage(12, 150, m)
}

func (c Client) ReagentUpdate(m *ReagentUpdate) error {
	return c.c.WriteMessage(12, 151, m)
}

func (c Client) RecipeAdd(m *RecipeAdd) error {
	return c.c.WriteMessage(12, 152, m)
}

func (c Client) RecipeRemove(m *RecipeRemove) error {
	return c.c.WriteMessage(12, 153, m)
}

func (c Client) Registrar(m *Registrar) error {
	return c.c.WriteMessage(12, 154, m)
}

func (c Client) RemoveSpellFromBook(m *RemoveSpellFromBook) error {
	return c.c.WriteMessage(12, 155, m)
}

func (c Client) RemoveSpellFromDeck(m *RemoveSpellFromDeck) error {
	return c.c.WriteMessage(12, 156, m)
}

func (c Client) RemoveTreasureSpellFromBook(m *RemoveTreasureSpellFromBook) error {
	return c.c.WriteMessage(12, 157, m)
}

func (c Client) RemoveTreasureSpellFromDeck(m *RemoveTreasureSpellFromDeck) error {
	return c.c.WriteMessage(12, 158, m)
}

func (c Client) RemoveTreasureSpellFromVault(m *RemoveTreasureSpellFromVault) error {
	return c.c.WriteMessage(12, 159, m)
}

func (c Client) RentalUpdate(m *RentalUpdate) error {
	return c.c.WriteMessage(12, 160, m)
}

func (c Client) RequestActiveMapQuests(m *RequestActiveMapQuests) error {
	return c.c.WriteMessage(12, 161, m)
}

func (c Client) RequestAdventureParty(m *RequestAdventureParty) error {
	return c.c.WriteMessage(12, 162, m)
}

func (c Client) RequestCombatSigils(m *RequestCombatSigils) error {
	return c.c.WriteMessage(12, 163, m)
}

func (c Client) RequestCreateAdventureParty(m *RequestCreateAdventureParty) error {
	return c.c.WriteMessage(12, 164, m)
}

func (c Client) RequestFriendFinderCode(m *RequestFriendFinderCode) error {
	return c.c.WriteMessage(12, 165, m)
}

func (c Client) RequestFriendlyPlayerQuest(m *RequestFriendlyPlayerQuest) error {
	return c.c.WriteMessage(12, 166, m)
}

func (c Client) RequestFriendlyPlayerQuest2(m *RequestFriendlyPlayerQuest2) error {
	return c.c.WriteMessage(12, 167, m)
}

func (c Client) RequestFriendlyPlayers(m *RequestFriendlyPlayers) error {
	return c.c.WriteMessage(12, 168, m)
}

func (c Client) RequestHouseTeleport(m *RequestHouseTeleport) error {
	return c.c.WriteMessage(12, 169, m)
}

func (c Client) RequestJoinAdventureParty(m *RequestJoinAdventureParty) error {
	return c.c.WriteMessage(12, 170, m)
}

func (c Client) RequestLeaveAdventureParty(m *RequestLeaveAdventureParty) error {
	return c.c.WriteMessage(12, 171, m)
}

func (c Client) RequestNextClosestQuest(m *RequestNextClosestQuest) error {
	return c.c.WriteMessage(12, 172, m)
}

func (c Client) RequestPrivacyOptions(m *RequestPrivacyOptions) error {
	return c.c.WriteMessage(12, 173, m)
}

func (c Client) RequestPvPActor(m *RequestPvPActor) error {
	return c.c.WriteMessage(12, 174, m)
}

func (c Client) RequestPvPKiosk(m *RequestPvPKiosk) error {
	return c.c.WriteMessage(12, 175, m)
}

func (c Client) RequestQuestDialog(m *RequestQuestDialog) error {
	return c.c.WriteMessage(12, 176, m)
}

func (c Client) RequestQuickSell(m *RequestQuickSell) error {
	return c.c.WriteMessage(12, 177, m)
}

func (c Client) RequestTeamUpInfo(m *RequestTeamUpInfo) error {
	return c.c.WriteMessage(12, 178, m)
}

func (c Client) RequestToggleLockItem(m *RequestToggleLockItem) error {
	return c.c.WriteMessage(12, 179, m)
}

func (c Client) RequestVolunteerInfo(m *RequestVolunteerInfo) error {
	return c.c.WriteMessage(12, 180, m)
}

func (c Client) RespecConfirm(m *RespecConfirm) error {
	return c.c.WriteMessage(12, 181, m)
}

func (c Client) ResponsePrivacyOptions(m *ResponsePrivacyOptions) error {
	return c.c.WriteMessage(12, 182, m)
}

func (c Client) RideMount(m *RideMount) error {
	return c.c.WriteMessage(12, 183, m)
}

func (c Client) SeamstressOpen(m *SeamstressOpen) error {
	return c.c.WriteMessage(12, 184, m)
}

func (c Client) SendFriendFinderCode(m *SendFriendFinderCode) error {
	return c.c.WriteMessage(12, 185, m)
}

func (c Client) SendTalentDataCSR(m *SendTalentDataCSR) error {
	return c.c.WriteMessage(12, 186, m)
}

func (c Client) SetDeckName(m *SetDeckName) error {
	return c.c.WriteMessage(12, 187, m)
}

func (c Client) DontAllowFriendFinderCodes(m *DontAllowFriendFinderCodes) error {
	return c.c.WriteMessage(12, 188, m)
}

func (c Client) SetFriendlyPlayer(m *SetFriendlyPlayer) error {
	return c.c.WriteMessage(12, 189, m)
}

func (c Client) SetRentalTimer(m *SetRentalTimer) error {
	return c.c.WriteMessage(12, 190, m)
}

func (c Client) SetVolunteerFlag(m *SetVolunteerFlag) error {
	return c.c.WriteMessage(12, 191, m)
}

func (c Client) SharedBankDeleteReagentOrPetSnack(m *SharedBankDeleteReagentOrPetSnack) error {
	return c.c.WriteMessage(12, 192, m)
}

func (c Client) SharedBankDeleteReagentOrPetSnackConfirm(m *SharedBankDeleteReagentOrPetSnackConfirm) error {
	return c.c.WriteMessage(12, 193, m)
}

func (c Client) ShopBuyConfirm(m *ShopBuyConfirm) error {
	return c.c.WriteMessage(12, 194, m)
}

func (c Client) ShopBuyRequest(m *ShopBuyRequest) error {
	return c.c.WriteMessage(12, 195, m)
}

func (c Client) ShopList(m *ShopList) error {
	return c.c.WriteMessage(12, 196, m)
}

func (c Client) ShopSellConfirm(m *ShopSellConfirm) error {
	return c.c.WriteMessage(12, 197, m)
}

func (c Client) ShopSellRequest(m *ShopSellRequest) error {
	return c.c.WriteMessage(12, 198, m)
}

func (c Client) ShowcasedStoreItemInfo(m *ShowcasedStoreItemInfo) error {
	return c.c.WriteMessage(12, 199, m)
}

func (c Client) ShowClientMessageBox(m *ShowClientMessageBox) error {
	return c.c.WriteMessage(12, 200, m)
}

func (c Client) ShowGUI(m *ShowGUI) error {
	return c.c.WriteMessage(12, 201, m)
}

func (c Client) SnackList(m *SnackList) error {
	return c.c.WriteMessage(12, 202, m)
}

func (c Client) SpellList(m *SpellList) error {
	return c.c.WriteMessage(12, 203, m)
}

func (c Client) SpellTrainComplete(m *SpellTrainComplete) error {
	return c.c.WriteMessage(12, 204, m)
}

func (c Client) StartRide(m *StartRide) error {
	return c.c.WriteMessage(12, 205, m)
}

func (c Client) StitchItems(m *StitchItems) error {
	return c.c.WriteMessage(12, 206, m)
}

func (c Client) StitchItemsConfirm(m *StitchItemsConfirm) error {
	return c.c.WriteMessage(12, 207, m)
}

func (c Client) StorageClientAdd(m *StorageClientAdd) error {
	return c.c.WriteMessage(12, 208, m)
}

func (c Client) StorageClientRemove(m *StorageClientRemove) error {
	return c.c.WriteMessage(12, 209, m)
}

func (c Client) SubmitCombatSigils(m *SubmitCombatSigils) error {
	return c.c.WriteMessage(12, 210, m)
}

func (c Client) SubscriberOnlyItems(m *SubscriberOnlyItems) error {
	return c.c.WriteMessage(12, 211, m)
}

func (c Client) TimedAccessPasses(m *TimedAccessPasses) error {
	return c.c.WriteMessage(12, 212, m)
}

func (c Client) TradeChangeItem(m *TradeChangeItem) error {
	return c.c.WriteMessage(12, 213, m)
}

func (c Client) TradeChangeMoney(m *TradeChangeMoney) error {
	return c.c.WriteMessage(12, 214, m)
}

func (c Client) TradeCreate(m *TradeCreate) error {
	return c.c.WriteMessage(12, 215, m)
}

func (c Client) TradeJoinStatus(m *TradeJoinStatus) error {
	return c.c.WriteMessage(12, 216, m)
}

func (c Client) TradeReadyStatus(m *TradeReadyStatus) error {
	return c.c.WriteMessage(12, 217, m)
}

func (c Client) TradeRequest(m *TradeRequest) error {
	return c.c.WriteMessage(12, 218, m)
}

func (c Client) TradeResult(m *TradeResult) error {
	return c.c.WriteMessage(12, 219, m)
}

func (c Client) Train(m *Train) error {
	return c.c.WriteMessage(12, 220, m)
}

func (c Client) TreasureBuy(m *TreasureBuy) error {
	return c.c.WriteMessage(12, 221, m)
}

func (c Client) TreasureBuyConfirm(m *TreasureBuyConfirm) error {
	return c.c.WriteMessage(12, 222, m)
}

func (c Client) TreasureShopList(m *TreasureShopList) error {
	return c.c.WriteMessage(12, 223, m)
}

func (c Client) TutorialEvent(m *TutorialEvent) error {
	return c.c.WriteMessage(12, 224, m)
}

func (c Client) UnstitchItems(m *UnstitchItems) error {
	return c.c.WriteMessage(12, 225, m)
}

func (c Client) UnstitchOpen(m *UnstitchOpen) error {
	return c.c.WriteMessage(12, 226, m)
}

func (c Client) UpdateArenaPoints(m *UpdateArenaPoints) error {
	return c.c.WriteMessage(12, 227, m)
}

func (c Client) UpdateFriendlyPlayerWorlds(m *UpdateFriendlyPlayerWorlds) error {
	return c.c.WriteMessage(12, 228, m)
}

func (c Client) UpdateFriendlyWorld(m *UpdateFriendlyWorld) error {
	return c.c.WriteMessage(12, 229, m)
}

func (c Client) UpdateGender(m *UpdateGender) error {
	return c.c.WriteMessage(12, 230, m)
}

func (c Client) UpdateGold(m *UpdateGold) error {
	return c.c.WriteMessage(12, 231, m)
}

func (c Client) UpdateHealth(m *UpdateHealth) error {
	return c.c.WriteMessage(12, 232, m)
}

func (c Client) UpdateMana(m *UpdateMana) error {
	return c.c.WriteMessage(12, 233, m)
}

func (c Client) UpdatePotions(m *UpdatePotions) error {
	return c.c.WriteMessage(12, 234, m)
}

func (c Client) UpdatePowerPip(m *UpdatePowerPip) error {
	return c.c.WriteMessage(12, 235, m)
}

func (c Client) UpdatePrivacyOptions(m *UpdatePrivacyOptions) error {
	return c.c.WriteMessage(12, 236, m)
}

func (c Client) UpdateSchool(m *UpdateSchool) error {
	return c.c.WriteMessage(12, 237, m)
}

func (c Client) UpdateShadowPipRating(m *UpdateShadowPipRating) error {
	return c.c.WriteMessage(12, 238, m)
}

func (c Client) UpdateTraining(m *UpdateTraining) error {
	return c.c.WriteMessage(12, 239, m)
}

func (c Client) UpdateVolunteerInfo(m *UpdateVolunteerInfo) error {
	return c.c.WriteMessage(12, 240, m)
}

func (c Client) UpdateXP(m *UpdateXP) error {
	return c.c.WriteMessage(12, 241, m)
}

func (c Client) UseFriendFinderCode(m *UseFriendFinderCode) error {
	return c.c.WriteMessage(12, 242, m)
}

func (c Client) UseFriendFinderCodeResponse(m *UseFriendFinderCodeResponse) error {
	return c.c.WriteMessage(12, 243, m)
}

func (c Client) UsePotion(m *UsePotion) error {
	return c.c.WriteMessage(12, 244, m)
}

func (c Client) UseRecipe(m *UseRecipe) error {
	return c.c.WriteMessage(12, 245, m)
}

func (c Client) VolunteerRequest(m *VolunteerRequest) error {
	return c.c.WriteMessage(12, 246, m)
}

func (c Client) VolunteerTeamHelpComplete(m *VolunteerTeamHelpComplete) error {
	return c.c.WriteMessage(12, 247, m)
}

func (c Client) VolunteerTeamHelpJoin(m *VolunteerTeamHelpJoin) error {
	return c.c.WriteMessage(12, 248, m)
}

func (c Client) WizGameStats(m *WizGameStats) error {
	return c.c.WriteMessage(12, 249, m)
}

func (c Client) WizInventoryClientAdd(m *WizInventoryClientAdd) error {
	return c.c.WriteMessage(12, 250, m)
}

func (c Client) WizInventoryClientRemove(m *WizInventoryClientRemove) error {
	return c.c.WriteMessage(12, 251, m)
}

func (c Client) WorldTeleportList(m *WorldTeleportList) error {
	return c.c.WriteMessage(12, 252, m)
}

func (c Client) WorldTeleportRequest(m *WorldTeleportRequest) error {
	return c.c.WriteMessage(12, 253, m)
}

type Service struct {
	service
}

type Client struct {
	c *proto.Client
}
type AcceptQuestBogus struct {
	QuestName string
	MobileID  uint64
	QuestID   uint64
	GoalID    uint64
}

func (s *AcceptQuestBogus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 26+len(s.QuestName)))
	binary.Write(b, binary.LittleEndian, s.QuestName)
	return b.Bytes()
}

func (s *AcceptQuestBogus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if s.QuestName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.QuestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GoalID); err != nil {
		return err
	}
	return nil
}

type AccessPassBuyConfirm struct {
	Credits    int32
	Failure    int8
	WebFailure int8
}

func (s *AccessPassBuyConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	return b.Bytes()
}

func (s *AccessPassBuyConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type AccessPassBuyRequest struct {
	AccessPass    string
	TransactionID uint64
}

func (s *AccessPassBuyRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.AccessPass)))
	binary.Write(b, binary.LittleEndian, s.AccessPass)
	return b.Bytes()
}

func (s *AccessPassBuyRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.AccessPass, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransactionID); err != nil {
		return err
	}
	return nil
}

type AccessPassDeclined struct {
	TempQuestGID   uint64
	PreReqComplete uint32
}

func (s *AccessPassDeclined) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *AccessPassDeclined) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TempQuestGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PreReqComplete); err != nil {
		return err
	}
	return nil
}

type AccessPassInfoRequest struct {
	ClusterName string
	ZoneName    string
	TargetLoc   string
	AccessPass  string
	ZoneID      uint64
	ClusterID   uint64
}

func (s *AccessPassInfoRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24+len(s.AccessPass)+len(s.TargetLoc)+len(s.ZoneName)+len(s.ClusterName)))
	binary.Write(b, binary.LittleEndian, s.AccessPass)
	binary.Write(b, binary.LittleEndian, s.TargetLoc)
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.ClusterName)
	return b.Bytes()
}

func (s *AccessPassInfoRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.AccessPass, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.TargetLoc, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ClusterID); err != nil {
		return err
	}
	if s.ClusterName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type AccessPassOffer struct {
	Sample        string
	Data          string
	TransactionID uint64
	TotalCrowns   int32
	WebFailure    int8
	Failure       int8
}

func (s *AccessPassOffer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.Data)+len(s.Sample)))
	binary.Write(b, binary.LittleEndian, s.Data)
	binary.Write(b, binary.LittleEndian, s.Sample)
	return b.Bytes()
}

func (s *AccessPassOffer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Sample, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransactionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalCrowns); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type AccessPassRejected struct {
	ClusterName              string
	ZoneName                 string
	TargetLoc                string
	PayToPlayStyle           string
	RequestedZoneDisplayName string
	AccessPass               string
	ZoneID                   uint64
	ClusterID                uint64
}

func (s *AccessPassRejected) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28+len(s.AccessPass)+len(s.RequestedZoneDisplayName)+len(s.PayToPlayStyle)+len(s.TargetLoc)+len(s.ZoneName)+len(s.ClusterName)))
	binary.Write(b, binary.LittleEndian, s.AccessPass)
	binary.Write(b, binary.LittleEndian, s.RequestedZoneDisplayName)
	binary.Write(b, binary.LittleEndian, s.PayToPlayStyle)
	binary.Write(b, binary.LittleEndian, s.TargetLoc)
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	binary.Write(b, binary.LittleEndian, s.ClusterName)
	return b.Bytes()
}

func (s *AccessPassRejected) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.AccessPass, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.RequestedZoneDisplayName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.PayToPlayStyle, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.TargetLoc, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ClusterID); err != nil {
		return err
	}
	if s.ClusterName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ActorDialog struct {
	DefaultDialogAnimation string
	PersonaIcon            string
	PersonaName            string
	Persona                string
	ActorDialog            string
	CompletionType         string
	MobileID               uint64
	QuestID                uint64
	GoalID                 uint64
	RangeCheck             uint8
	IsEncounter            uint8
	IsYesNo                uint8
}

func (s *ActorDialog) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 39+len(s.CompletionType)+len(s.ActorDialog)+len(s.Persona)+len(s.PersonaName)+len(s.PersonaIcon)+len(s.DefaultDialogAnimation)))
	binary.Write(b, binary.LittleEndian, s.CompletionType)
	binary.Write(b, binary.LittleEndian, s.ActorDialog)
	binary.Write(b, binary.LittleEndian, s.Persona)
	binary.Write(b, binary.LittleEndian, s.PersonaName)
	binary.Write(b, binary.LittleEndian, s.PersonaIcon)
	binary.Write(b, binary.LittleEndian, s.DefaultDialogAnimation)
	return b.Bytes()
}

func (s *ActorDialog) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.QuestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GoalID); err != nil {
		return err
	}
	if s.CompletionType, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ActorDialog, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Persona, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.PersonaName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.PersonaIcon, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RangeCheck); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsEncounter); err != nil {
		return err
	}
	if s.DefaultDialogAnimation, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsYesNo); err != nil {
		return err
	}
	return nil
}

type AddQuestFinder struct {
	NPCList string
	QuestID uint64
	GoalID  uint64
}

func (s *AddQuestFinder) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.NPCList)))
	binary.Write(b, binary.LittleEndian, s.NPCList)
	return b.Bytes()
}

func (s *AddQuestFinder) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.QuestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GoalID); err != nil {
		return err
	}
	if s.NPCList, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type AddSpellToBook struct {
	SpellID int32
}

func (s *AddSpellToBook) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *AddSpellToBook) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	return nil
}

type AddSpellToDeck struct {
	DeckID  uint64
	SpellID int32
	Success uint8
}

func (s *AddSpellToDeck) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *AddSpellToDeck) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DeckID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type AddTreasureSpellToBook struct {
	SpellID       int32
	EnchantmentID int32
}

func (s *AddTreasureSpellToBook) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *AddTreasureSpellToBook) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentID); err != nil {
		return err
	}
	return nil
}

type AddTreasureSpellToDeck struct {
	DeckID        uint64
	SpellID       int32
	EnchantmentID int32
	NewSpell      uint8
	Success       uint8
}

func (s *AddTreasureSpellToDeck) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18))
	return b.Bytes()
}

func (s *AddTreasureSpellToDeck) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DeckID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewSpell); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type AdventurePartyMessage struct {
	PlayerName      string
	PlayerGID       uint64
	PartyGID        uint64
	Status          int32
	PartyName       uint32
	PartyNameLocale uint32
	Guild           uint8
}

func (s *AdventurePartyMessage) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 31+len(s.PlayerName)))
	binary.Write(b, binary.LittleEndian, s.PlayerName)
	return b.Bytes()
}

func (s *AdventurePartyMessage) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if s.PlayerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyNameLocale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Guild); err != nil {
		return err
	}
	return nil
}

type Aggro struct {
	GlobalID uint64
	SigilGID uint64
	LocX     float32
	LocY     float32
	LocZ     float32
	Yaw      float32
}

func (s *Aggro) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 32))
	return b.Bytes()
}

func (s *Aggro) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Yaw); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SigilGID); err != nil {
		return err
	}
	return nil
}

type AlchemyStation struct {
	AllowedRecipes string
}

func (s *AlchemyStation) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.AllowedRecipes)))
	binary.Write(b, binary.LittleEndian, s.AllowedRecipes)
	return b.Bytes()
}

func (s *AlchemyStation) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.AllowedRecipes, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ArenaError struct {
	Error uint32
}

func (s *ArenaError) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *ArenaError) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type AuctionHouseContents struct {
	Contents string
	GlobalID uint64
}

func (s *AuctionHouseContents) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Contents)))
	binary.Write(b, binary.LittleEndian, s.Contents)
	return b.Bytes()
}

func (s *AuctionHouseContents) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Contents, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type AuctionHouseMoreAcknowledgement struct {
	ItemTemplateID    uint64
	TotalPrice        int32
	QuantityPurchased int32
	IsSell            int8
}

func (s *AuctionHouseMoreAcknowledgement) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	return b.Bytes()
}

func (s *AuctionHouseMoreAcknowledgement) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsSell); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalPrice); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.QuantityPurchased); err != nil {
		return err
	}
	return nil
}

type AuctionHouseRequest struct {
	ItemGlobalID   uint64
	NpcGlobalID    uint64
	ItemTemplateID uint64
	Decal2         int32
	Texture        int32
	Decal          int32
	PetName        uint32
	Category       uint32
	Quantity       uint32
	Key            uint32
	Command        int8
	ItemType       int8
	BackpackBuddy  int8
}

func (s *AuctionHouseRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 55))
	return b.Bytes()
}

func (s *AuctionHouseRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Command); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Texture); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Decal); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Decal2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Category); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Key); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BackpackBuddy); err != nil {
		return err
	}
	return nil
}

type AuctionRequestBank struct {
}

func (s *AuctionRequestBank) Marshal() []byte {
	return []byte{}
}

func (s *AuctionRequestBank) Unmarshal(data []byte) error {
	return nil
}

type AuctionResponse struct {
	ItemTemplateID uint64
	Cost           int32
	Command        int8
	ReturnCode     int8
}

func (s *AuctionResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14))
	return b.Bytes()
}

func (s *AuctionResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Command); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Cost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ReturnCode); err != nil {
		return err
	}
	return nil
}

type BankDelete struct {
	GlobalID        uint64
	ClientRequestID int32
	UseShared       int8
	FromInventory   int8
}

func (s *BankDelete) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14))
	return b.Bytes()
}

func (s *BankDelete) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseShared); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromInventory); err != nil {
		return err
	}
	return nil
}

type BankDeleteConfirm struct {
	GlobalID        uint64
	ClientRequestID int32
	UseShared       int8
	Failure         int8
}

func (s *BankDeleteConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14))
	return b.Bytes()
}

func (s *BankDeleteConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseShared); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type BankToBankConfirm struct {
	OriginalGlobalID uint64
	GlobalID         uint64
	ClientRequestID  int32
	Error            uint32
	UseShared        int8
}

func (s *BankToBankConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	return b.Bytes()
}

func (s *BankToBankConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OriginalGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseShared); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type BankToInvConfirm struct {
	OriginalGlobalID uint64
	GlobalID         uint64
	ClientRequestID  int32
	Failure          int8
}

func (s *BankToInvConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	return b.Bytes()
}

func (s *BankToInvConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OriginalGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type BoosterDistributionResults struct {
	Error    string
	LootList string
}

func (s *BoosterDistributionResults) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.LootList)+len(s.Error)))
	binary.Write(b, binary.LittleEndian, s.LootList)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *BoosterDistributionResults) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.LootList, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Error, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type BracketReport struct {
	Report string
}

func (s *BracketReport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Report)))
	binary.Write(b, binary.LittleEndian, s.Report)
	return b.Bytes()
}

func (s *BracketReport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Report, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type BuyEnergyConfirm struct {
	Credits    int32
	Failure    int8
	WebFailure int8
}

func (s *BuyEnergyConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	return b.Bytes()
}

func (s *BuyEnergyConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type ChatFilterBlack struct {
	Blacklist string
	GlobalID  uint64
}

func (s *ChatFilterBlack) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Blacklist)))
	binary.Write(b, binary.LittleEndian, s.Blacklist)
	return b.Bytes()
}

func (s *ChatFilterBlack) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Blacklist, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ChatFilterWhite struct {
	Whitelist string
	GlobalID  uint64
}

func (s *ChatFilterWhite) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Whitelist)))
	binary.Write(b, binary.LittleEndian, s.Whitelist)
	return b.Bytes()
}

func (s *ChatFilterWhite) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Whitelist, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ChooseFocus struct {
	MobileID     uint64
	SchoolNameID int32
}

func (s *ChooseFocus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *ChooseFocus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SchoolNameID); err != nil {
		return err
	}
	return nil
}

type ClearAllCraftingSlots struct {
	GlobalID uint64
}

func (s *ClearAllCraftingSlots) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *ClearAllCraftingSlots) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type ClearEquippedDeck struct {
}

func (s *ClearEquippedDeck) Marshal() []byte {
	return []byte{}
}

func (s *ClearEquippedDeck) Unmarshal(data []byte) error {
	return nil
}

type CompleteDialog struct {
	EntryEvent     string
	CompletionType string
	MobileID       uint64
}

func (s *CompleteDialog) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.CompletionType)+len(s.EntryEvent)))
	binary.Write(b, binary.LittleEndian, s.CompletionType)
	binary.Write(b, binary.LittleEndian, s.EntryEvent)
	return b.Bytes()
}

func (s *CompleteDialog) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if s.CompletionType, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.EntryEvent, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ControlMusic struct {
	Action   int32
	FadeTime float32
}

func (s *ControlMusic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *ControlMusic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Action); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FadeTime); err != nil {
		return err
	}
	return nil
}

type CraftingSlotAdd struct {
	Data     string
	GlobalID uint64
}

func (s *CraftingSlotAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *CraftingSlotAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type CraftingSlotCount struct {
	GlobalID   uint64
	BonusSlots int32
}

func (s *CraftingSlotCount) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *CraftingSlotCount) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BonusSlots); err != nil {
		return err
	}
	return nil
}

type CraftingSlotRemove struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *CraftingSlotRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *CraftingSlotRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type CreateBoosterDistribution struct {
	PlayerGender      string
	PlayerSchool      string
	LootTableName     string
	BoosterTemplateID uint32
	PlayerLevel       uint32
	Samples           uint32
}

func (s *CreateBoosterDistribution) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.LootTableName)+len(s.PlayerSchool)+len(s.PlayerGender)))
	binary.Write(b, binary.LittleEndian, s.LootTableName)
	binary.Write(b, binary.LittleEndian, s.PlayerSchool)
	binary.Write(b, binary.LittleEndian, s.PlayerGender)
	return b.Bytes()
}

func (s *CreateBoosterDistribution) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.BoosterTemplateID); err != nil {
		return err
	}
	if s.LootTableName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerLevel); err != nil {
		return err
	}
	if s.PlayerSchool, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.PlayerGender, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Samples); err != nil {
		return err
	}
	return nil
}

type CrownBalance struct {
	CharacterID                   uint64
	TotalCrowns                   int32
	Failure                       uint8
	CacheBalanceForCSSegmentation uint8
}

func (s *CrownBalance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14))
	return b.Bytes()
}

func (s *CrownBalance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalCrowns); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CacheBalanceForCSSegmentation); err != nil {
		return err
	}
	return nil
}

type CrownsBuyConfirm struct {
	Data       string
	TemplateID uint64
	Credits    int32
	Failure    int8
	WebFailure int8
}

func (s *CrownsBuyConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *CrownsBuyConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type CrownsBuyRequest struct {
	NpcGlobalID uint64
	AmountEnum  int32
	ItemIndex   int32
}

func (s *CrownsBuyRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *CrownsBuyRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AmountEnum); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemIndex); err != nil {
		return err
	}
	return nil
}

type CrownServicesOpen struct {
	Data       string
	ShopTitle  string
	GlobalID   uint64
	Credits    int32
	WebFailure int8
}

func (s *CrownServicesOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17+len(s.ShopTitle)+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.ShopTitle)
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *CrownServicesOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.ShopTitle, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type CSRCrownBalance struct {
	CharacterID uint64
	Balance     int32
	Success     uint8
}

func (s *CSRCrownBalance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *CSRCrownBalance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Balance); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	return nil
}

type CSRRequestBlobs struct {
	Data         string
	ContainerGID uint64
}

func (s *CSRRequestBlobs) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *CSRRequestBlobs) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ContainerGID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type DeliveryInvoiceRequestBank struct {
}

func (s *DeliveryInvoiceRequestBank) Marshal() []byte {
	return []byte{}
}

func (s *DeliveryInvoiceRequestBank) Unmarshal(data []byte) error {
	return nil
}

type DeliveryInvoiceTransferObjectsFromStorageToBank struct {
}

func (s *DeliveryInvoiceTransferObjectsFromStorageToBank) Marshal() []byte {
	return []byte{}
}

func (s *DeliveryInvoiceTransferObjectsFromStorageToBank) Unmarshal(data []byte) error {
	return nil
}

type DismissTutorialTip struct {
	TipID string
}

func (s *DismissTutorialTip) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.TipID)))
	binary.Write(b, binary.LittleEndian, s.TipID)
	return b.Bytes()
}

func (s *DismissTutorialTip) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.TipID, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type DoneShopping struct {
	TransactionID uint64
}

func (s *DoneShopping) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *DoneShopping) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TransactionID); err != nil {
		return err
	}
	return nil
}

type DuelSimResult struct {
	DuelID        uint64
	WinningTeamID int32
	Confidence    float32
	Sims          uint32
	Results       uint32
	Time          uint32
}

func (s *DuelSimResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	return b.Bytes()
}

func (s *DuelSimResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DuelID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WinningTeamID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Confidence); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Sims); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Results); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Time); err != nil {
		return err
	}
	return nil
}

type DyeConfirm struct {
	ItemGID     uint64
	FirstLayer  int32
	SecondLayer int32
	ThirdLayer  int32
	Failure     int8
}

func (s *DyeConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	return b.Bytes()
}

func (s *DyeConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FirstLayer); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SecondLayer); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ThirdLayer); err != nil {
		return err
	}
	return nil
}

type DyeRequest struct {
	ItemGlobalID uint64
	NpcGlobalID  uint64
	Texture      int32
	Decal        int32
	Decal2       int32
}

func (s *DyeRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 28))
	return b.Bytes()
}

func (s *DyeRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Texture); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Decal); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Decal2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	return nil
}

type DyeShopOpen struct {
	Title    string
	GlobalID uint64
}

func (s *DyeShopOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Title)))
	binary.Write(b, binary.LittleEndian, s.Title)
	return b.Bytes()
}

func (s *DyeShopOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Title, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ElixirStateChange struct {
	ParentID      uint64
	EffectEnabled int8
}

func (s *ElixirStateChange) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *ElixirStateChange) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ParentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EffectEnabled); err != nil {
		return err
	}
	return nil
}

type EncounterDialog struct {
	PersonaIcon    string
	PersonaName    string
	Persona        string
	ActorDialog    string
	CompletionType string
	MobileID       uint64
	QuestID        uint64
	GoalID         uint64
}

func (s *EncounterDialog) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 34+len(s.CompletionType)+len(s.ActorDialog)+len(s.Persona)+len(s.PersonaName)+len(s.PersonaIcon)))
	binary.Write(b, binary.LittleEndian, s.CompletionType)
	binary.Write(b, binary.LittleEndian, s.ActorDialog)
	binary.Write(b, binary.LittleEndian, s.Persona)
	binary.Write(b, binary.LittleEndian, s.PersonaName)
	binary.Write(b, binary.LittleEndian, s.PersonaIcon)
	return b.Bytes()
}

func (s *EncounterDialog) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.QuestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GoalID); err != nil {
		return err
	}
	if s.CompletionType, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ActorDialog, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Persona, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.PersonaName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.PersonaIcon, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type EnergyBuyRequest struct {
	GlobalID   uint64
	Credits    int32
	WebFailure int8
}

func (s *EnergyBuyRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *EnergyBuyRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type EnergyShopOpen struct {
	GlobalID   uint64
	Credits    int32
	WebFailure int8
}

func (s *EnergyShopOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *EnergyShopOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type EnterMinigame struct {
	GlobalID uint64
}

func (s *EnterMinigame) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *EnterMinigame) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type ExitConfirmTeleport struct {
	PromptKey string
	ZoneCRC   uint32
}

func (s *ExitConfirmTeleport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.PromptKey)))
	binary.Write(b, binary.LittleEndian, s.PromptKey)
	return b.Bytes()
}

func (s *ExitConfirmTeleport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneCRC); err != nil {
		return err
	}
	if s.PromptKey, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ExpandPvPSearch struct {
	TournamentNameID     uint32
	ExpandTeammateSearch uint8
	ExpandMatchSearch    uint8
}

func (s *ExpandPvPSearch) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	return b.Bytes()
}

func (s *ExpandPvPSearch) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ExpandTeammateSearch); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ExpandMatchSearch); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	return nil
}

type FreeTourneyCreditInfo struct {
	HasFreeCredit uint32
}

func (s *FreeTourneyCreditInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *FreeTourneyCreditInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.HasFreeCredit); err != nil {
		return err
	}
	return nil
}

type GetSnackList struct {
	InvisibleToFriends uint8
}

func (s *GetSnackList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *GetSnackList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.InvisibleToFriends); err != nil {
		return err
	}
	return nil
}

type GetSubscriberOnlyItems struct {
}

func (s *GetSubscriberOnlyItems) Marshal() []byte {
	return []byte{}
}

func (s *GetSubscriberOnlyItems) Unmarshal(data []byte) error {
	return nil
}

type GetTimedAccessPasses struct {
}

func (s *GetTimedAccessPasses) Marshal() []byte {
	return []byte{}
}

func (s *GetTimedAccessPasses) Unmarshal(data []byte) error {
	return nil
}

type GoHome struct {
}

func (s *GoHome) Marshal() []byte {
	return []byte{}
}

func (s *GoHome) Unmarshal(data []byte) error {
	return nil
}

type GotoDorm struct {
}

func (s *GotoDorm) Marshal() []byte {
	return []byte{}
}

func (s *GotoDorm) Unmarshal(data []byte) error {
	return nil
}

type GotoFriendlyPlayer struct {
	TargetCharacterID uint64
}

func (s *GotoFriendlyPlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *GotoFriendlyPlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetCharacterID); err != nil {
		return err
	}
	return nil
}

type GroupQuestCredit struct {
}

func (s *GroupQuestCredit) Marshal() []byte {
	return []byte{}
}

func (s *GroupQuestCredit) Unmarshal(data []byte) error {
	return nil
}

type InteractAvailableQuest struct {
	QuestName string
	MobileID  uint64
}

func (s *InteractAvailableQuest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.QuestName)))
	binary.Write(b, binary.LittleEndian, s.QuestName)
	return b.Bytes()
}

func (s *InteractAvailableQuest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if s.QuestName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type InteractCompleteGoal struct {
	MobileID uint64
	QuestID  uint64
	GoalID   uint64
}

func (s *InteractCompleteGoal) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *InteractCompleteGoal) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.QuestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GoalID); err != nil {
		return err
	}
	return nil
}

type InteractUnderwayQuest struct {
	MobileID uint64
	QuestID  uint64
}

func (s *InteractUnderwayQuest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *InteractUnderwayQuest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.QuestID); err != nil {
		return err
	}
	return nil
}

type InvToBankConfirm struct {
	OriginalGlobalID uint64
	GlobalID         uint64
	ClientRequestID  int32
	UseShared        int8
	Failure          int8
}

func (s *InvToBankConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22))
	return b.Bytes()
}

func (s *InvToBankConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OriginalGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseShared); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type ItemDrop struct {
	TemplateID uint64
	ErrorID    uint32
}

func (s *ItemDrop) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *ItemDrop) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ErrorID); err != nil {
		return err
	}
	return nil
}

type ItemLock struct {
	ItemLock uint8
}

func (s *ItemLock) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *ItemLock) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemLock); err != nil {
		return err
	}
	return nil
}

type ItemOverflowToBank struct {
	ItemID      uint64
	CountInBank int32
}

func (s *ItemOverflowToBank) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *ItemOverflowToBank) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CountInBank); err != nil {
		return err
	}
	return nil
}

type LeaderboardFriendRequest struct {
	Contents        string
	LeaderboardType uint32
	SortType        uint32
	Page            int8
}

func (s *LeaderboardFriendRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.Contents)))
	binary.Write(b, binary.LittleEndian, s.Contents)
	return b.Bytes()
}

func (s *LeaderboardFriendRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LeaderboardType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Page); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SortType); err != nil {
		return err
	}
	if s.Contents, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type LeaderboardRequest struct {
	LeaderboardType uint32
	SortType        uint32
	Page            int8
	ShowMe          uint8
}

func (s *LeaderboardRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10))
	return b.Bytes()
}

func (s *LeaderboardRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LeaderboardType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Page); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SortType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ShowMe); err != nil {
		return err
	}
	return nil
}

type LeaderboardResponse struct {
	Contents     string
	TotalEntries uint32
	CurrentPage  uint32
}

func (s *LeaderboardResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Contents)))
	binary.Write(b, binary.LittleEndian, s.Contents)
	return b.Bytes()
}

func (s *LeaderboardResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Contents, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalEntries); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CurrentPage); err != nil {
		return err
	}
	return nil
}

type Leash struct {
	GlobalID uint64
	OwnerID  uint64
	Leashed  uint8
}

func (s *Leash) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	return b.Bytes()
}

func (s *Leash) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Leashed); err != nil {
		return err
	}
	return nil
}

type LeashOffset struct {
	GlobalID uint64
	Radius   float32
	Angle    float32
}

func (s *LeashOffset) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *LeashOffset) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Radius); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Angle); err != nil {
		return err
	}
	return nil
}

type LeaveAdventureParty struct {
	PlayerName      string
	PlayerGID       uint64
	PartyName       uint32
	PartyNameLocale uint32
	Status          int32
	Guild           uint8
}

func (s *LeaveAdventureParty) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23+len(s.PlayerName)))
	binary.Write(b, binary.LittleEndian, s.PlayerName)
	return b.Bytes()
}

func (s *LeaveAdventureParty) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if s.PlayerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyNameLocale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Guild); err != nil {
		return err
	}
	return nil
}

type LeaveMinigame struct {
	GlobalID uint64
}

func (s *LeaveMinigame) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *LeaveMinigame) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type LeaveSigilTimerWaiting struct {
	GlobalID uint64
}

func (s *LeaveSigilTimerWaiting) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *LeaveSigilTimerWaiting) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type LemuriaStatus struct {
	Status int32
}

func (s *LemuriaStatus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *LemuriaStatus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type LevelUp struct {
	Data           string
	GlobalID       uint64
	NewLevel       int32
	XP             int32
	TrainingPoints int32
}

func (s *LevelUp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *LevelUp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewLevel); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.XP); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TrainingPoints); err != nil {
		return err
	}
	return nil
}

type LogClientResolution struct {
	ScreenWidth  uint32
	ScreenHeight uint32
	FullScreen   uint8
	ClassicMode  uint8
}

func (s *LogClientResolution) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10))
	return b.Bytes()
}

func (s *LogClientResolution) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ScreenWidth); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ScreenHeight); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FullScreen); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ClassicMode); err != nil {
		return err
	}
	return nil
}

type LogOffer struct {
	Description   string
	OfferType     int32
	Cost          int32
	TotalCurrency int32
	Action        int32
}

func (s *LogOffer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.Description)))
	binary.Write(b, binary.LittleEndian, s.Description)
	return b.Bytes()
}

func (s *LogOffer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.OfferType); err != nil {
		return err
	}
	if s.Description, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Cost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalCurrency); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Action); err != nil {
		return err
	}
	return nil
}

type LogPatchClientPatchTime struct {
	PatchClientPatchTime uint32
}

func (s *LogPatchClientPatchTime) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *LogPatchClientPatchTime) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PatchClientPatchTime); err != nil {
		return err
	}
	return nil
}

type Loot struct {
	LootList string
	GlobalID uint64
}

func (s *Loot) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.LootList)))
	binary.Write(b, binary.LittleEndian, s.LootList)
	return b.Bytes()
}

func (s *Loot) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.LootList, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type MinigameKiosk struct {
	GlobalID uint64
}

func (s *MinigameKiosk) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *MinigameKiosk) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type MinigameRewards struct {
	Scores        string
	Data          string
	MinigameIndex int32
	FinalPhase    int32
	Score         int32
	Success       int32
}

func (s *MinigameRewards) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20+len(s.Data)+len(s.Scores)))
	binary.Write(b, binary.LittleEndian, s.Data)
	binary.Write(b, binary.LittleEndian, s.Scores)
	return b.Bytes()
}

func (s *MinigameRewards) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Scores, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MinigameIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FinalPhase); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Score); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type MinigameSelect struct {
	NpcGlobalID uint64
	Index       int32
}

func (s *MinigameSelect) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *MinigameSelect) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Index); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	return nil
}

type MinigameTimerEnd struct {
	SigilGID uint64
}

func (s *MinigameTimerEnd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *MinigameTimerEnd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SigilGID); err != nil {
		return err
	}
	return nil
}

type MinigameTimerStart struct {
	SigilGID uint64
	Time     float32
	Teleport int8
}

func (s *MinigameTimerStart) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *MinigameTimerStart) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Time); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SigilGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Teleport); err != nil {
		return err
	}
	return nil
}

type MoveBankToBank struct {
	BankID          uint64
	BankSharedID    uint64
	ClientRequestID int32
	Error           uint32
}

func (s *MoveBankToBank) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *MoveBankToBank) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BankID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BankSharedID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type MoveBankToInv struct {
	GlobalID        uint64
	ClientRequestID int32
	Quantity        int32
	UseShared       int8
}

func (s *MoveBankToInv) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	return b.Bytes()
}

func (s *MoveBankToInv) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseShared); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type MoveInvToBank struct {
	GlobalID        uint64
	ClientRequestID int32
	Quantity        int32
	Debug           int32
	UseShared       int8
}

func (s *MoveInvToBank) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	return b.Bytes()
}

func (s *MoveInvToBank) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UseShared); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Debug); err != nil {
		return err
	}
	return nil
}

type NewTitle struct {
	Title     string
	GlobalID  uint64
	PvPIconID uint32
}

func (s *NewTitle) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Title)))
	binary.Write(b, binary.LittleEndian, s.Title)
	return b.Bytes()
}

func (s *NewTitle) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PvPIconID); err != nil {
		return err
	}
	if s.Title, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type NotifySchoolFocus struct {
	MobileID          uint64
	SchoolID          int32
	SecondarySchoolID int32
}

func (s *NotifySchoolFocus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *NotifySchoolFocus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SchoolID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SecondarySchoolID); err != nil {
		return err
	}
	return nil
}

type OpenBank struct {
	GlobalID uint64
}

func (s *OpenBank) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *OpenBank) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type PaidLootCrownsBalance struct {
	Balance int32
}

func (s *PaidLootCrownsBalance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *PaidLootCrownsBalance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Balance); err != nil {
		return err
	}
	return nil
}

type PaidLootRollError struct {
}

func (s *PaidLootRollError) Marshal() []byte {
	return []byte{}
}

func (s *PaidLootRollError) Unmarshal(data []byte) error {
	return nil
}

type PaidLootRollPrompt struct {
	Id   uint64
	Cost int32
	Uses int32
}

func (s *PaidLootRollPrompt) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PaidLootRollPrompt) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Id); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Cost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Uses); err != nil {
		return err
	}
	return nil
}

type PaidLootRollResponse struct {
	Id       uint64
	Response int32
}

func (s *PaidLootRollResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *PaidLootRollResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Id); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Response); err != nil {
		return err
	}
	return nil
}

type PaidLootRollResult struct {
	Loot    string
	Id      uint64
	Cost    int32
	Balance int32
	Uses    int32
}

func (s *PaidLootRollResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 22+len(s.Loot)))
	binary.Write(b, binary.LittleEndian, s.Loot)
	return b.Bytes()
}

func (s *PaidLootRollResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Id); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Cost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Balance); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Uses); err != nil {
		return err
	}
	if s.Loot, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PatchingBlocked struct {
	ZoneName    string
	PackageName string
}

func (s *PatchingBlocked) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.PackageName)+len(s.ZoneName)))
	binary.Write(b, binary.LittleEndian, s.PackageName)
	binary.Write(b, binary.LittleEndian, s.ZoneName)
	return b.Bytes()
}

func (s *PatchingBlocked) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.PackageName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ZoneName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PCSCacheSegReqsSummaryRequest struct {
	Data     string
	UpdateID uint32
}

func (s *PCSCacheSegReqsSummaryRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *PCSCacheSegReqsSummaryRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpdateID); err != nil {
		return err
	}
	return nil
}

type PCSListRequest struct {
	Data     string
	UpdateID uint32
}

func (s *PCSListRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *PCSListRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpdateID); err != nil {
		return err
	}
	return nil
}

type PCSListResponse struct {
	Updates  string
	Data     string
	UpdateID uint32
	Error    int32
}

func (s *PCSListResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.Data)+len(s.Updates)))
	binary.Write(b, binary.LittleEndian, s.Data)
	binary.Write(b, binary.LittleEndian, s.Updates)
	return b.Bytes()
}

func (s *PCSListResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Updates, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpdateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type PCSPATCH struct {
	Updates  string
	UpdateID uint32
}

func (s *PCSPATCH) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Updates)))
	binary.Write(b, binary.LittleEndian, s.Updates)
	return b.Bytes()
}

func (s *PCSPATCH) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Updates, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.UpdateID); err != nil {
		return err
	}
	return nil
}

type PCSPriceLockRequest struct {
	Item      uint64
	ItemFlags int32
	SaleID    uint32
}

func (s *PCSPriceLockRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PCSPriceLockRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Item); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemFlags); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SaleID); err != nil {
		return err
	}
	return nil
}

type PCSPriceLockResponse struct {
	Item        uint64
	CostGold    int32
	CostCrowns  int32
	CostTickets int32
	Error       int32
}

func (s *PCSPriceLockResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *PCSPriceLockResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Item); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CostGold); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CostCrowns); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CostTickets); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type PCSPurchaseRequest struct {
	ActiveTabName          string
	ActiveCatName          string
	RecipientName          string
	Item                   uint64
	Recipient              uint64
	Texture                int32
	Count                  int32
	Decal                  int32
	PetName                uint32
	SaleID                 uint32
	Reco                   uint32
	ItemLocator            uint32
	PurchaseElixirEquipNow uint32
	Cost                   int32
	Type                   int32
}

func (s *PCSPurchaseRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 62+len(s.RecipientName)+len(s.ActiveTabName)+len(s.ActiveCatName)))
	binary.Write(b, binary.LittleEndian, s.RecipientName)
	binary.Write(b, binary.LittleEndian, s.ActiveTabName)
	binary.Write(b, binary.LittleEndian, s.ActiveCatName)
	return b.Bytes()
}

func (s *PCSPurchaseRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Item); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Recipient); err != nil {
		return err
	}
	if s.RecipientName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Cost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Texture); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Decal); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SaleID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Reco); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemLocator); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PurchaseElixirEquipNow); err != nil {
		return err
	}
	if s.ActiveTabName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.ActiveCatName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PCSPurchaseResponse struct {
	Item   uint64
	Type   int32
	Cost   int32
	Count  int32
	Error  int32
	Gifted uint8
}

func (s *PCSPurchaseResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	return b.Bytes()
}

func (s *PCSPurchaseResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Item); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Cost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Gifted); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	return nil
}

type PCSSegDataRequest struct {
}

func (s *PCSSegDataRequest) Marshal() []byte {
	return []byte{}
}

func (s *PCSSegDataRequest) Unmarshal(data []byte) error {
	return nil
}

type PCSSegDataResponse struct {
	Data    string
	Success uint8
}

func (s *PCSSegDataResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *PCSSegDataResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PCSUpdateUserWishlist struct {
	WLItemsRemAftPur string
	Data             string
	GlobalID         uint64
}

func (s *PCSUpdateUserWishlist) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12+len(s.Data)+len(s.WLItemsRemAftPur)))
	binary.Write(b, binary.LittleEndian, s.Data)
	binary.Write(b, binary.LittleEndian, s.WLItemsRemAftPur)
	return b.Bytes()
}

func (s *PCSUpdateUserWishlist) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.WLItemsRemAftPur, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PetGameKiosk struct {
	GameInfo string
	GlobalID uint64
	GamesWon uint32
}

func (s *PetGameKiosk) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.GameInfo)))
	binary.Write(b, binary.LittleEndian, s.GameInfo)
	return b.Bytes()
}

func (s *PetGameKiosk) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.GameInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GamesWon); err != nil {
		return err
	}
	return nil
}

type PetHatchCreate struct {
	TargetGID uint64
}

func (s *PetHatchCreate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *PetHatchCreate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	return nil
}

type PetHatchJoinStatus struct {
	TargetGID    uint64
	TargetStatus int32
	PlayerStatus int32
}

func (s *PetHatchJoinStatus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PetHatchJoinStatus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetStatus); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerStatus); err != nil {
		return err
	}
	return nil
}

type PetHatchReadyStatus struct {
	TargetGID    uint64
	TargetStatus int32
	PlayerStatus int32
}

func (s *PetHatchReadyStatus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *PetHatchReadyStatus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetStatus); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerStatus); err != nil {
		return err
	}
	return nil
}

type PetHatchRequest struct {
	TargetGID uint64
}

func (s *PetHatchRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *PetHatchRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	return nil
}

type PetHatchResult struct {
	TargetGID uint64
	Status    uint32
}

func (s *PetHatchResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *PetHatchResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type PetRenameConfirm struct {
	Failure int8
}

func (s *PetRenameConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *PetRenameConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type PetRenameRequest struct {
	ItemGlobalID uint64
	NpcGlobalID  uint64
	PetName      uint32
}

func (s *PetRenameRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *PetRenameRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	return nil
}

type PlayerArrived struct {
	GlobalID  uint64
	NodeIndex int32
}

func (s *PlayerArrived) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *PlayerArrived) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NodeIndex); err != nil {
		return err
	}
	return nil
}

type PlayerWizbang struct {
	StateName string
}

func (s *PlayerWizbang) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.StateName)))
	binary.Write(b, binary.LittleEndian, s.StateName)
	return b.Bytes()
}

func (s *PlayerWizbang) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.StateName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PlayMusic struct {
	SoundFilename string
	SoundID       uint64
	FadeTime      float32
	StartDelay    float32
	Flags         int8
}

func (s *PlayMusic) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.SoundFilename)))
	binary.Write(b, binary.LittleEndian, s.SoundFilename)
	return b.Bytes()
}

func (s *PlayMusic) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SoundID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FadeTime); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Flags); err != nil {
		return err
	}
	if s.SoundFilename, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StartDelay); err != nil {
		return err
	}
	return nil
}

type PotionBuyConfirm struct {
	Failure int8
}

func (s *PotionBuyConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *PotionBuyConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type PotionBuyRequest struct {
	NpcGlobalID uint64
	AmountEnum  int32
}

func (s *PotionBuyRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *PotionBuyRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.AmountEnum); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	return nil
}

type PotionShopOpen struct {
	ShopTitle string
	GlobalID  uint64
}

func (s *PotionShopOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.ShopTitle)))
	binary.Write(b, binary.LittleEndian, s.ShopTitle)
	return b.Bytes()
}

func (s *PotionShopOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.ShopTitle, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PreLeaderboard struct {
	LeaderboardNameID uint32
}

func (s *PreLeaderboard) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *PreLeaderboard) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.LeaderboardNameID); err != nil {
		return err
	}
	return nil
}

type PremiumContent struct {
	PurchaseList  string
	SubscribeText string
	TitleText     string
	ScrollTitle   string
	MobileID      uint64
	TransactionID uint64
	TotalCrowns   int32
	Tournament    uint32
	Failure       int8
	CanPurchase   int8
}

func (s *PremiumContent) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 34+len(s.ScrollTitle)+len(s.TitleText)+len(s.SubscribeText)+len(s.PurchaseList)))
	binary.Write(b, binary.LittleEndian, s.ScrollTitle)
	binary.Write(b, binary.LittleEndian, s.TitleText)
	binary.Write(b, binary.LittleEndian, s.SubscribeText)
	binary.Write(b, binary.LittleEndian, s.PurchaseList)
	return b.Bytes()
}

func (s *PremiumContent) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransactionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TotalCrowns); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CanPurchase); err != nil {
		return err
	}
	if s.ScrollTitle, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.TitleText, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.SubscribeText, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Tournament); err != nil {
		return err
	}
	if s.PurchaseList, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PrePvPKiosk struct {
	MobileID         uint64
	TransactionID    uint64
	TournamentNameID uint32
	LeagueID         uint32
	SeasonID         uint32
	Patching         uint8
}

func (s *PrePvPKiosk) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 29))
	return b.Bytes()
}

func (s *PrePvPKiosk) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LeagueID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SeasonID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransactionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Patching); err != nil {
		return err
	}
	return nil
}

type PvPConfirm struct {
	MatchActor       string
	TournamentNameID uint32
	Confirm          uint8
}

func (s *PvPConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7+len(s.MatchActor)))
	binary.Write(b, binary.LittleEndian, s.MatchActor)
	return b.Bytes()
}

func (s *PvPConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Confirm); err != nil {
		return err
	}
	if s.MatchActor, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type PvPConfirmTourney struct {
	CharacterID                uint64
	RegistrationID             uint64
	BracketID                  uint64
	PricePvPTourneyCurrency    uint32
	SubPricePvPTourneyCurrency uint32
	PlayerPvPTourneyCurrency   int32
}

func (s *PvPConfirmTourney) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 36))
	return b.Bytes()
}

func (s *PvPConfirmTourney) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RegistrationID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BracketID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PricePvPTourneyCurrency); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SubPricePvPTourneyCurrency); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerPvPTourneyCurrency); err != nil {
		return err
	}
	return nil
}

type PvPConsumePvPTourneyCurrency struct {
	Bracket                    string
	CharacterID                uint64
	BracketID                  uint64
	GroupJoinTeamID            uint64
	PricePvPTourneyCurrency    uint32
	SubPricePvPTourneyCurrency uint32
}

func (s *PvPConsumePvPTourneyCurrency) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 34+len(s.Bracket)))
	binary.Write(b, binary.LittleEndian, s.Bracket)
	return b.Bytes()
}

func (s *PvPConsumePvPTourneyCurrency) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BracketID); err != nil {
		return err
	}
	if s.Bracket, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GroupJoinTeamID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PricePvPTourneyCurrency); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SubPricePvPTourneyCurrency); err != nil {
		return err
	}
	return nil
}

type PvPIntent struct {
	TargetData          string
	TargetObject        uint64
	MatchID             uint64
	TournamentNameID    uint32
	MatchNameID         uint32
	AllowExtMatchSearch uint32
	Command             int8
}

func (s *PvPIntent) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 31+len(s.TargetData)))
	binary.Write(b, binary.LittleEndian, s.TargetData)
	return b.Bytes()
}

func (s *PvPIntent) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Command); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetObject); err != nil {
		return err
	}
	if s.TargetData, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MatchNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MatchID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowExtMatchSearch); err != nil {
		return err
	}
	return nil
}

type PvpMatchRequest struct {
	MobileID         uint64
	TournamentNameID uint32
	Failure          uint8
}

func (s *PvpMatchRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *PvpMatchRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type PvPQueue struct {
	PvPQueue    string
	CharacterID uint64
	Clear       uint8
}

func (s *PvPQueue) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.PvPQueue)))
	binary.Write(b, binary.LittleEndian, s.PvPQueue)
	return b.Bytes()
}

func (s *PvPQueue) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.PvPQueue, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Clear); err != nil {
		return err
	}
	return nil
}

type PvPRegisterFailed struct {
}

func (s *PvPRegisterFailed) Marshal() []byte {
	return []byte{}
}

func (s *PvPRegisterFailed) Unmarshal(data []byte) error {
	return nil
}

type PvPUpdateRequest struct {
	InfoRequest string
}

func (s *PvPUpdateRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.InfoRequest)))
	binary.Write(b, binary.LittleEndian, s.InfoRequest)
	return b.Bytes()
}

func (s *PvPUpdateRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.InfoRequest, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type QuestDialog struct {
	ActorDialog string
	QuestNameID uint32
}

func (s *QuestDialog) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.ActorDialog)))
	binary.Write(b, binary.LittleEndian, s.ActorDialog)
	return b.Bytes()
}

func (s *QuestDialog) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.QuestNameID); err != nil {
		return err
	}
	if s.ActorDialog, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type QuestFinderOption struct {
	Enable uint8
}

func (s *QuestFinderOption) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *QuestFinderOption) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Enable); err != nil {
		return err
	}
	return nil
}

type QuestRewards struct {
	LootList string
	QuestID  uint64
}

func (s *QuestRewards) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.LootList)))
	binary.Write(b, binary.LittleEndian, s.LootList)
	return b.Bytes()
}

func (s *QuestRewards) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.QuestID); err != nil {
		return err
	}
	if s.LootList, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type QuickSellRequestBank struct {
}

func (s *QuickSellRequestBank) Marshal() []byte {
	return []byte{}
}

func (s *QuickSellRequestBank) Unmarshal(data []byte) error {
	return nil
}

type ReagentAdd struct {
	Data     string
	GlobalID uint64
}

func (s *ReagentAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *ReagentAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ReagentRemove struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *ReagentRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *ReagentRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type ReagentRemoveRequest struct {
	GlobalID uint64
}

func (s *ReagentRemoveRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *ReagentRemoveRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type ReagentUpdate struct {
	GlobalID uint64
	ItemID   uint64
	Quantity int32
}

func (s *ReagentUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *ReagentUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type RecipeAdd struct {
	Data     string
	GlobalID uint64
}

func (s *RecipeAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *RecipeAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RecipeRemove struct {
	GlobalID uint64
	RecipeID uint32
}

func (s *RecipeRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *RecipeRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RecipeID); err != nil {
		return err
	}
	return nil
}

type Registrar struct {
	Data     string
	MobileID uint64
}

func (s *Registrar) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *Registrar) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RemoveSpellFromBook struct {
	SpellID int32
}

func (s *RemoveSpellFromBook) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *RemoveSpellFromBook) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	return nil
}

type RemoveSpellFromDeck struct {
	DeckID  uint64
	SpellID int32
	Success uint8
}

func (s *RemoveSpellFromDeck) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *RemoveSpellFromDeck) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DeckID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type RemoveTreasureSpellFromBook struct {
	SpellID       int32
	EnchantmentID int32
	Quantity      int32
}

func (s *RemoveTreasureSpellFromBook) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *RemoveTreasureSpellFromBook) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type RemoveTreasureSpellFromDeck struct {
	DeckID        uint64
	SpellID       int32
	EnchantmentID int32
	Success       uint8
	Destroy       uint8
}

func (s *RemoveTreasureSpellFromDeck) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18))
	return b.Bytes()
}

func (s *RemoveTreasureSpellFromDeck) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DeckID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Destroy); err != nil {
		return err
	}
	return nil
}

type RemoveTreasureSpellFromVault struct {
	SpellID       int32
	EnchantmentID int32
	Quantity      int32
}

func (s *RemoveTreasureSpellFromVault) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *RemoveTreasureSpellFromVault) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.EnchantmentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type RentalUpdate struct {
	TemplateID uint64
	Reason     int32
}

func (s *RentalUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *RentalUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Reason); err != nil {
		return err
	}
	return nil
}

type RequestActiveMapQuests struct {
	Data string
}

func (s *RequestActiveMapQuests) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *RequestActiveMapQuests) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestAdventureParty struct {
	Buffer       string
	PlayerGID    uint64
	JoinCooldown uint32
}

func (s *RequestAdventureParty) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 14+len(s.Buffer)))
	binary.Write(b, binary.LittleEndian, s.Buffer)
	return b.Bytes()
}

func (s *RequestAdventureParty) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if s.Buffer, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.JoinCooldown); err != nil {
		return err
	}
	return nil
}

type RequestCombatSigils struct {
	ZoneID uint64
}

func (s *RequestCombatSigils) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *RequestCombatSigils) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	return nil
}

type RequestCreateAdventureParty struct {
	OwnerName       string
	PlayerGID       uint64
	OwnerGID        uint64
	Status          int32
	PartyName       uint32
	PartyNameLocale uint32
}

func (s *RequestCreateAdventureParty) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 30+len(s.OwnerName)))
	binary.Write(b, binary.LittleEndian, s.OwnerName)
	return b.Bytes()
}

func (s *RequestCreateAdventureParty) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OwnerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyNameLocale); err != nil {
		return err
	}
	if s.OwnerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestFriendFinderCode struct {
	Account1     uint64
	Account2     uint64
	BuddyID      uint64
	ListOwnerGID uint64
	Forwarded    uint8
}

func (s *RequestFriendFinderCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 33))
	return b.Bytes()
}

func (s *RequestFriendFinderCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Account1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Account2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.BuddyID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	return nil
}

type RequestFriendlyPlayerQuest struct {
	Data      string
	PlayerGID uint64
}

func (s *RequestFriendlyPlayerQuest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *RequestFriendlyPlayerQuest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestFriendlyPlayerQuest2 struct {
	QuestName           string
	RequestingPlayerGID uint64
	PlayerGID           uint64
}

func (s *RequestFriendlyPlayerQuest2) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.QuestName)))
	binary.Write(b, binary.LittleEndian, s.QuestName)
	return b.Bytes()
}

func (s *RequestFriendlyPlayerQuest2) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RequestingPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if s.QuestName, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestFriendlyPlayers struct {
	Data      string
	PlayerGID uint64
}

func (s *RequestFriendlyPlayers) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *RequestFriendlyPlayers) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestHouseTeleport struct {
	Position        string
	DestinationLoc  string
	DestinationZone string
	ObjectGID       uint64
	TransitionID    uint32
}

func (s *RequestHouseTeleport) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.DestinationZone)+len(s.DestinationLoc)+len(s.Position)))
	binary.Write(b, binary.LittleEndian, s.DestinationZone)
	binary.Write(b, binary.LittleEndian, s.DestinationLoc)
	binary.Write(b, binary.LittleEndian, s.Position)
	return b.Bytes()
}

func (s *RequestHouseTeleport) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.DestinationZone, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.DestinationLoc, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Position, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransitionID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectGID); err != nil {
		return err
	}
	return nil
}

type RequestJoinAdventureParty struct {
	PlayerName          string
	PlayerGID           uint64
	PartyGID            uint64
	RequestingPlayerGID uint64
	Status              int32
	PartyName           uint32
	PartyNameLocale     uint32
	Guild               uint8
}

func (s *RequestJoinAdventureParty) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 39+len(s.PlayerName)))
	binary.Write(b, binary.LittleEndian, s.PlayerName)
	return b.Bytes()
}

func (s *RequestJoinAdventureParty) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RequestingPlayerGID); err != nil {
		return err
	}
	if s.PlayerName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyNameLocale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Guild); err != nil {
		return err
	}
	return nil
}

type RequestLeaveAdventureParty struct {
	PlayerGID       uint64
	PartyGID        uint64
	PartyName       uint32
	PartyNameLocale uint32
	Guild           uint8
}

func (s *RequestLeaveAdventureParty) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	return b.Bytes()
}

func (s *RequestLeaveAdventureParty) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PartyNameLocale); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Guild); err != nil {
		return err
	}
	return nil
}

type RequestNextClosestQuest struct {
	NPCList string
}

func (s *RequestNextClosestQuest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.NPCList)))
	binary.Write(b, binary.LittleEndian, s.NPCList)
	return b.Bytes()
}

func (s *RequestNextClosestQuest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.NPCList, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type RequestPrivacyOptions struct {
}

func (s *RequestPrivacyOptions) Marshal() []byte {
	return []byte{}
}

func (s *RequestPrivacyOptions) Unmarshal(data []byte) error {
	return nil
}

type RequestPvPActor struct {
	CharacterID      uint64
	RequestID        uint64
	TournamentNameID uint32
	MatchNameID      uint32
}

func (s *RequestPvPActor) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *RequestPvPActor) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MatchNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RequestID); err != nil {
		return err
	}
	return nil
}

type RequestPvPKiosk struct {
	MobileID         uint64
	TransactionID    uint64
	TournamentNameID uint32
}

func (s *RequestPvPKiosk) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *RequestPvPKiosk) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TournamentNameID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TransactionID); err != nil {
		return err
	}
	return nil
}

type RequestQuestDialog struct {
	QuestNameID uint32
}

func (s *RequestQuestDialog) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *RequestQuestDialog) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.QuestNameID); err != nil {
		return err
	}
	return nil
}

type RequestQuickSell struct {
	SellModifier   float32
	FromTemplateID uint32
	Section        uint8
}

func (s *RequestQuickSell) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *RequestQuickSell) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SellModifier); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Section); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FromTemplateID); err != nil {
		return err
	}
	return nil
}

type RequestTeamUpInfo struct {
	PlayerGID          uint64
	NPCID              uint64
	IsFarming          uint8
	RequestedSigilMode uint8
	TeamSize           uint8
}

func (s *RequestTeamUpInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19))
	return b.Bytes()
}

func (s *RequestTeamUpInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NPCID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsFarming); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RequestedSigilMode); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TeamSize); err != nil {
		return err
	}
	return nil
}

type RequestToggleLockItem struct {
	ItemGID  uint64
	GlobalID uint64
	IsLocked uint32
}

func (s *RequestToggleLockItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *RequestToggleLockItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsLocked); err != nil {
		return err
	}
	return nil
}

type RequestVolunteerInfo struct {
	WorldInfo   string
	CharacterID uint64
	IsVolunteer uint8
}

func (s *RequestVolunteerInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.WorldInfo)))
	binary.Write(b, binary.LittleEndian, s.WorldInfo)
	return b.Bytes()
}

func (s *RequestVolunteerInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.WorldInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsVolunteer); err != nil {
		return err
	}
	return nil
}

type RespecConfirm struct {
	Credits    int32
	Failure    int8
	WebFailure int8
}

func (s *RespecConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	return b.Bytes()
}

func (s *RespecConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type ResponsePrivacyOptions struct {
	AllowFriendRequest  uint8
	AllowFriendTeleport uint8
	AllowTradeRequest   uint8
	AllowHatchRequest   uint8
	AllowPartyInvites   uint8
	HidePVPEnemyChat    uint8
	LimitHomeToFriends  uint8
}

func (s *ResponsePrivacyOptions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7))
	return b.Bytes()
}

func (s *ResponsePrivacyOptions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.AllowFriendRequest); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowFriendTeleport); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowTradeRequest); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowHatchRequest); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowPartyInvites); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HidePVPEnemyChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LimitHomeToFriends); err != nil {
		return err
	}
	return nil
}

type RideMount struct {
	GlobalID  uint64
	DriverID  uint64
	LocationX uint16
	LocationY uint16
	LocationZ uint16
	Riding    uint8
}

func (s *RideMount) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23))
	return b.Bytes()
}

func (s *RideMount) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DriverID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Riding); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LocationZ); err != nil {
		return err
	}
	return nil
}

type SeamstressOpen struct {
	ShopTitle  string
	GlobalID   uint64
	Credits    int32
	MergeCost  int32
	WebFailure int8
}

func (s *SeamstressOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.ShopTitle)))
	binary.Write(b, binary.LittleEndian, s.ShopTitle)
	return b.Bytes()
}

func (s *SeamstressOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.ShopTitle, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MergeCost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	return nil
}

type SendFriendFinderCode struct {
	PackedName   string
	Code         string
	ListOwnerGID uint64
	Error        uint32
	IsRequester  uint32
}

func (s *SendFriendFinderCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20+len(s.Code)+len(s.PackedName)))
	binary.Write(b, binary.LittleEndian, s.Code)
	binary.Write(b, binary.LittleEndian, s.PackedName)
	return b.Bytes()
}

func (s *SendFriendFinderCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Code, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	if s.PackedName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsRequester); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	return nil
}

type SendTalentDataCSR struct {
	Talents string
}

func (s *SendTalentDataCSR) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Talents)))
	binary.Write(b, binary.LittleEndian, s.Talents)
	return b.Bytes()
}

func (s *SendTalentDataCSR) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Talents, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SetDeckName struct {
	ItemGID           uint64
	DeckName          uint32
	DeckNameExtension uint32
}

func (s *SetDeckName) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *SetDeckName) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ItemGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DeckName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DeckNameExtension); err != nil {
		return err
	}
	return nil
}

type DontAllowFriendFinderCodes struct {
	DontAllowFriendFinderCodes uint8
}

func (s *DontAllowFriendFinderCodes) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *DontAllowFriendFinderCodes) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.DontAllowFriendFinderCodes); err != nil {
		return err
	}
	return nil
}

type SetFriendlyPlayer struct {
	PlayerGID      uint64
	FriendlyPlayer uint8
}

func (s *SetFriendlyPlayer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *SetFriendlyPlayer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.FriendlyPlayer); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	return nil
}

type SetRentalTimer struct {
	GlobalID  uint64
	TimerTime uint32
}

func (s *SetRentalTimer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *SetRentalTimer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TimerTime); err != nil {
		return err
	}
	return nil
}

type SetVolunteerFlag struct {
	PlayerGID       uint64
	VolunteerPlayer uint8
}

func (s *SetVolunteerFlag) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *SetVolunteerFlag) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.VolunteerPlayer); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	return nil
}

type SharedBankDeleteReagentOrPetSnack struct {
	GlobalID        uint64
	ClientRequestID int32
	Quantity        int32
}

func (s *SharedBankDeleteReagentOrPetSnack) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *SharedBankDeleteReagentOrPetSnack) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type SharedBankDeleteReagentOrPetSnackConfirm struct {
	GlobalID        uint64
	ClientRequestID int32
	Failure         int8
}

func (s *SharedBankDeleteReagentOrPetSnackConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *SharedBankDeleteReagentOrPetSnackConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type ShopBuyConfirm struct {
	Credits    int32
	Failure    int8
	WebFailure int8
}

func (s *ShopBuyConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	return b.Bytes()
}

func (s *ShopBuyConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type ShopBuyRequest struct {
	ShopID       uint64
	NpcGlobalID  uint64
	Texture      int32
	Decal        int32
	Decal2       int32
	PetName      uint32
	Quantity     uint32
	CurrencyType uint8
}

func (s *ShopBuyRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 37))
	return b.Bytes()
}

func (s *ShopBuyRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ShopID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.CurrencyType); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Texture); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Decal); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Decal2); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type ShopList struct {
	Data       string
	GlobalID   uint64
	Credits    int32
	WebFailure int8
}

func (s *ShopList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 15+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *ShopList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	return nil
}

type ShopSellConfirm struct {
	GlobalID        uint64
	ClientRequestID int32
	Failure         int8
}

func (s *ShopSellConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	return b.Bytes()
}

func (s *ShopSellConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ClientRequestID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	return nil
}

type ShopSellRequest struct {
	GlobalID    uint64
	NpcGlobalID uint64
	Quantity    uint32
	IsQuickSell int8
}

func (s *ShopSellRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	return b.Bytes()
}

func (s *ShopSellRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.IsQuickSell); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	return nil
}

type ShowcasedStoreItemInfo struct {
	Data                string
	StoreTemplateIDsCSV string
}

func (s *ShowcasedStoreItemInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.StoreTemplateIDsCSV)+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.StoreTemplateIDsCSV)
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *ShowcasedStoreItemInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.StoreTemplateIDsCSV, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type ShowClientMessageBox struct {
	Message int32
	Title   int32
	Delay   int8
}

func (s *ShowClientMessageBox) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *ShowClientMessageBox) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Message); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Title); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Delay); err != nil {
		return err
	}
	return nil
}

type ShowGUI struct {
	GUIFileName string
	StageIndex  uint8
}

func (s *ShowGUI) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.GUIFileName)))
	binary.Write(b, binary.LittleEndian, s.GUIFileName)
	return b.Bytes()
}

func (s *ShowGUI) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.GUIFileName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StageIndex); err != nil {
		return err
	}
	return nil
}

type SnackList struct {
	Data               string
	InvisibleToFriends uint8
}

func (s *SnackList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *SnackList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.InvisibleToFriends); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SpellList struct {
	Data string
}

func (s *SpellList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *SpellList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type SpellTrainComplete struct {
	DisplayText string
	SpellID     uint64
	Success     uint8
}

func (s *SpellTrainComplete) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.DisplayText)))
	binary.Write(b, binary.LittleEndian, s.DisplayText)
	return b.Bytes()
}

func (s *SpellTrainComplete) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SpellID); err != nil {
		return err
	}
	if s.DisplayText, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type StartRide struct {
	GlobalID uint64
	Time     float32
}

func (s *StartRide) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *StartRide) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Time); err != nil {
		return err
	}
	return nil
}

type StitchItems struct {
	GlobalID  uint64
	StatsID   uint64
	DisplayID uint64
}

func (s *StitchItems) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *StitchItems) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StatsID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DisplayID); err != nil {
		return err
	}
	return nil
}

type StitchItemsConfirm struct {
	Failure    int32
	Credits    int32
	WebFailure int8
}

func (s *StitchItemsConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *StitchItemsConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type StorageClientAdd struct {
	SerializedItem string
	GlobalID       uint64
	SharedBank     int8
}

func (s *StorageClientAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 11+len(s.SerializedItem)))
	binary.Write(b, binary.LittleEndian, s.SerializedItem)
	return b.Bytes()
}

func (s *StorageClientAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.SerializedItem, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SharedBank); err != nil {
		return err
	}
	return nil
}

type StorageClientRemove struct {
	GlobalID   uint64
	ItemID     uint64
	SharedBank int8
}

func (s *StorageClientRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	return b.Bytes()
}

func (s *StorageClientRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SharedBank); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type SubmitCombatSigils struct {
	SigilPositions string
	ZoneID         uint64
}

func (s *SubmitCombatSigils) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.SigilPositions)))
	binary.Write(b, binary.LittleEndian, s.SigilPositions)
	return b.Bytes()
}

func (s *SubmitCombatSigils) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.SigilPositions, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZoneID); err != nil {
		return err
	}
	return nil
}

type SubscriberOnlyItems struct {
	Data string
}

func (s *SubscriberOnlyItems) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *SubscriberOnlyItems) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type TimedAccessPasses struct {
	Data string
}

func (s *TimedAccessPasses) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *TimedAccessPasses) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type TradeChangeItem struct {
	TargetGID    uint64
	ChangeGID    uint64
	ItemTemplate uint32
	ItemEnchant  uint32
	Action       uint8
}

func (s *TradeChangeItem) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 25))
	return b.Bytes()
}

func (s *TradeChangeItem) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChangeGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemTemplate); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemEnchant); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Action); err != nil {
		return err
	}
	return nil
}

type TradeChangeMoney struct {
	TargetGID uint64
	ChangeGID uint64
	Amount    uint32
}

func (s *TradeChangeMoney) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *TradeChangeMoney) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ChangeGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Amount); err != nil {
		return err
	}
	return nil
}

type TradeCreate struct {
	TargetGID uint64
}

func (s *TradeCreate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *TradeCreate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	return nil
}

type TradeJoinStatus struct {
	TargetGID    uint64
	TargetStatus int32
	PlayerStatus int32
}

func (s *TradeJoinStatus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *TradeJoinStatus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetStatus); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerStatus); err != nil {
		return err
	}
	return nil
}

type TradeReadyStatus struct {
	TargetGID    uint64
	TargetStatus int32
	PlayerStatus int32
}

func (s *TradeReadyStatus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *TradeReadyStatus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetStatus); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerStatus); err != nil {
		return err
	}
	return nil
}

type TradeRequest struct {
	TargetGID uint64
}

func (s *TradeRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *TradeRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	return nil
}

type TradeResult struct {
	TargetGID   uint64
	ItemsGained uint32
	ItemsLost   uint32
	Status      uint32
}

func (s *TradeResult) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	return b.Bytes()
}

func (s *TradeResult) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TargetGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemsGained); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemsLost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type Train struct {
	MobileID      uint64
	TrainingIndex int32
}

func (s *Train) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	return b.Bytes()
}

func (s *Train) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MobileID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TrainingIndex); err != nil {
		return err
	}
	return nil
}

type TreasureBuy struct {
	GlobalID       uint64
	NpcGlobalID    uint64
	TreasureCardID uint32
	Quantity       int32
}

func (s *TreasureBuy) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *TreasureBuy) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TreasureCardID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NpcGlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type TreasureBuyConfirm struct {
	Credits    int32
	Failure    int8
	WebFailure int8
}

func (s *TreasureBuyConfirm) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	return b.Bytes()
}

func (s *TreasureBuyConfirm) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Failure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	return nil
}

type TreasureShopList struct {
	Data             string
	GlobalID         uint64
	Credits          int32
	WebFailure       int8
	ShowAuctionHouse int8
}

func (s *TreasureShopList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *TreasureShopList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ShowAuctionHouse); err != nil {
		return err
	}
	return nil
}

type TutorialEvent struct {
	TutorialEvent string
}

func (s *TutorialEvent) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.TutorialEvent)))
	binary.Write(b, binary.LittleEndian, s.TutorialEvent)
	return b.Bytes()
}

func (s *TutorialEvent) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.TutorialEvent, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type UnstitchItems struct {
	GlobalID       uint64
	ItemID         uint64
	StatItemColor1 uint32
	StatItemColor2 uint32
}

func (s *UnstitchItems) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	return b.Bytes()
}

func (s *UnstitchItems) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StatItemColor1); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.StatItemColor2); err != nil {
		return err
	}
	return nil
}

type UnstitchOpen struct {
	ShopTitle  string
	GlobalID   uint64
	Credits    int32
	MergeCost  int32
	WebFailure int8
}

func (s *UnstitchOpen) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.ShopTitle)))
	binary.Write(b, binary.LittleEndian, s.ShopTitle)
	return b.Bytes()
}

func (s *UnstitchOpen) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.ShopTitle, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Credits); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MergeCost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WebFailure); err != nil {
		return err
	}
	return nil
}

type UpdateArenaPoints struct {
	Points int32
}

func (s *UpdateArenaPoints) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *UpdateArenaPoints) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Points); err != nil {
		return err
	}
	return nil
}

type UpdateFriendlyPlayerWorlds struct {
	Data string
}

func (s *UpdateFriendlyPlayerWorlds) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *UpdateFriendlyPlayerWorlds) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type UpdateFriendlyWorld struct {
	FriendlyWorld uint8
}

func (s *UpdateFriendlyWorld) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	return b.Bytes()
}

func (s *UpdateFriendlyWorld) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.FriendlyWorld); err != nil {
		return err
	}
	return nil
}

type UpdateGender struct {
	NewGender string
	GlobalID  uint64
}

func (s *UpdateGender) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.NewGender)))
	binary.Write(b, binary.LittleEndian, s.NewGender)
	return b.Bytes()
}

func (s *UpdateGender) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.NewGender, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type UpdateGold struct {
	Gold    int32
	MaxGold int32
}

func (s *UpdateGold) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *UpdateGold) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Gold); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaxGold); err != nil {
		return err
	}
	return nil
}

type UpdateHealth struct {
	CharacterID  uint64
	NewHealth    int32
	NewHealthMax int32
	DisplayDiff  uint8
}

func (s *UpdateHealth) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 17))
	return b.Bytes()
}

func (s *UpdateHealth) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewHealth); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewHealthMax); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DisplayDiff); err != nil {
		return err
	}
	return nil
}

type UpdateMana struct {
	Mana        int32
	MaxMana     int32
	DisplayDiff uint8
}

func (s *UpdateMana) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *UpdateMana) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Mana); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaxMana); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.DisplayDiff); err != nil {
		return err
	}
	return nil
}

type UpdatePotions struct {
	PotionMax    float32
	PotionCharge float32
}

func (s *UpdatePotions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	return b.Bytes()
}

func (s *UpdatePotions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PotionMax); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PotionCharge); err != nil {
		return err
	}
	return nil
}

type UpdatePowerPip struct {
	PowerPip float32
}

func (s *UpdatePowerPip) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *UpdatePowerPip) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PowerPip); err != nil {
		return err
	}
	return nil
}

type UpdatePrivacyOptions struct {
	AllowFriendRequest  uint8
	AllowFriendTeleport uint8
	AllowTradeRequest   uint8
	AllowHatchRequest   uint8
	AllowPartyInvites   uint8
	HidePVPEnemyChat    uint8
	LimitHomeToFriends  uint8
}

func (s *UpdatePrivacyOptions) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 7))
	return b.Bytes()
}

func (s *UpdatePrivacyOptions) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.AllowFriendRequest); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowFriendTeleport); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowTradeRequest); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowHatchRequest); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.AllowPartyInvites); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HidePVPEnemyChat); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.LimitHomeToFriends); err != nil {
		return err
	}
	return nil
}

type UpdateSchool struct {
	Data       string
	SchoolHash uint32
}

func (s *UpdateSchool) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *UpdateSchool) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SchoolHash); err != nil {
		return err
	}
	return nil
}

type UpdateShadowPipRating struct {
	ShadowPipRating float32
}

func (s *UpdateShadowPipRating) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *UpdateShadowPipRating) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.ShadowPipRating); err != nil {
		return err
	}
	return nil
}

type UpdateTraining struct {
	TrainingPoints int32
}

func (s *UpdateTraining) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *UpdateTraining) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TrainingPoints); err != nil {
		return err
	}
	return nil
}

type UpdateVolunteerInfo struct {
	Data        string
	CharacterID uint64
}

func (s *UpdateVolunteerInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *UpdateVolunteerInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CharacterID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type UpdateXP struct {
	GlobalID uint64
	XP       int32
	OldXP    int32
}

func (s *UpdateXP) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *UpdateXP) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.XP); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OldXP); err != nil {
		return err
	}
	return nil
}

type UseFriendFinderCode struct {
	Code         string
	AccountID    uint64
	ListOwnerGID uint64
	Forwarded    uint8
}

func (s *UseFriendFinderCode) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 19+len(s.Code)))
	binary.Write(b, binary.LittleEndian, s.Code)
	return b.Bytes()
}

func (s *UseFriendFinderCode) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.AccountID); err != nil {
		return err
	}
	if s.Code, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	return nil
}

type UseFriendFinderCodeResponse struct {
	Error        string
	Code         string
	BuddyName    string
	ListOwnerGID uint64
	Forwarded    uint8
}

func (s *UseFriendFinderCodeResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 15+len(s.BuddyName)+len(s.Code)+len(s.Error)))
	binary.Write(b, binary.LittleEndian, s.BuddyName)
	binary.Write(b, binary.LittleEndian, s.Code)
	binary.Write(b, binary.LittleEndian, s.Error)
	return b.Bytes()
}

func (s *UseFriendFinderCodeResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.BuddyName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Code, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Error, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Forwarded); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ListOwnerGID); err != nil {
		return err
	}
	return nil
}

type UsePotion struct {
}

func (s *UsePotion) Marshal() []byte {
	return []byte{}
}

func (s *UsePotion) Unmarshal(data []byte) error {
	return nil
}

type UseRecipe struct {
	RecipeName  string
	FinalItemID uint64
	Error       uint32
	Quantity    uint32
}

func (s *UseRecipe) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 18+len(s.RecipeName)))
	binary.Write(b, binary.LittleEndian, s.RecipeName)
	return b.Bytes()
}

func (s *UseRecipe) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.RecipeName, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.FinalItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Error); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type VolunteerRequest struct {
	SigilInfo       string
	PlayerGID       uint64
	TeamUpPlayerGID uint64
	SigilID         uint32
	Status          uint8
}

func (s *VolunteerRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 23+len(s.SigilInfo)))
	binary.Write(b, binary.LittleEndian, s.SigilInfo)
	return b.Bytes()
}

func (s *VolunteerRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TeamUpPlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.SigilID); err != nil {
		return err
	}
	if s.SigilInfo, err = codegen.ReadString(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type VolunteerTeamHelpComplete struct {
	PlayerGID uint64
	Status    uint8
}

func (s *VolunteerTeamHelpComplete) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	return b.Bytes()
}

func (s *VolunteerTeamHelpComplete) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Status); err != nil {
		return err
	}
	return nil
}

type VolunteerTeamHelpJoin struct {
	PlayerGID uint64
	SigilID   uint32
	WorldID   uint32
}

func (s *VolunteerTeamHelpJoin) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *VolunteerTeamHelpJoin) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.SigilID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PlayerGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.WorldID); err != nil {
		return err
	}
	return nil
}

type WizGameStats struct {
	Data     string
	GlobalID uint64
}

func (s *WizGameStats) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *WizGameStats) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type WizInventoryClientAdd struct {
	SerializedItem string
	GlobalID       uint64
}

func (s *WizInventoryClientAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.SerializedItem)))
	binary.Write(b, binary.LittleEndian, s.SerializedItem)
	return b.Bytes()
}

func (s *WizInventoryClientAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.SerializedItem, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type WizInventoryClientRemove struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *WizInventoryClientRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	return b.Bytes()
}

func (s *WizInventoryClientRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type WorldTeleportList struct {
	Data     string
	GlobalID uint64
}

func (s *WorldTeleportList) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.Data)
	return b.Bytes()
}

func (s *WorldTeleportList) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type WorldTeleportRequest struct {
	World      string
	TeleportID uint64
}

func (s *WorldTeleportRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.World)))
	binary.Write(b, binary.LittleEndian, s.World)
	return b.Bytes()
}

func (s *WorldTeleportRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TeleportID); err != nil {
		return err
	}
	if s.World, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}
