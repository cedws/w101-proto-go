// Code generated by w101-client-go. DO NOT EDIT.
package pet

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type petService interface {
	CheerCostMapUpdate(CheerCostMapUpdate)
	DerbyEffectApply(DerbyEffectApply)
	DerbyEffectRemove(DerbyEffectRemove)
	DerbyEffectsListUpdate(DerbyEffectsListUpdate)
	DerbyLocation(DerbyLocation)
	DerbyPetEnergyInfo(DerbyPetEnergyInfo)
	DerbyStatMod(DerbyStatMod)
	DerbySync(DerbySync)
	HatchEggNow(HatchEggNow)
	LentPet(LentPet)
	PetDerbyBuff(PetDerbyBuff)
	PetDerbyCheer(PetDerbyCheer)
	PetDerbyJumpDuck(PetDerbyJumpDuck)
	PetDerbyLap(PetDerbyLap)
	PetDerbyModifyStat(PetDerbyModifyStat)
	PetDerbyMorale(PetDerbyMorale)
	PetDerbyPhotoFinish(PetDerbyPhotoFinish)
	PetDerbyPlayerLeft(PetDerbyPlayerLeft)
	PetDerbySlow(PetDerbySlow)
	PetDerbySpeed(PetDerbySpeed)
	PetDerbyStart(PetDerbyStart)
	PetDerbySwitchLane(PetDerbySwitchLane)
	PetDerbySwitchLaneFail(PetDerbySwitchLaneFail)
	PetDerbyUseTalent(PetDerbyUseTalent)
	PetEggMorphed(PetEggMorphed)
	PetEnergyMax(PetEnergyMax)
	PetEnergyTick(PetEnergyTick)
	PetGameDance(PetGameDance)
	PetGameData(PetGameData)
	PetGameDerbyResults(PetGameDerbyResults)
	PetGameDropBonus(PetGameDropBonus)
	PetGameDropObject(PetGameDropObject)
	PetGameEnd(PetGameEnd)
	PetGameEnding(PetGameEnding)
	PetGameIndividualResults(PetGameIndividualResults)
	PetGameInit(PetGameInit)
	PetGameJoin(PetGameJoin)
	PetGameJoinRsp(PetGameJoinRsp)
	PetGameJump(PetGameJump)
	PetGameMaze(PetGameMaze)
	PetGameReady(PetGameReady)
	PetGameSnackFeedFailed(PetGameSnackFeedFailed)
	PetGameSnackFeedSuccess(PetGameSnackFeedSuccess)
	PetGameStart(PetGameStart)
	PetHatched(PetHatched)
	PetLevelUp(PetLevelUp)
	PetMorphCanAfford(PetMorphCanAfford)
	PetMorphingSlot(PetMorphingSlot)
	PetMorphReady(PetMorphReady)
	PetMorphSet(PetMorphSet)
	PetSnackAdd(PetSnackAdd)
	PetSnackRemove(PetSnackRemove)
	PetSnackRemoveRequest(PetSnackRemoveRequest)
	PetSnackUpdate(PetSnackUpdate)
	PetUpdateBehavior(PetUpdateBehavior)
}

type PetService struct {
	petService
}

type PetClient struct {
	c *proto.Client
}

func (l *PetService) CheerCostMapUpdate(_ CheerCostMapUpdate)             {}
func (l *PetService) DerbyEffectApply(_ DerbyEffectApply)                 {}
func (l *PetService) DerbyEffectRemove(_ DerbyEffectRemove)               {}
func (l *PetService) DerbyEffectsListUpdate(_ DerbyEffectsListUpdate)     {}
func (l *PetService) DerbyLocation(_ DerbyLocation)                       {}
func (l *PetService) DerbyPetEnergyInfo(_ DerbyPetEnergyInfo)             {}
func (l *PetService) DerbyStatMod(_ DerbyStatMod)                         {}
func (l *PetService) DerbySync(_ DerbySync)                               {}
func (l *PetService) HatchEggNow(_ HatchEggNow)                           {}
func (l *PetService) LentPet(_ LentPet)                                   {}
func (l *PetService) PetDerbyBuff(_ PetDerbyBuff)                         {}
func (l *PetService) PetDerbyCheer(_ PetDerbyCheer)                       {}
func (l *PetService) PetDerbyJumpDuck(_ PetDerbyJumpDuck)                 {}
func (l *PetService) PetDerbyLap(_ PetDerbyLap)                           {}
func (l *PetService) PetDerbyModifyStat(_ PetDerbyModifyStat)             {}
func (l *PetService) PetDerbyMorale(_ PetDerbyMorale)                     {}
func (l *PetService) PetDerbyPhotoFinish(_ PetDerbyPhotoFinish)           {}
func (l *PetService) PetDerbyPlayerLeft(_ PetDerbyPlayerLeft)             {}
func (l *PetService) PetDerbySlow(_ PetDerbySlow)                         {}
func (l *PetService) PetDerbySpeed(_ PetDerbySpeed)                       {}
func (l *PetService) PetDerbyStart(_ PetDerbyStart)                       {}
func (l *PetService) PetDerbySwitchLane(_ PetDerbySwitchLane)             {}
func (l *PetService) PetDerbySwitchLaneFail(_ PetDerbySwitchLaneFail)     {}
func (l *PetService) PetDerbyUseTalent(_ PetDerbyUseTalent)               {}
func (l *PetService) PetEggMorphed(_ PetEggMorphed)                       {}
func (l *PetService) PetEnergyMax(_ PetEnergyMax)                         {}
func (l *PetService) PetEnergyTick(_ PetEnergyTick)                       {}
func (l *PetService) PetGameDance(_ PetGameDance)                         {}
func (l *PetService) PetGameData(_ PetGameData)                           {}
func (l *PetService) PetGameDerbyResults(_ PetGameDerbyResults)           {}
func (l *PetService) PetGameDropBonus(_ PetGameDropBonus)                 {}
func (l *PetService) PetGameDropObject(_ PetGameDropObject)               {}
func (l *PetService) PetGameEnd(_ PetGameEnd)                             {}
func (l *PetService) PetGameEnding(_ PetGameEnding)                       {}
func (l *PetService) PetGameIndividualResults(_ PetGameIndividualResults) {}
func (l *PetService) PetGameInit(_ PetGameInit)                           {}
func (l *PetService) PetGameJoin(_ PetGameJoin)                           {}
func (l *PetService) PetGameJoinRsp(_ PetGameJoinRsp)                     {}
func (l *PetService) PetGameJump(_ PetGameJump)                           {}
func (l *PetService) PetGameMaze(_ PetGameMaze)                           {}
func (l *PetService) PetGameReady(_ PetGameReady)                         {}
func (l *PetService) PetGameSnackFeedFailed(_ PetGameSnackFeedFailed)     {}
func (l *PetService) PetGameSnackFeedSuccess(_ PetGameSnackFeedSuccess)   {}
func (l *PetService) PetGameStart(_ PetGameStart)                         {}
func (l *PetService) PetHatched(_ PetHatched)                             {}
func (l *PetService) PetLevelUp(_ PetLevelUp)                             {}
func (l *PetService) PetMorphCanAfford(_ PetMorphCanAfford)               {}
func (l *PetService) PetMorphingSlot(_ PetMorphingSlot)                   {}
func (l *PetService) PetMorphReady(_ PetMorphReady)                       {}
func (l *PetService) PetMorphSet(_ PetMorphSet)                           {}
func (l *PetService) PetSnackAdd(_ PetSnackAdd)                           {}
func (l *PetService) PetSnackRemove(_ PetSnackRemove)                     {}
func (l *PetService) PetSnackRemoveRequest(_ PetSnackRemoveRequest)       {}
func (l *PetService) PetSnackUpdate(_ PetSnackUpdate)                     {}
func (l *PetService) PetUpdateBehavior(_ PetUpdateBehavior)               {}

func RegisterPetService(r *proto.MessageRouter, s petService) {
	proto.RegisterMessageHandler(r, 9, 1, s.CheerCostMapUpdate)
	proto.RegisterMessageHandler(r, 9, 2, s.DerbyEffectApply)
	proto.RegisterMessageHandler(r, 9, 3, s.DerbyEffectRemove)
	proto.RegisterMessageHandler(r, 9, 4, s.DerbyEffectsListUpdate)
	proto.RegisterMessageHandler(r, 9, 5, s.DerbyLocation)
	proto.RegisterMessageHandler(r, 9, 6, s.DerbyPetEnergyInfo)
	proto.RegisterMessageHandler(r, 9, 7, s.DerbyStatMod)
	proto.RegisterMessageHandler(r, 9, 8, s.DerbySync)
	proto.RegisterMessageHandler(r, 9, 9, s.HatchEggNow)
	proto.RegisterMessageHandler(r, 9, 10, s.LentPet)
	proto.RegisterMessageHandler(r, 9, 11, s.PetDerbyBuff)
	proto.RegisterMessageHandler(r, 9, 12, s.PetDerbyCheer)
	proto.RegisterMessageHandler(r, 9, 13, s.PetDerbyJumpDuck)
	proto.RegisterMessageHandler(r, 9, 14, s.PetDerbyLap)
	proto.RegisterMessageHandler(r, 9, 15, s.PetDerbyModifyStat)
	proto.RegisterMessageHandler(r, 9, 16, s.PetDerbyMorale)
	proto.RegisterMessageHandler(r, 9, 17, s.PetDerbyPhotoFinish)
	proto.RegisterMessageHandler(r, 9, 18, s.PetDerbyPlayerLeft)
	proto.RegisterMessageHandler(r, 9, 19, s.PetDerbySlow)
	proto.RegisterMessageHandler(r, 9, 20, s.PetDerbySpeed)
	proto.RegisterMessageHandler(r, 9, 21, s.PetDerbyStart)
	proto.RegisterMessageHandler(r, 9, 22, s.PetDerbySwitchLane)
	proto.RegisterMessageHandler(r, 9, 23, s.PetDerbySwitchLaneFail)
	proto.RegisterMessageHandler(r, 9, 24, s.PetDerbyUseTalent)
	proto.RegisterMessageHandler(r, 9, 25, s.PetEggMorphed)
	proto.RegisterMessageHandler(r, 9, 26, s.PetEnergyMax)
	proto.RegisterMessageHandler(r, 9, 27, s.PetEnergyTick)
	proto.RegisterMessageHandler(r, 9, 28, s.PetGameDance)
	proto.RegisterMessageHandler(r, 9, 29, s.PetGameData)
	proto.RegisterMessageHandler(r, 9, 30, s.PetGameDerbyResults)
	proto.RegisterMessageHandler(r, 9, 31, s.PetGameDropBonus)
	proto.RegisterMessageHandler(r, 9, 32, s.PetGameDropObject)
	proto.RegisterMessageHandler(r, 9, 33, s.PetGameEnd)
	proto.RegisterMessageHandler(r, 9, 34, s.PetGameEnding)
	proto.RegisterMessageHandler(r, 9, 35, s.PetGameIndividualResults)
	proto.RegisterMessageHandler(r, 9, 36, s.PetGameInit)
	proto.RegisterMessageHandler(r, 9, 37, s.PetGameJoin)
	proto.RegisterMessageHandler(r, 9, 38, s.PetGameJoinRsp)
	proto.RegisterMessageHandler(r, 9, 39, s.PetGameJump)
	proto.RegisterMessageHandler(r, 9, 40, s.PetGameMaze)
	proto.RegisterMessageHandler(r, 9, 41, s.PetGameReady)
	proto.RegisterMessageHandler(r, 9, 42, s.PetGameSnackFeedFailed)
	proto.RegisterMessageHandler(r, 9, 43, s.PetGameSnackFeedSuccess)
	proto.RegisterMessageHandler(r, 9, 44, s.PetGameStart)
	proto.RegisterMessageHandler(r, 9, 45, s.PetHatched)
	proto.RegisterMessageHandler(r, 9, 46, s.PetLevelUp)
	proto.RegisterMessageHandler(r, 9, 47, s.PetMorphCanAfford)
	proto.RegisterMessageHandler(r, 9, 48, s.PetMorphingSlot)
	proto.RegisterMessageHandler(r, 9, 49, s.PetMorphReady)
	proto.RegisterMessageHandler(r, 9, 50, s.PetMorphSet)
	proto.RegisterMessageHandler(r, 9, 51, s.PetSnackAdd)
	proto.RegisterMessageHandler(r, 9, 52, s.PetSnackRemove)
	proto.RegisterMessageHandler(r, 9, 53, s.PetSnackRemoveRequest)
	proto.RegisterMessageHandler(r, 9, 54, s.PetSnackUpdate)
	proto.RegisterMessageHandler(r, 9, 55, s.PetUpdateBehavior)
}

func NewPetClient(c *proto.Client) PetClient {
	return PetClient{c}
}

func (c PetClient) CheerCostMapUpdate(m *CheerCostMapUpdate) error {
	return c.c.WriteMessage(9, 1, m)
}

func (c PetClient) DerbyEffectApply(m *DerbyEffectApply) error {
	return c.c.WriteMessage(9, 2, m)
}

func (c PetClient) DerbyEffectRemove(m *DerbyEffectRemove) error {
	return c.c.WriteMessage(9, 3, m)
}

func (c PetClient) DerbyEffectsListUpdate(m *DerbyEffectsListUpdate) error {
	return c.c.WriteMessage(9, 4, m)
}

func (c PetClient) DerbyLocation(m *DerbyLocation) error {
	return c.c.WriteMessage(9, 5, m)
}

func (c PetClient) DerbyPetEnergyInfo(m *DerbyPetEnergyInfo) error {
	return c.c.WriteMessage(9, 6, m)
}

func (c PetClient) DerbyStatMod(m *DerbyStatMod) error {
	return c.c.WriteMessage(9, 7, m)
}

func (c PetClient) DerbySync(m *DerbySync) error {
	return c.c.WriteMessage(9, 8, m)
}

func (c PetClient) HatchEggNow(m *HatchEggNow) error {
	return c.c.WriteMessage(9, 9, m)
}

func (c PetClient) LentPet(m *LentPet) error {
	return c.c.WriteMessage(9, 10, m)
}

func (c PetClient) PetDerbyBuff(m *PetDerbyBuff) error {
	return c.c.WriteMessage(9, 11, m)
}

func (c PetClient) PetDerbyCheer(m *PetDerbyCheer) error {
	return c.c.WriteMessage(9, 12, m)
}

func (c PetClient) PetDerbyJumpDuck(m *PetDerbyJumpDuck) error {
	return c.c.WriteMessage(9, 13, m)
}

func (c PetClient) PetDerbyLap(m *PetDerbyLap) error {
	return c.c.WriteMessage(9, 14, m)
}

func (c PetClient) PetDerbyModifyStat(m *PetDerbyModifyStat) error {
	return c.c.WriteMessage(9, 15, m)
}

func (c PetClient) PetDerbyMorale(m *PetDerbyMorale) error {
	return c.c.WriteMessage(9, 16, m)
}

func (c PetClient) PetDerbyPhotoFinish(m *PetDerbyPhotoFinish) error {
	return c.c.WriteMessage(9, 17, m)
}

func (c PetClient) PetDerbyPlayerLeft(m *PetDerbyPlayerLeft) error {
	return c.c.WriteMessage(9, 18, m)
}

func (c PetClient) PetDerbySlow(m *PetDerbySlow) error {
	return c.c.WriteMessage(9, 19, m)
}

func (c PetClient) PetDerbySpeed(m *PetDerbySpeed) error {
	return c.c.WriteMessage(9, 20, m)
}

func (c PetClient) PetDerbyStart(m *PetDerbyStart) error {
	return c.c.WriteMessage(9, 21, m)
}

func (c PetClient) PetDerbySwitchLane(m *PetDerbySwitchLane) error {
	return c.c.WriteMessage(9, 22, m)
}

func (c PetClient) PetDerbySwitchLaneFail(m *PetDerbySwitchLaneFail) error {
	return c.c.WriteMessage(9, 23, m)
}

func (c PetClient) PetDerbyUseTalent(m *PetDerbyUseTalent) error {
	return c.c.WriteMessage(9, 24, m)
}

func (c PetClient) PetEggMorphed(m *PetEggMorphed) error {
	return c.c.WriteMessage(9, 25, m)
}

func (c PetClient) PetEnergyMax(m *PetEnergyMax) error {
	return c.c.WriteMessage(9, 26, m)
}

func (c PetClient) PetEnergyTick(m *PetEnergyTick) error {
	return c.c.WriteMessage(9, 27, m)
}

func (c PetClient) PetGameDance(m *PetGameDance) error {
	return c.c.WriteMessage(9, 28, m)
}

func (c PetClient) PetGameData(m *PetGameData) error {
	return c.c.WriteMessage(9, 29, m)
}

func (c PetClient) PetGameDerbyResults(m *PetGameDerbyResults) error {
	return c.c.WriteMessage(9, 30, m)
}

func (c PetClient) PetGameDropBonus(m *PetGameDropBonus) error {
	return c.c.WriteMessage(9, 31, m)
}

func (c PetClient) PetGameDropObject(m *PetGameDropObject) error {
	return c.c.WriteMessage(9, 32, m)
}

func (c PetClient) PetGameEnd(m *PetGameEnd) error {
	return c.c.WriteMessage(9, 33, m)
}

func (c PetClient) PetGameEnding(m *PetGameEnding) error {
	return c.c.WriteMessage(9, 34, m)
}

func (c PetClient) PetGameIndividualResults(m *PetGameIndividualResults) error {
	return c.c.WriteMessage(9, 35, m)
}

func (c PetClient) PetGameInit(m *PetGameInit) error {
	return c.c.WriteMessage(9, 36, m)
}

func (c PetClient) PetGameJoin(m *PetGameJoin) error {
	return c.c.WriteMessage(9, 37, m)
}

func (c PetClient) PetGameJoinRsp(m *PetGameJoinRsp) error {
	return c.c.WriteMessage(9, 38, m)
}

func (c PetClient) PetGameJump(m *PetGameJump) error {
	return c.c.WriteMessage(9, 39, m)
}

func (c PetClient) PetGameMaze(m *PetGameMaze) error {
	return c.c.WriteMessage(9, 40, m)
}

func (c PetClient) PetGameReady(m *PetGameReady) error {
	return c.c.WriteMessage(9, 41, m)
}

func (c PetClient) PetGameSnackFeedFailed(m *PetGameSnackFeedFailed) error {
	return c.c.WriteMessage(9, 42, m)
}

func (c PetClient) PetGameSnackFeedSuccess(m *PetGameSnackFeedSuccess) error {
	return c.c.WriteMessage(9, 43, m)
}

func (c PetClient) PetGameStart(m *PetGameStart) error {
	return c.c.WriteMessage(9, 44, m)
}

func (c PetClient) PetHatched(m *PetHatched) error {
	return c.c.WriteMessage(9, 45, m)
}

func (c PetClient) PetLevelUp(m *PetLevelUp) error {
	return c.c.WriteMessage(9, 46, m)
}

func (c PetClient) PetMorphCanAfford(m *PetMorphCanAfford) error {
	return c.c.WriteMessage(9, 47, m)
}

func (c PetClient) PetMorphingSlot(m *PetMorphingSlot) error {
	return c.c.WriteMessage(9, 48, m)
}

func (c PetClient) PetMorphReady(m *PetMorphReady) error {
	return c.c.WriteMessage(9, 49, m)
}

func (c PetClient) PetMorphSet(m *PetMorphSet) error {
	return c.c.WriteMessage(9, 50, m)
}

func (c PetClient) PetSnackAdd(m *PetSnackAdd) error {
	return c.c.WriteMessage(9, 51, m)
}

func (c PetClient) PetSnackRemove(m *PetSnackRemove) error {
	return c.c.WriteMessage(9, 52, m)
}

func (c PetClient) PetSnackRemoveRequest(m *PetSnackRemoveRequest) error {
	return c.c.WriteMessage(9, 53, m)
}

func (c PetClient) PetSnackUpdate(m *PetSnackUpdate) error {
	return c.c.WriteMessage(9, 54, m)
}

func (c PetClient) PetUpdateBehavior(m *PetUpdateBehavior) error {
	return c.c.WriteMessage(9, 55, m)
}

type CheerCostMapUpdate struct {
	CheerCostMods string
}

func (s *CheerCostMapUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.CheerCostMods)))
	writeString_9(b, s.CheerCostMods)
	return b.Bytes()
}

func (s *CheerCostMapUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.CheerCostMods, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type DerbyEffectApply struct {
	Data string
	Game string
}

func (s *DerbyEffectApply) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Game)+len(s.Data)))
	writeString_9(b, s.Game)
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *DerbyEffectApply) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type DerbyEffectRemove struct {
	Game string
	ID   int32
}

func (s *DerbyEffectRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Game)))
	writeString_9(b, s.Game)
	binary.Write(b, binary.LittleEndian, s.ID)
	return b.Bytes()
}

func (s *DerbyEffectRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ID); err != nil {
		return err
	}
	return nil
}

type DerbyEffectsListUpdate struct {
	Data string
}

func (s *DerbyEffectsListUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *DerbyEffectsListUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type DerbyLocation struct {
	RacerId  int32
	TargetId int32
	XLoc     float32
	YLoc     float32
	ZLoc     float32
}

func (s *DerbyLocation) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.RacerId)
	binary.Write(b, binary.LittleEndian, s.TargetId)
	binary.Write(b, binary.LittleEndian, s.XLoc)
	binary.Write(b, binary.LittleEndian, s.YLoc)
	binary.Write(b, binary.LittleEndian, s.ZLoc)
	return b.Bytes()
}

func (s *DerbyLocation) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RacerId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TargetId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.XLoc); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.YLoc); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ZLoc); err != nil {
		return err
	}
	return nil
}

type DerbyPetEnergyInfo struct {
	GID     uint64
	Cost    int32
	Current int32
	Maximum int32
}

func (s *DerbyPetEnergyInfo) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.Cost)
	binary.Write(b, binary.LittleEndian, s.Current)
	binary.Write(b, binary.LittleEndian, s.Maximum)
	binary.Write(b, binary.LittleEndian, s.GID)
	return b.Bytes()
}

func (s *DerbyPetEnergyInfo) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Cost); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Current); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Maximum); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GID); err != nil {
		return err
	}
	return nil
}

type DerbyStatMod struct {
	Data string
}

func (s *DerbyStatMod) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *DerbyStatMod) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type DerbySync struct {
	RacerId       uint64
	RacePositionX float32
	RacePositionY float32
	RacePositionZ float32
	Lane          uint8
}

func (s *DerbySync) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 21))
	binary.Write(b, binary.LittleEndian, s.RacerId)
	binary.Write(b, binary.LittleEndian, s.RacePositionX)
	binary.Write(b, binary.LittleEndian, s.RacePositionY)
	binary.Write(b, binary.LittleEndian, s.RacePositionZ)
	binary.Write(b, binary.LittleEndian, s.Lane)
	return b.Bytes()
}

func (s *DerbySync) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.RacerId); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RacePositionX); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RacePositionY); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.RacePositionZ); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Lane); err != nil {
		return err
	}
	return nil
}

type HatchEggNow struct {
	EggGID uint64
	Gold   int32
}

func (s *HatchEggNow) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 12))
	binary.Write(b, binary.LittleEndian, s.EggGID)
	binary.Write(b, binary.LittleEndian, s.Gold)
	return b.Bytes()
}

func (s *HatchEggNow) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.EggGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Gold); err != nil {
		return err
	}
	return nil
}

type LentPet struct {
}

func (s *LentPet) Marshal() []byte {
	return []byte{}
}

func (s *LentPet) Unmarshal(data []byte) error {
	return nil
}

type PetDerbyBuff struct {
	PetID uint64
	Type  int32
	Add   uint8
}

func (s *PetDerbyBuff) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	binary.Write(b, binary.LittleEndian, s.Add)
	binary.Write(b, binary.LittleEndian, s.Type)
	binary.Write(b, binary.LittleEndian, s.PetID)
	return b.Bytes()
}

func (s *PetDerbyBuff) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Add); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetID); err != nil {
		return err
	}
	return nil
}

type PetDerbyCheer struct {
	PetIndex uint8
}

func (s *PetDerbyCheer) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	return b.Bytes()
}

func (s *PetDerbyCheer) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	return nil
}

type PetDerbyJumpDuck struct {
	PetIndex uint8
}

func (s *PetDerbyJumpDuck) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	return b.Bytes()
}

func (s *PetDerbyJumpDuck) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	return nil
}

type PetDerbyLap struct {
	Count    int32
	PetIndex uint8
}

func (s *PetDerbyLap) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	binary.Write(b, binary.LittleEndian, s.Count)
	return b.Bytes()
}

func (s *PetDerbyLap) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Count); err != nil {
		return err
	}
	return nil
}

type PetDerbyModifyStat struct {
	Value int32
	Name  uint8
	Type  uint8
}

func (s *PetDerbyModifyStat) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	binary.Write(b, binary.LittleEndian, s.Name)
	binary.Write(b, binary.LittleEndian, s.Value)
	binary.Write(b, binary.LittleEndian, s.Type)
	return b.Bytes()
}

func (s *PetDerbyModifyStat) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Name); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Value); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Type); err != nil {
		return err
	}
	return nil
}

type PetDerbyMorale struct {
	Morale   int32
	PetIndex uint8
}

func (s *PetDerbyMorale) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	binary.Write(b, binary.LittleEndian, s.Morale)
	return b.Bytes()
}

func (s *PetDerbyMorale) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Morale); err != nil {
		return err
	}
	return nil
}

type PetDerbyPhotoFinish struct {
	Rank     int32
	PetIndex uint8
}

func (s *PetDerbyPhotoFinish) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.Rank)
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	return b.Bytes()
}

func (s *PetDerbyPhotoFinish) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Rank); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	return nil
}

type PetDerbyPlayerLeft struct {
	PetIndex uint8
}

func (s *PetDerbyPlayerLeft) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	return b.Bytes()
}

func (s *PetDerbyPlayerLeft) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	return nil
}

type PetDerbySlow struct {
	PetIndex uint8
}

func (s *PetDerbySlow) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	return b.Bytes()
}

func (s *PetDerbySlow) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	return nil
}

type PetDerbySpeed struct {
	Speed    int32
	PetIndex uint8
}

func (s *PetDerbySpeed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	binary.Write(b, binary.LittleEndian, s.Speed)
	return b.Bytes()
}

func (s *PetDerbySpeed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Speed); err != nil {
		return err
	}
	return nil
}

type PetDerbyStart struct {
	GoGoGo uint8
}

func (s *PetDerbyStart) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.GoGoGo)
	return b.Bytes()
}

func (s *PetDerbyStart) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GoGoGo); err != nil {
		return err
	}
	return nil
}

type PetDerbySwitchLane struct {
	MsgID    int32
	PetIndex uint8
	Lane     uint8
}

func (s *PetDerbySwitchLane) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	binary.Write(b, binary.LittleEndian, s.Lane)
	binary.Write(b, binary.LittleEndian, s.MsgID)
	return b.Bytes()
}

func (s *PetDerbySwitchLane) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Lane); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MsgID); err != nil {
		return err
	}
	return nil
}

type PetDerbySwitchLaneFail struct {
}

func (s *PetDerbySwitchLaneFail) Marshal() []byte {
	return []byte{}
}

func (s *PetDerbySwitchLaneFail) Unmarshal(data []byte) error {
	return nil
}

type PetDerbyUseTalent struct {
	TalentID uint32
	Used     uint8
	PetIndex uint8
}

func (s *PetDerbyUseTalent) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6))
	binary.Write(b, binary.LittleEndian, s.TalentID)
	binary.Write(b, binary.LittleEndian, s.Used)
	binary.Write(b, binary.LittleEndian, s.PetIndex)
	return b.Bytes()
}

func (s *PetDerbyUseTalent) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.TalentID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Used); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetIndex); err != nil {
		return err
	}
	return nil
}

type PetEggMorphed struct {
	PetTemplateGID uint64
	PetName        uint32
	HatchTime      uint32
}

func (s *PetEggMorphed) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.PetTemplateGID)
	binary.Write(b, binary.LittleEndian, s.PetName)
	binary.Write(b, binary.LittleEndian, s.HatchTime)
	return b.Bytes()
}

func (s *PetEggMorphed) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetTemplateGID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetName); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.HatchTime); err != nil {
		return err
	}
	return nil
}

type PetEnergyMax struct {
	MaxEnergy int32
}

func (s *PetEnergyMax) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	binary.Write(b, binary.LittleEndian, s.MaxEnergy)
	return b.Bytes()
}

func (s *PetEnergyMax) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.MaxEnergy); err != nil {
		return err
	}
	return nil
}

type PetEnergyTick struct {
	GlobalID  uint64
	Energy    int32
	MaxEnergy int32
	TickTime  int32
}

func (s *PetEnergyTick) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Energy)
	binary.Write(b, binary.LittleEndian, s.MaxEnergy)
	binary.Write(b, binary.LittleEndian, s.TickTime)
	return b.Bytes()
}

func (s *PetEnergyTick) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Energy); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MaxEnergy); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TickTime); err != nil {
		return err
	}
	return nil
}

type PetGameDance struct {
	Moves string
}

func (s *PetGameDance) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Moves)))
	writeString_9(b, s.Moves)
	return b.Bytes()
}

func (s *PetGameDance) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Moves, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetGameData struct {
	Data string
	Game string
}

func (s *PetGameData) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Game)+len(s.Data)))
	writeString_9(b, s.Game)
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *PetGameData) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetGameDerbyResults struct {
	Data string
}

func (s *PetGameDerbyResults) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *PetGameDerbyResults) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetGameDropBonus struct {
	Bonus       int32
	GameCommand uint8
}

func (s *PetGameDropBonus) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 5))
	binary.Write(b, binary.LittleEndian, s.GameCommand)
	binary.Write(b, binary.LittleEndian, s.Bonus)
	return b.Bytes()
}

func (s *PetGameDropBonus) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameCommand); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Bonus); err != nil {
		return err
	}
	return nil
}

type PetGameDropObject struct {
	GID         uint64
	GameCommand uint8
}

func (s *PetGameDropObject) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 9))
	binary.Write(b, binary.LittleEndian, s.GameCommand)
	binary.Write(b, binary.LittleEndian, s.GID)
	return b.Bytes()
}

func (s *PetGameDropObject) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameCommand); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GID); err != nil {
		return err
	}
	return nil
}

type PetGameEnd struct {
	Data string
	Game string
}

func (s *PetGameEnd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Game)+len(s.Data)))
	writeString_9(b, s.Game)
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *PetGameEnd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetGameEnding struct {
	Game     string
	GlobalID uint64
}

func (s *PetGameEnding) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Game)))
	writeString_9(b, s.Game)
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *PetGameEnding) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type PetGameIndividualResults struct {
	Data string
}

func (s *PetGameIndividualResults) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *PetGameIndividualResults) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetGameInit struct {
	Data     string
	Game     string
	MinLevel uint8
	Track    uint8
}

func (s *PetGameInit) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.Game)+len(s.Data)))
	writeString_9(b, s.Game)
	writeString_9(b, s.Data)
	binary.Write(b, binary.LittleEndian, s.MinLevel)
	binary.Write(b, binary.LittleEndian, s.Track)
	return b.Bytes()
}

func (s *PetGameInit) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.MinLevel); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Track); err != nil {
		return err
	}
	return nil
}

type PetGameJoin struct {
	Track string
	Game  string
}

func (s *PetGameJoin) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Game)+len(s.Track)))
	writeString_9(b, s.Game)
	writeString_9(b, s.Track)
	return b.Bytes()
}

func (s *PetGameJoin) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if s.Track, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetGameJoinRsp struct {
	Game    string
	Success uint8
}

func (s *PetGameJoinRsp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 3+len(s.Game)))
	writeString_9(b, s.Game)
	binary.Write(b, binary.LittleEndian, s.Success)
	return b.Bytes()
}

func (s *PetGameJoinRsp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}

type PetGameJump struct {
}

func (s *PetGameJump) Marshal() []byte {
	return []byte{}
}

func (s *PetGameJump) Unmarshal(data []byte) error {
	return nil
}

type PetGameMaze struct {
	ObjectID    uint64
	GameCommand uint8
	GameData    uint8
}

func (s *PetGameMaze) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10))
	binary.Write(b, binary.LittleEndian, s.GameCommand)
	binary.Write(b, binary.LittleEndian, s.GameData)
	binary.Write(b, binary.LittleEndian, s.ObjectID)
	return b.Bytes()
}

func (s *PetGameMaze) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GameCommand); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.GameData); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ObjectID); err != nil {
		return err
	}
	return nil
}

type PetGameReady struct {
}

func (s *PetGameReady) Marshal() []byte {
	return []byte{}
}

func (s *PetGameReady) Unmarshal(data []byte) error {
	return nil
}

type PetGameSnackFeedFailed struct {
}

func (s *PetGameSnackFeedFailed) Marshal() []byte {
	return []byte{}
}

func (s *PetGameSnackFeedFailed) Unmarshal(data []byte) error {
	return nil
}

type PetGameSnackFeedSuccess struct {
	Data string
}

func (s *PetGameSnackFeedSuccess) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 2+len(s.Data)))
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *PetGameSnackFeedSuccess) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetGameStart struct {
	Data string
	Game string
}

func (s *PetGameStart) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Game)+len(s.Data)))
	writeString_9(b, s.Game)
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *PetGameStart) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Game, err = readString_9(b); err != nil {
		return err
	}
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetHatched struct {
	GlobalID   uint64
	TemplateID uint64
}

func (s *PetHatched) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.TemplateID)
	return b.Bytes()
}

func (s *PetHatched) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.TemplateID); err != nil {
		return err
	}
	return nil
}

type PetLevelUp struct {
	GlobalID      uint64
	NewTalent     uint32
	NewDerbyPower uint32
	NewJewel      uint32
	OverallRating uint8
	ActiveRating  uint8
	PetLevel      uint8
	Display       uint8
}

func (s *PetLevelUp) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 24))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.OverallRating)
	binary.Write(b, binary.LittleEndian, s.ActiveRating)
	binary.Write(b, binary.LittleEndian, s.PetLevel)
	binary.Write(b, binary.LittleEndian, s.NewTalent)
	binary.Write(b, binary.LittleEndian, s.NewDerbyPower)
	binary.Write(b, binary.LittleEndian, s.NewJewel)
	binary.Write(b, binary.LittleEndian, s.Display)
	return b.Bytes()
}

func (s *PetLevelUp) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.OverallRating); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ActiveRating); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.PetLevel); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewTalent); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewDerbyPower); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.NewJewel); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Display); err != nil {
		return err
	}
	return nil
}

type PetMorphCanAfford struct {
	CanAfford int8
}

func (s *PetMorphCanAfford) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.CanAfford)
	return b.Bytes()
}

func (s *PetMorphCanAfford) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.CanAfford); err != nil {
		return err
	}
	return nil
}

type PetMorphingSlot struct {
	GlobalID        uint64
	ExpireTimeCount uint32
	Removed         uint8
}

func (s *PetMorphingSlot) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 13))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.Removed)
	binary.Write(b, binary.LittleEndian, s.ExpireTimeCount)
	return b.Bytes()
}

func (s *PetMorphingSlot) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Removed); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ExpireTimeCount); err != nil {
		return err
	}
	return nil
}

type PetMorphReady struct {
	Confirmed int8
}

func (s *PetMorphReady) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 1))
	binary.Write(b, binary.LittleEndian, s.Confirmed)
	return b.Bytes()
}

func (s *PetMorphReady) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Confirmed); err != nil {
		return err
	}
	return nil
}

type PetMorphSet struct {
	PetID uint64
}

func (s *PetMorphSet) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.PetID)
	return b.Bytes()
}

func (s *PetMorphSet) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.PetID); err != nil {
		return err
	}
	return nil
}

type PetSnackAdd struct {
	Data     string
	GlobalID uint64
}

func (s *PetSnackAdd) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *PetSnackAdd) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

type PetSnackRemove struct {
	GlobalID uint64
	ItemID   uint64
}

func (s *PetSnackRemove) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 16))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	return b.Bytes()
}

func (s *PetSnackRemove) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	return nil
}

type PetSnackRemoveRequest struct {
	GlobalID uint64
}

func (s *PetSnackRemoveRequest) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 8))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	return b.Bytes()
}

func (s *PetSnackRemoveRequest) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	return nil
}

type PetSnackUpdate struct {
	GlobalID uint64
	ItemID   uint64
	Quantity int32
}

func (s *PetSnackUpdate) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 20))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	binary.Write(b, binary.LittleEndian, s.ItemID)
	binary.Write(b, binary.LittleEndian, s.Quantity)
	return b.Bytes()
}

func (s *PetSnackUpdate) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.ItemID); err != nil {
		return err
	}
	if err = binary.Read(b, binary.LittleEndian, &s.Quantity); err != nil {
		return err
	}
	return nil
}

type PetUpdateBehavior struct {
	Data     string
	GlobalID uint64
}

func (s *PetUpdateBehavior) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 10+len(s.Data)))
	binary.Write(b, binary.LittleEndian, s.GlobalID)
	writeString_9(b, s.Data)
	return b.Bytes()
}

func (s *PetUpdateBehavior) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.GlobalID); err != nil {
		return err
	}
	if s.Data, err = readString_9(b); err != nil {
		return err
	}
	return nil
}

func writeString_9(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_9(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
