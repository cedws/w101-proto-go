// Code generated by w101-client-go. DO NOT EDIT.
package mg4

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/proto"
	"unsafe"
)

type mg4Service interface {
	MG4Connect(MG4Connect)
	MG4Moved(MG4Moved)
	MG4Rewards(MG4Rewards)
}

type Mg4Service struct {
	mg4Service
}

type Mg4Client struct {
	c *proto.Client
}

func (l *Mg4Service) MG4Connect(_ MG4Connect) {}
func (l *Mg4Service) MG4Moved(_ MG4Moved)     {}
func (l *Mg4Service) MG4Rewards(_ MG4Rewards) {}

func RegisterMg4Service(r *proto.MessageRouter, s mg4Service) {
	proto.RegisterMessageHandler(r, 45, 1, s.MG4Connect)
	proto.RegisterMessageHandler(r, 45, 2, s.MG4Moved)
	proto.RegisterMessageHandler(r, 45, 3, s.MG4Rewards)
}

func NewMg4Client(c *proto.Client) Mg4Client {
	return Mg4Client{c}
}

func (c Mg4Client) MG4Connect(m *MG4Connect) error {
	return c.c.WriteMessage(45, 1, m)
}

func (c Mg4Client) MG4Moved(m *MG4Moved) error {
	return c.c.WriteMessage(45, 2, m)
}

func (c Mg4Client) MG4Rewards(m *MG4Rewards) error {
	return c.c.WriteMessage(45, 3, m)
}

type MG4Connect struct {
}

func (s *MG4Connect) Marshal() []byte {
	return []byte{}
}

func (s *MG4Connect) Unmarshal(data []byte) error {
	return nil
}

type MG4Moved struct {
}

func (s *MG4Moved) Marshal() []byte {
	return []byte{}
}

func (s *MG4Moved) Unmarshal(data []byte) error {
	return nil
}

type MG4Rewards struct {
	Score    int32
	GameName string
}

func (s *MG4Rewards) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 6+len(s.GameName)))
	binary.Write(b, binary.LittleEndian, s.Score)
	writeString_45(b, s.GameName)
	return b.Bytes()
}

func (s *MG4Rewards) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Score); err != nil {
		return err
	}
	if s.GameName, err = readString_45(b); err != nil {
		return err
	}
	return nil
}

func writeString_45(b *bytes.Buffer, v string) {
	binary.Write(b, binary.LittleEndian, uint16(len(v)))
	b.WriteString(v)
}

func readString_45(buf *bytes.Reader) (string, error) {
	var length uint16
	if err := binary.Read(buf, binary.LittleEndian, &length); err != nil {
		return "", err
	}
	data := make([]byte, length)
	if _, err := buf.Read(data); err != nil {
		return "", err
	}
	return *(*string)(unsafe.Pointer(&data)), nil
}
