// Code generated by w101-client-go. DO NOT EDIT.
package testmanager

import (
	"bytes"
	"encoding/binary"
	"github.com/cedws/w101-client-go/codegen"
	"github.com/cedws/w101-client-go/proto"
)

type service interface {
	Login(Login)
	LoginResponse(LoginResponse)
}

func (Service) Login(Login)                 {}
func (Service) LoginResponse(LoginResponse) {}

func RegisterService(r *proto.MessageRouter, s service) {
	proto.RegisterMessageHandler(r, 11, 1, s.Login)
	proto.RegisterMessageHandler(r, 11, 2, s.LoginResponse)
}

func NewClient(c *proto.Client) Client {
	return Client{c}
}

func (c Client) Login(m *Login) error {
	return c.c.WriteMessage(11, 1, m)
}

func (c Client) LoginResponse(m *LoginResponse) error {
	return c.c.WriteMessage(11, 2, m)
}

type Service struct {
	service
}

type Client struct {
	c *proto.Client
}
type Login struct {
	Password string
	Username string
}

func (s *Login) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4+len(s.Username)+len(s.Password)))
	binary.Write(b, binary.LittleEndian, s.Username)
	binary.Write(b, binary.LittleEndian, s.Password)
	return b.Bytes()
}

func (s *Login) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if s.Username, err = codegen.ReadString(b); err != nil {
		return err
	}
	if s.Password, err = codegen.ReadString(b); err != nil {
		return err
	}
	return nil
}

type LoginResponse struct {
	Success int32
}

func (s *LoginResponse) Marshal() []byte {
	b := bytes.NewBuffer(make([]byte, 0, 4))
	return b.Bytes()
}

func (s *LoginResponse) Unmarshal(data []byte) error {
	b := bytes.NewReader(data)
	var err error
	if err = binary.Read(b, binary.LittleEndian, &s.Success); err != nil {
		return err
	}
	return nil
}
